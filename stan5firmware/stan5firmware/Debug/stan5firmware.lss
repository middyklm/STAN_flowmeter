
stan5firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000013b4  00800200  000048b6  0000494a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000048b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c1  008015b4  008015b4  00005cfe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005cfe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005d5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006f0  00000000  00000000  00005da0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000080b1  00000000  00000000  00006490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000026e2  00000000  00000000  0000e541  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003fa9  00000000  00000000  00010c23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000014c8  00000000  00000000  00014bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c02  00000000  00000000  00016094  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004c71  00000000  00000000  00017c96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005e0  00000000  00000000  0001c907  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	74 c2       	rjmp	.+1256   	; 0x4ea <__ctors_end>
       2:	00 00       	nop
       4:	93 c2       	rjmp	.+1318   	; 0x52c <__bad_interrupt>
       6:	00 00       	nop
       8:	91 c2       	rjmp	.+1314   	; 0x52c <__bad_interrupt>
       a:	00 00       	nop
       c:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <__vector_3>
      10:	8d c2       	rjmp	.+1306   	; 0x52c <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <__vector_5>
      18:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__vector_6>
      1c:	87 c2       	rjmp	.+1294   	; 0x52c <__bad_interrupt>
      1e:	00 00       	nop
      20:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__vector_8>
      24:	83 c2       	rjmp	.+1286   	; 0x52c <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__vector_10>
      2c:	7f c2       	rjmp	.+1278   	; 0x52c <__bad_interrupt>
      2e:	00 00       	nop
      30:	7d c2       	rjmp	.+1274   	; 0x52c <__bad_interrupt>
      32:	00 00       	nop
      34:	7b c2       	rjmp	.+1270   	; 0x52c <__bad_interrupt>
      36:	00 00       	nop
      38:	79 c2       	rjmp	.+1266   	; 0x52c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	77 c2       	rjmp	.+1262   	; 0x52c <__bad_interrupt>
      3e:	00 00       	nop
      40:	75 c2       	rjmp	.+1258   	; 0x52c <__bad_interrupt>
      42:	00 00       	nop
      44:	73 c2       	rjmp	.+1254   	; 0x52c <__bad_interrupt>
      46:	00 00       	nop
      48:	71 c2       	rjmp	.+1250   	; 0x52c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6f c2       	rjmp	.+1246   	; 0x52c <__bad_interrupt>
      4e:	00 00       	nop
      50:	6d c2       	rjmp	.+1242   	; 0x52c <__bad_interrupt>
      52:	00 00       	nop
      54:	6b c2       	rjmp	.+1238   	; 0x52c <__bad_interrupt>
      56:	00 00       	nop
      58:	69 c2       	rjmp	.+1234   	; 0x52c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	67 c2       	rjmp	.+1230   	; 0x52c <__bad_interrupt>
      5e:	00 00       	nop
      60:	65 c2       	rjmp	.+1226   	; 0x52c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <__vector_25>
      68:	61 c2       	rjmp	.+1218   	; 0x52c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5f c2       	rjmp	.+1214   	; 0x52c <__bad_interrupt>
      6e:	00 00       	nop
      70:	5d c2       	rjmp	.+1210   	; 0x52c <__bad_interrupt>
      72:	00 00       	nop
      74:	5b c2       	rjmp	.+1206   	; 0x52c <__bad_interrupt>
      76:	00 00       	nop
      78:	59 c2       	rjmp	.+1202   	; 0x52c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	57 c2       	rjmp	.+1198   	; 0x52c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c2       	rjmp	.+1194   	; 0x52c <__bad_interrupt>
      82:	00 00       	nop
      84:	53 c2       	rjmp	.+1190   	; 0x52c <__bad_interrupt>
      86:	00 00       	nop
      88:	51 c2       	rjmp	.+1186   	; 0x52c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4f c2       	rjmp	.+1182   	; 0x52c <__bad_interrupt>
      8e:	00 00       	nop
      90:	4d c2       	rjmp	.+1178   	; 0x52c <__bad_interrupt>
      92:	00 00       	nop
      94:	4b c2       	rjmp	.+1174   	; 0x52c <__bad_interrupt>
      96:	00 00       	nop
      98:	49 c2       	rjmp	.+1170   	; 0x52c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	47 c2       	rjmp	.+1166   	; 0x52c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	45 c2       	rjmp	.+1162   	; 0x52c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	43 c2       	rjmp	.+1158   	; 0x52c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__vector_42>
      ac:	3f c2       	rjmp	.+1150   	; 0x52c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3d c2       	rjmp	.+1146   	; 0x52c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3b c2       	rjmp	.+1142   	; 0x52c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	39 c2       	rjmp	.+1138   	; 0x52c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	37 c2       	rjmp	.+1134   	; 0x52c <__bad_interrupt>
      be:	00 00       	nop
      c0:	35 c2       	rjmp	.+1130   	; 0x52c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	33 c2       	rjmp	.+1126   	; 0x52c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	31 c2       	rjmp	.+1122   	; 0x52c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2f c2       	rjmp	.+1118   	; 0x52c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2d c2       	rjmp	.+1114   	; 0x52c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2b c2       	rjmp	.+1110   	; 0x52c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	29 c2       	rjmp	.+1106   	; 0x52c <__bad_interrupt>
      da:	00 00       	nop
      dc:	27 c2       	rjmp	.+1102   	; 0x52c <__bad_interrupt>
      de:	00 00       	nop
      e0:	25 c2       	rjmp	.+1098   	; 0x52c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	33 0e       	add	r3, r19
      e6:	39 0e       	add	r3, r25
      e8:	3f 0e       	add	r3, r31
      ea:	45 0e       	add	r4, r21
      ec:	4b 0e       	add	r4, r27
      ee:	51 0e       	add	r5, r17
      f0:	53 0e       	add	r5, r19
      f2:	55 0e       	add	r5, r21
      f4:	69 0e       	add	r6, r25
      f6:	6f 0e       	add	r6, r31
      f8:	75 0e       	add	r7, r21
      fa:	7b 0e       	add	r7, r27
      fc:	81 0e       	add	r8, r17
      fe:	87 0e       	add	r8, r23
     100:	89 0e       	add	r8, r25
     102:	8b 0e       	add	r8, r27

00000104 <__trampolines_end>:
     104:	6e 61       	ori	r22, 0x1E	; 30
     106:	6e 00       	.word	0x006e	; ????

00000108 <__c.2332>:
     108:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     118:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     128:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     138:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     148:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     158:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     168:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     178:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     188:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     198:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1a8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1b8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1c8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1d8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1e8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1f8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000206 <command_structure_array>:
     206:	d4 12 97 0e 4a 04 d8 12 06 09 48 04 dc 12 4a 05     ....J.....H...J.
     216:	46 04 e0 12 9b 03 44 04 e4 12 2c 03 42 04 e8 12     F.....D...,.B...
     226:	00 00 40 04 e8 12 00 00 3e 04 e8 12 00 00 3c 04     ..@.....>.....<.
     236:	e8 12 00 00 3a 04 e8 12 00 00 38 04 e8 12 00 00     ....:.....8.....
     246:	36 04 e8 12 00 00 34 04 e8 12 00 00 32 04 ee 12     6.....4.....2...
     256:	25 04 fd 03 f2 12 aa 04 c3 03 f6 12 76 05 b0 03     %...........v...
     266:	fa 12 62 06 91 03 fe 12 05 06 82 03 02 13 e0 06     ..b.............
     276:	72 03 e8 12 00 00 70 03 e8 12 00 00 6e 03 e8 12     r.....p.....n...
     286:	00 00 6c 03 e8 12 00 00 6a 03 e8 12 00 00 68 03     ..l.....j.....h.
     296:	e8 12 00 00 66 03 e8 12 00 00 64 03 e8 12 00 00     ....f.....d.....
     2a6:	62 03 e8 12 00 00 60 03 e8 12 00 00 5e 03 e8 12     b.....`.....^...
     2b6:	00 00 5c 03 e8 12 00 00 5a 03 e8 12 00 00 58 03     ..\.....Z.....X.
     2c6:	e8 12 00 00 56 03 e8 12 00 00 54 03 e8 12 00 00     ....V.....T.....
     2d6:	52 03 e8 12 00 00 50 03 e8 12 00 00 4e 03 e8 12     R.....P.....N...
     2e6:	00 00 4c 03 e8 12 00 00 4a 03 e8 12 00 00 48 03     ..L.....J.....H.
     2f6:	e8 12 00 00 46 03 e8 12 00 00 44 03 e8 12 00 00     ....F.....D.....
     306:	42 03 e8 12 00 00 40 03 e8 12 00 00 3e 03 e8 12     B.....@.....>...
     316:	00 00 3c 03 e8 12 00 00 3a 03 e8 12 00 00 38 03     ..<.....:.....8.
     326:	e8 12 00 00 36 03 06 13 00 00 32 03                 ....6.....2.

00000332 <helptext49>:
     332:	65 6e 64 00                                         end.

00000336 <helptext48>:
     336:	63 00                                               c.

00000338 <helptext47>:
     338:	62 00                                               b.

0000033a <helptext46>:
     33a:	61 00                                               a.

0000033c <helptext45>:
     33c:	63 00                                               c.

0000033e <helptext44>:
     33e:	62 00                                               b.

00000340 <helptext43>:
     340:	61 00                                               a.

00000342 <helptext42>:
     342:	63 00                                               c.

00000344 <helptext41>:
     344:	62 00                                               b.

00000346 <helptext40>:
     346:	61 00                                               a.

00000348 <helptext39>:
     348:	61 00                                               a.

0000034a <helptext38>:
     34a:	63 00                                               c.

0000034c <helptext37>:
     34c:	62 00                                               b.

0000034e <helptext36>:
     34e:	61 00                                               a.

00000350 <helptext35>:
     350:	63 00                                               c.

00000352 <helptext34>:
     352:	62 00                                               b.

00000354 <helptext33>:
     354:	61 00                                               a.

00000356 <helptext32>:
     356:	63 00                                               c.

00000358 <helptext31>:
     358:	62 00                                               b.

0000035a <helptext30>:
     35a:	61 00                                               a.

0000035c <helptext29>:
     35c:	61 00                                               a.

0000035e <helptext28>:
     35e:	63 00                                               c.

00000360 <helptext27>:
     360:	62 00                                               b.

00000362 <helptext26>:
     362:	61 00                                               a.

00000364 <helptext25>:
     364:	63 00                                               c.

00000366 <helptext24>:
     366:	62 00                                               b.

00000368 <helptext23>:
     368:	61 00                                               a.

0000036a <helptext22>:
     36a:	63 00                                               c.

0000036c <helptext21>:
     36c:	62 00                                               b.

0000036e <helptext20>:
     36e:	61 00                                               a.

00000370 <helptext19>:
     370:	61 00                                               a.

00000372 <helptext18>:
     372:	63 6c 6f 63 6b 20 61 6c 61 72 6d 20 6f 66 66 00     clock alarm off.

00000382 <helptext17>:
     382:	63 6c 6f 63 6b 20 61 6c 61 72 6d 20 6f 6e 00        clock alarm on.

00000391 <helptext16>:
     391:	63 6c 6f 63 6b 20 61 6c 61 72 6d 31 20 73 65 74     clock alarm1 set
     3a1:	20 61 73 20 3c 68 68 6d 6d 73 73 44 44 3e 00         as <hhmmssDD>.

000003b0 <helptext15>:
     3b0:	63 6c 6f 63 6b 20 61 6c 61 72 6d 31 20 70 72 69     clock alarm1 pri
     3c0:	6e 74 00                                            nt.

000003c3 <helptext14>:
     3c3:	63 6c 6f 63 6b 20 64 61 74 65 20 73 65 74 20 2d     clock date set -
     3d3:	20 73 65 74 73 20 74 68 65 20 63 6c 6f 63 6b 20      sets the clock 
     3e3:	64 61 74 65 20 66 72 6f 6d 20 73 74 72 69 6e 67     date from string
     3f3:	20 22 64 64 6d 6d 79 79 22 00                        "ddmmyy".

000003fd <helptext13>:
     3fd:	63 6c 6f 63 6b 20 74 69 6d 65 20 73 65 74 20 2d     clock time set -
     40d:	20 73 65 74 73 20 74 68 65 20 52 54 43 20 66 72      sets the RTC fr
     41d:	6f 6d 20 61 20 73 74 72 69 6e 67 20 22 68 68 6d     om a string "hhm
     42d:	6d 73 73 22 00                                      mss".

00000432 <helptext12>:
     432:	63 00                                               c.

00000434 <helptext11>:
     434:	62 00                                               b.

00000436 <helptext10>:
     436:	61 00                                               a.

00000438 <helptext9>:
     438:	61 00                                               a.

0000043a <helptext8>:
     43a:	63 00                                               c.

0000043c <helptext7>:
     43c:	62 00                                               b.

0000043e <helptext6>:
     43e:	61 00                                               a.

00000440 <helptext5>:
     440:	63 00                                               c.

00000442 <helptext4>:
     442:	62 00                                               b.

00000444 <helptext3>:
     444:	61 00                                               a.

00000446 <helptext2>:
     446:	63 00                                               c.

00000448 <helptext1>:
     448:	62 00                                               b.

0000044a <helptext0>:
     44a:	68 65 6c 70 74 65 78 74 20 30 20 69 73 20 68 65     helptext 0 is he
     45a:	72 65 20 66 6f 72 20 74 65 73 74 69 6e 67 00        re for testing.

00000469 <MAINMENUTEXT>:
     469:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 4d 61 69 6e     ----------- Main
     479:	20 4d 65 6e 75 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d      Menu ----------
     489:	2d 0d 0a 28 31 29 20 4d 61 6e 75 61 6c 20 6d 6f     -..(1) Manual mo
     499:	64 65 0d 0a 28 32 29 20 54 65 73 74 20 6d 6f 64     de..(2) Test mod
     4a9:	65 0d 0a 28 33 29 20 53 61 6d 70 6c 65 20 63 6f     e..(3) Sample co
     4b9:	6c 6c 65 63 74 69 6f 6e 20 6d 6f 64 65 0d 0a 28     llection mode..(
     4c9:	34 29 20 43 6c 65 61 6e 20 6d 6f 64 65 0d 0a 28     4) Clean mode..(
     4d9:	35 29 20 53 65 74 20 76 6f 6c 75 6d 65 0d 0a 00     5) Set volume...
	...

000004ea <__ctors_end>:
     4ea:	11 24       	eor	r1, r1
     4ec:	1f be       	out	0x3f, r1	; 63
     4ee:	cf ef       	ldi	r28, 0xFF	; 255
     4f0:	d1 e2       	ldi	r29, 0x21	; 33
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	cd bf       	out	0x3d, r28	; 61
     4f6:	00 e0       	ldi	r16, 0x00	; 0
     4f8:	0c bf       	out	0x3c, r16	; 60

000004fa <__do_copy_data>:
     4fa:	15 e1       	ldi	r17, 0x15	; 21
     4fc:	a0 e0       	ldi	r26, 0x00	; 0
     4fe:	b2 e0       	ldi	r27, 0x02	; 2
     500:	e6 eb       	ldi	r30, 0xB6	; 182
     502:	f8 e4       	ldi	r31, 0x48	; 72
     504:	00 e0       	ldi	r16, 0x00	; 0
     506:	0b bf       	out	0x3b, r16	; 59
     508:	02 c0       	rjmp	.+4      	; 0x50e <__do_copy_data+0x14>
     50a:	07 90       	elpm	r0, Z+
     50c:	0d 92       	st	X+, r0
     50e:	a4 3b       	cpi	r26, 0xB4	; 180
     510:	b1 07       	cpc	r27, r17
     512:	d9 f7       	brne	.-10     	; 0x50a <__do_copy_data+0x10>

00000514 <__do_clear_bss>:
     514:	26 e1       	ldi	r18, 0x16	; 22
     516:	a4 eb       	ldi	r26, 0xB4	; 180
     518:	b5 e1       	ldi	r27, 0x15	; 21
     51a:	01 c0       	rjmp	.+2      	; 0x51e <.do_clear_bss_start>

0000051c <.do_clear_bss_loop>:
     51c:	1d 92       	st	X+, r1

0000051e <.do_clear_bss_start>:
     51e:	a5 37       	cpi	r26, 0x75	; 117
     520:	b2 07       	cpc	r27, r18
     522:	e1 f7       	brne	.-8      	; 0x51c <.do_clear_bss_loop>
     524:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <main>
     528:	0c 94 59 24 	jmp	0x48b2	; 0x48b2 <_exit>

0000052c <__bad_interrupt>:
     52c:	69 cd       	rjmp	.-1326   	; 0x0 <__vectors>

0000052e <BUOYANCYgoToSurface>:
//Check external pressure and calculate depth
	 //external_pressure = ReadPressure(PRESSURE_SENSOR_EXTERNAL);
//check internal pressure and set desired internal pressure to target
	 //internal_pressure = ReadPressure(PRESSURE_SENSOR_INTERNAL);
//run pump to ascend
	 printf("Going to surface..\r\n");
     52e:	8a e1       	ldi	r24, 0x1A	; 26
     530:	92 e0       	ldi	r25, 0x02	; 2
     532:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
	 MotordriverRun(BUOYANCY_PUMP,PUMP_OUT,255);// pump on CW
     536:	4f ef       	ldi	r20, 0xFF	; 255
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	0e 94 35 13 	call	0x266a	; 0x266a <MotordriverRun>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     542:	2f ef       	ldi	r18, 0xFF	; 255
     544:	83 e2       	ldi	r24, 0x23	; 35
     546:	94 ef       	ldi	r25, 0xF4	; 244
     548:	21 50       	subi	r18, 0x01	; 1
     54a:	80 40       	sbci	r24, 0x00	; 0
     54c:	90 40       	sbci	r25, 0x00	; 0
     54e:	e1 f7       	brne	.-8      	; 0x548 <BUOYANCYgoToSurface+0x1a>
     550:	00 c0       	rjmp	.+0      	; 0x552 <BUOYANCYgoToSurface+0x24>
     552:	00 00       	nop
	 _delay_ms(10000);
	 MotordriverStop(BUOYANCY_PUMP);	/* turn off pump (pump2) */
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	0e 94 53 13 	call	0x26a6	; 0x26a6 <MotordriverStop>
	 printf("Stop for 10 s\r\n");
     55a:	8e e2       	ldi	r24, 0x2E	; 46
     55c:	92 e0       	ldi	r25, 0x02	; 2
     55e:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
     562:	2f ef       	ldi	r18, 0xFF	; 255
     564:	83 e2       	ldi	r24, 0x23	; 35
     566:	94 ef       	ldi	r25, 0xF4	; 244
     568:	21 50       	subi	r18, 0x01	; 1
     56a:	80 40       	sbci	r24, 0x00	; 0
     56c:	90 40       	sbci	r25, 0x00	; 0
     56e:	e1 f7       	brne	.-8      	; 0x568 <BUOYANCYgoToSurface+0x3a>
     570:	00 c0       	rjmp	.+0      	; 0x572 <BUOYANCYgoToSurface+0x44>
     572:	00 00       	nop
     574:	08 95       	ret

00000576 <BUOYANCYgoToDepth>:
	 _delay_ms(10000);	 
}


void BUOYANCYgoToDepth(int target_depth){
	printf("Going down..\r\n");
     576:	8d e3       	ldi	r24, 0x3D	; 61
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
	MotordriverRun(BUOYANCY_PUMP,PUMP_IN,255);
     57e:	4f ef       	ldi	r20, 0xFF	; 255
     580:	50 e0       	ldi	r21, 0x00	; 0
     582:	61 e0       	ldi	r22, 0x01	; 1
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	0e 94 35 13 	call	0x266a	; 0x266a <MotordriverRun>
     58a:	2f ef       	ldi	r18, 0xFF	; 255
     58c:	83 e2       	ldi	r24, 0x23	; 35
     58e:	94 ef       	ldi	r25, 0xF4	; 244
     590:	21 50       	subi	r18, 0x01	; 1
     592:	80 40       	sbci	r24, 0x00	; 0
     594:	90 40       	sbci	r25, 0x00	; 0
     596:	e1 f7       	brne	.-8      	; 0x590 <BUOYANCYgoToDepth+0x1a>
     598:	00 c0       	rjmp	.+0      	; 0x59a <BUOYANCYgoToDepth+0x24>
     59a:	00 00       	nop
	_delay_ms(10000);
	MotordriverStop(BUOYANCY_PUMP);	
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	0e 94 53 13 	call	0x26a6	; 0x26a6 <MotordriverStop>
	printf("Stop for 10 s\r\n");
     5a2:	8e e2       	ldi	r24, 0x2E	; 46
     5a4:	92 e0       	ldi	r25, 0x02	; 2
     5a6:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
     5aa:	2f ef       	ldi	r18, 0xFF	; 255
     5ac:	83 e2       	ldi	r24, 0x23	; 35
     5ae:	94 ef       	ldi	r25, 0xF4	; 244
     5b0:	21 50       	subi	r18, 0x01	; 1
     5b2:	80 40       	sbci	r24, 0x00	; 0
     5b4:	90 40       	sbci	r25, 0x00	; 0
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <BUOYANCYgoToDepth+0x3a>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <BUOYANCYgoToDepth+0x44>
     5ba:	00 00       	nop
     5bc:	08 95       	ret

000005be <bcd_to_decimal>:
	DS3231_Write(alarm1hrREG,   (DS3231_Read(alarm1hrREG) & 0x7f));
	DS3231_Write(alarm1dateREG, (DS3231_Read(alarm1dateREG) & 0x3f));
	
	ds3231PrintAlarm1RegisterValues();
	// print alarm time to be sure new time is correct
	printAlarm1string();
     5be:	98 2f       	mov	r25, r24
     5c0:	92 95       	swap	r25
     5c2:	9f 70       	andi	r25, 0x0F	; 15
     5c4:	99 0f       	add	r25, r25
     5c6:	29 2f       	mov	r18, r25
     5c8:	22 0f       	add	r18, r18
     5ca:	22 0f       	add	r18, r18
     5cc:	92 0f       	add	r25, r18
     5ce:	8f 70       	andi	r24, 0x0F	; 15
     5d0:	89 0f       	add	r24, r25
     5d2:	08 95       	ret

000005d4 <decimal_to_bcd>:
     5d4:	9d ec       	ldi	r25, 0xCD	; 205
     5d6:	89 9f       	mul	r24, r25
     5d8:	91 2d       	mov	r25, r1
     5da:	11 24       	eor	r1, r1
     5dc:	96 95       	lsr	r25
     5de:	96 95       	lsr	r25
     5e0:	96 95       	lsr	r25
     5e2:	20 e1       	ldi	r18, 0x10	; 16
     5e4:	92 9f       	mul	r25, r18
     5e6:	a0 01       	movw	r20, r0
     5e8:	11 24       	eor	r1, r1
     5ea:	99 0f       	add	r25, r25
     5ec:	29 2f       	mov	r18, r25
     5ee:	22 0f       	add	r18, r18
     5f0:	22 0f       	add	r18, r18
     5f2:	92 0f       	add	r25, r18
     5f4:	89 1b       	sub	r24, r25
     5f6:	8f 70       	andi	r24, 0x0F	; 15
     5f8:	84 2b       	or	r24, r20
     5fa:	08 95       	ret

000005fc <DS3231_Read>:
     5fc:	cf 93       	push	r28
     5fe:	c8 2f       	mov	r28, r24
     600:	53 d5       	rcall	.+2726   	; 0x10a8 <i2cStart>
     602:	80 ed       	ldi	r24, 0xD0	; 208
     604:	68 d5       	rcall	.+2768   	; 0x10d6 <i2cSend>
     606:	8c 2f       	mov	r24, r28
     608:	66 d5       	rcall	.+2764   	; 0x10d6 <i2cSend>
     60a:	4e d5       	rcall	.+2716   	; 0x10a8 <i2cStart>
     60c:	81 ed       	ldi	r24, 0xD1	; 209
     60e:	63 d5       	rcall	.+2758   	; 0x10d6 <i2cSend>
     610:	5b d5       	rcall	.+2742   	; 0x10c8 <i2cReadNoAck>
     612:	c8 2f       	mov	r28, r24
     614:	4e d5       	rcall	.+2716   	; 0x10b2 <i2cStop>
     616:	8c 2f       	mov	r24, r28
     618:	cf 91       	pop	r28
     61a:	08 95       	ret

0000061c <DS3231_Write>:
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	d8 2f       	mov	r29, r24
     622:	c6 2f       	mov	r28, r22
     624:	41 d5       	rcall	.+2690   	; 0x10a8 <i2cStart>
     626:	80 ed       	ldi	r24, 0xD0	; 208
     628:	56 d5       	rcall	.+2732   	; 0x10d6 <i2cSend>
     62a:	8d 2f       	mov	r24, r29
     62c:	54 d5       	rcall	.+2728   	; 0x10d6 <i2cSend>
     62e:	8c 2f       	mov	r24, r28
     630:	52 d5       	rcall	.+2724   	; 0x10d6 <i2cSend>
     632:	3f d5       	rcall	.+2686   	; 0x10b2 <i2cStop>
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	08 95       	ret

0000063a <DS3231_init>:
     63a:	8b e4       	ldi	r24, 0x4B	; 75
     63c:	92 e0       	ldi	r25, 0x02	; 2
     63e:	9c d5       	rcall	.+2872   	; 0x1178 <LogDebug>
     640:	6f 98       	cbi	0x0d, 7	; 13
     642:	77 9a       	sbi	0x0e, 7	; 14
     644:	65 e0       	ldi	r22, 0x05	; 5
     646:	8e e0       	ldi	r24, 0x0E	; 14
     648:	e9 df       	rcall	.-46     	; 0x61c <DS3231_Write>
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	8f e0       	ldi	r24, 0x0F	; 15
     64e:	e6 df       	rcall	.-52     	; 0x61c <DS3231_Write>
     650:	83 e6       	ldi	r24, 0x63	; 99
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	91 c5       	rjmp	.+2850   	; 0x1178 <LogDebug>
     656:	08 95       	ret

00000658 <printTimestring>:
     658:	af 92       	push	r10
     65a:	bf 92       	push	r11
     65c:	cf 92       	push	r12
     65e:	df 92       	push	r13
     660:	ef 92       	push	r14
     662:	ff 92       	push	r15
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	29 97       	sbiw	r28, 0x09	; 9
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	be df       	rcall	.-132    	; 0x5fc <DS3231_Read>
     680:	9e df       	rcall	.-196    	; 0x5be <bcd_to_decimal>
     682:	18 2f       	mov	r17, r24
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	ba df       	rcall	.-140    	; 0x5fc <DS3231_Read>
     688:	9a df       	rcall	.-204    	; 0x5be <bcd_to_decimal>
     68a:	f8 2e       	mov	r15, r24
     68c:	82 e0       	ldi	r24, 0x02	; 2
     68e:	b6 df       	rcall	.-148    	; 0x5fc <DS3231_Read>
     690:	8f 73       	andi	r24, 0x3F	; 63
     692:	95 df       	rcall	.-214    	; 0x5be <bcd_to_decimal>
     694:	c8 2e       	mov	r12, r24
     696:	1f 92       	push	r1
     698:	1f 93       	push	r17
     69a:	04 e8       	ldi	r16, 0x84	; 132
     69c:	16 e0       	ldi	r17, 0x06	; 6
     69e:	1f 93       	push	r17
     6a0:	0f 93       	push	r16
     6a2:	1f 92       	push	r1
     6a4:	0f 2e       	mov	r0, r31
     6a6:	f3 e0       	ldi	r31, 0x03	; 3
     6a8:	df 2e       	mov	r13, r31
     6aa:	f0 2d       	mov	r31, r0
     6ac:	df 92       	push	r13
     6ae:	ce 01       	movw	r24, r28
     6b0:	01 96       	adiw	r24, 0x01	; 1
     6b2:	5c 01       	movw	r10, r24
     6b4:	9f 93       	push	r25
     6b6:	8f 93       	push	r24
     6b8:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <snprintf>
     6bc:	1f 92       	push	r1
     6be:	ff 92       	push	r15
     6c0:	1f 93       	push	r17
     6c2:	0f 93       	push	r16
     6c4:	1f 92       	push	r1
     6c6:	df 92       	push	r13
     6c8:	7e 01       	movw	r14, r28
     6ca:	94 e0       	ldi	r25, 0x04	; 4
     6cc:	e9 0e       	add	r14, r25
     6ce:	f1 1c       	adc	r15, r1
     6d0:	ff 92       	push	r15
     6d2:	ef 92       	push	r14
     6d4:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <snprintf>
     6d8:	1f 92       	push	r1
     6da:	cf 92       	push	r12
     6dc:	1f 93       	push	r17
     6de:	0f 93       	push	r16
     6e0:	1f 92       	push	r1
     6e2:	df 92       	push	r13
     6e4:	8e 01       	movw	r16, r28
     6e6:	09 5f       	subi	r16, 0xF9	; 249
     6e8:	1f 4f       	sbci	r17, 0xFF	; 255
     6ea:	1f 93       	push	r17
     6ec:	0f 93       	push	r16
     6ee:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <snprintf>
     6f2:	bf 92       	push	r11
     6f4:	af 92       	push	r10
     6f6:	ff 92       	push	r15
     6f8:	ef 92       	push	r14
     6fa:	1f 93       	push	r17
     6fc:	0f 93       	push	r16
     6fe:	8c e7       	ldi	r24, 0x7C	; 124
     700:	92 e0       	ldi	r25, 0x02	; 2
     702:	9f 93       	push	r25
     704:	8f 93       	push	r24
     706:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	f8 94       	cli
     70e:	de bf       	out	0x3e, r29	; 62
     710:	0f be       	out	0x3f, r0	; 63
     712:	cd bf       	out	0x3d, r28	; 61
     714:	29 96       	adiw	r28, 0x09	; 9
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	cd bf       	out	0x3d, r28	; 61
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	ff 90       	pop	r15
     72a:	ef 90       	pop	r14
     72c:	df 90       	pop	r13
     72e:	cf 90       	pop	r12
     730:	bf 90       	pop	r11
     732:	af 90       	pop	r10
     734:	08 95       	ret

00000736 <printDatestring>:
     736:	af 92       	push	r10
     738:	bf 92       	push	r11
     73a:	cf 92       	push	r12
     73c:	df 92       	push	r13
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
     74e:	29 97       	sbiw	r28, 0x09	; 9
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	de bf       	out	0x3e, r29	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	cd bf       	out	0x3d, r28	; 61
     75a:	86 e0       	ldi	r24, 0x06	; 6
     75c:	4f df       	rcall	.-354    	; 0x5fc <DS3231_Read>
     75e:	2f df       	rcall	.-418    	; 0x5be <bcd_to_decimal>
     760:	18 2f       	mov	r17, r24
     762:	85 e0       	ldi	r24, 0x05	; 5
     764:	4b df       	rcall	.-362    	; 0x5fc <DS3231_Read>
     766:	8f 71       	andi	r24, 0x1F	; 31
     768:	2a df       	rcall	.-428    	; 0x5be <bcd_to_decimal>
     76a:	f8 2e       	mov	r15, r24
     76c:	84 e0       	ldi	r24, 0x04	; 4
     76e:	46 df       	rcall	.-372    	; 0x5fc <DS3231_Read>
     770:	8f 73       	andi	r24, 0x3F	; 63
     772:	25 df       	rcall	.-438    	; 0x5be <bcd_to_decimal>
     774:	a8 2e       	mov	r10, r24
     776:	83 e0       	ldi	r24, 0x03	; 3
     778:	41 df       	rcall	.-382    	; 0x5fc <DS3231_Read>
     77a:	1f 92       	push	r1
     77c:	1f 93       	push	r17
     77e:	04 e8       	ldi	r16, 0x84	; 132
     780:	16 e0       	ldi	r17, 0x06	; 6
     782:	1f 93       	push	r17
     784:	0f 93       	push	r16
     786:	1f 92       	push	r1
     788:	85 e0       	ldi	r24, 0x05	; 5
     78a:	8f 93       	push	r24
     78c:	ce 01       	movw	r24, r28
     78e:	01 96       	adiw	r24, 0x01	; 1
     790:	6c 01       	movw	r12, r24
     792:	9f 93       	push	r25
     794:	8f 93       	push	r24
     796:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <snprintf>
     79a:	1f 92       	push	r1
     79c:	ff 92       	push	r15
     79e:	1f 93       	push	r17
     7a0:	0f 93       	push	r16
     7a2:	1f 92       	push	r1
     7a4:	0f 2e       	mov	r0, r31
     7a6:	f3 e0       	ldi	r31, 0x03	; 3
     7a8:	bf 2e       	mov	r11, r31
     7aa:	f0 2d       	mov	r31, r0
     7ac:	bf 92       	push	r11
     7ae:	7e 01       	movw	r14, r28
     7b0:	94 e0       	ldi	r25, 0x04	; 4
     7b2:	e9 0e       	add	r14, r25
     7b4:	f1 1c       	adc	r15, r1
     7b6:	ff 92       	push	r15
     7b8:	ef 92       	push	r14
     7ba:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <snprintf>
     7be:	1f 92       	push	r1
     7c0:	af 92       	push	r10
     7c2:	1f 93       	push	r17
     7c4:	0f 93       	push	r16
     7c6:	1f 92       	push	r1
     7c8:	bf 92       	push	r11
     7ca:	8e 01       	movw	r16, r28
     7cc:	09 5f       	subi	r16, 0xF9	; 249
     7ce:	1f 4f       	sbci	r17, 0xFF	; 255
     7d0:	1f 93       	push	r17
     7d2:	0f 93       	push	r16
     7d4:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <snprintf>
     7d8:	df 92       	push	r13
     7da:	cf 92       	push	r12
     7dc:	ff 92       	push	r15
     7de:	ef 92       	push	r14
     7e0:	1f 93       	push	r17
     7e2:	0f 93       	push	r16
     7e4:	8f e8       	ldi	r24, 0x8F	; 143
     7e6:	92 e0       	ldi	r25, 0x02	; 2
     7e8:	9f 93       	push	r25
     7ea:	8f 93       	push	r24
     7ec:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	cd bf       	out	0x3d, r28	; 61
     7fa:	29 96       	adiw	r28, 0x09	; 9
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	de bf       	out	0x3e, r29	; 62
     802:	0f be       	out	0x3f, r0	; 63
     804:	cd bf       	out	0x3d, r28	; 61
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	1f 91       	pop	r17
     80c:	0f 91       	pop	r16
     80e:	ff 90       	pop	r15
     810:	ef 90       	pop	r14
     812:	df 90       	pop	r13
     814:	cf 90       	pop	r12
     816:	bf 90       	pop	r11
     818:	af 90       	pop	r10
     81a:	08 95       	ret

0000081c <setTime>:
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	c8 2f       	mov	r28, r24
     822:	d6 2f       	mov	r29, r22
     824:	84 2f       	mov	r24, r20
     826:	d6 de       	rcall	.-596    	; 0x5d4 <decimal_to_bcd>
     828:	68 2f       	mov	r22, r24
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	f7 de       	rcall	.-530    	; 0x61c <DS3231_Write>
     82e:	8d 2f       	mov	r24, r29
     830:	d1 de       	rcall	.-606    	; 0x5d4 <decimal_to_bcd>
     832:	68 2f       	mov	r22, r24
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	f2 de       	rcall	.-540    	; 0x61c <DS3231_Write>
     838:	8c 2f       	mov	r24, r28
     83a:	cc de       	rcall	.-616    	; 0x5d4 <decimal_to_bcd>
     83c:	68 2f       	mov	r22, r24
     83e:	6f 73       	andi	r22, 0x3F	; 63
     840:	82 e0       	ldi	r24, 0x02	; 2
     842:	ec de       	rcall	.-552    	; 0x61c <DS3231_Write>
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	08 95       	ret

0000084a <setClockfromString>:
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	ec 01       	movw	r28, r24
     854:	fc 01       	movw	r30, r24
     856:	01 90       	ld	r0, Z+
     858:	00 20       	and	r0, r0
     85a:	e9 f7       	brne	.-6      	; 0x856 <setClockfromString+0xc>
     85c:	31 97       	sbiw	r30, 0x01	; 1
     85e:	e8 1b       	sub	r30, r24
     860:	f9 0b       	sbc	r31, r25
     862:	ff 93       	push	r31
     864:	ef 93       	push	r30
     866:	df 93       	push	r29
     868:	cf 93       	push	r28
     86a:	82 ea       	ldi	r24, 0xA2	; 162
     86c:	92 e0       	ldi	r25, 0x02	; 2
     86e:	9f 93       	push	r25
     870:	8f 93       	push	r24
     872:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
     876:	fe 01       	movw	r30, r28
     878:	01 90       	ld	r0, Z+
     87a:	00 20       	and	r0, r0
     87c:	e9 f7       	brne	.-6      	; 0x878 <setClockfromString+0x2e>
     87e:	cf 01       	movw	r24, r30
     880:	07 97       	sbiw	r24, 0x07	; 7
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	8c 17       	cp	r24, r28
     890:	9d 07       	cpc	r25, r29
     892:	09 f0       	breq	.+2      	; 0x896 <setClockfromString+0x4c>
     894:	3d c0       	rjmp	.+122    	; 0x910 <setClockfromString+0xc6>
     896:	83 ed       	ldi	r24, 0xD3	; 211
     898:	92 e0       	ldi	r25, 0x02	; 2
     89a:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
     89e:	18 81       	ld	r17, Y
     8a0:	11 0f       	add	r17, r17
     8a2:	10 56       	subi	r17, 0x60	; 96
     8a4:	81 2f       	mov	r24, r17
     8a6:	88 0f       	add	r24, r24
     8a8:	88 0f       	add	r24, r24
     8aa:	18 0f       	add	r17, r24
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	80 53       	subi	r24, 0x30	; 48
     8b0:	18 0f       	add	r17, r24
     8b2:	0a 81       	ldd	r16, Y+2	; 0x02
     8b4:	00 0f       	add	r16, r16
     8b6:	00 56       	subi	r16, 0x60	; 96
     8b8:	80 2f       	mov	r24, r16
     8ba:	88 0f       	add	r24, r24
     8bc:	88 0f       	add	r24, r24
     8be:	08 0f       	add	r16, r24
     8c0:	8b 81       	ldd	r24, Y+3	; 0x03
     8c2:	80 53       	subi	r24, 0x30	; 48
     8c4:	08 0f       	add	r16, r24
     8c6:	8c 81       	ldd	r24, Y+4	; 0x04
     8c8:	88 0f       	add	r24, r24
     8ca:	80 56       	subi	r24, 0x60	; 96
     8cc:	98 2f       	mov	r25, r24
     8ce:	99 0f       	add	r25, r25
     8d0:	99 0f       	add	r25, r25
     8d2:	98 0f       	add	r25, r24
     8d4:	8d 81       	ldd	r24, Y+5	; 0x05
     8d6:	80 53       	subi	r24, 0x30	; 48
     8d8:	c9 2f       	mov	r28, r25
     8da:	c8 0f       	add	r28, r24
     8dc:	1f 92       	push	r1
     8de:	cf 93       	push	r28
     8e0:	1f 92       	push	r1
     8e2:	0f 93       	push	r16
     8e4:	1f 92       	push	r1
     8e6:	1f 93       	push	r17
     8e8:	8c e0       	ldi	r24, 0x0C	; 12
     8ea:	93 e0       	ldi	r25, 0x03	; 3
     8ec:	9f 93       	push	r25
     8ee:	8f 93       	push	r24
     8f0:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
     8f4:	4c 2f       	mov	r20, r28
     8f6:	60 2f       	mov	r22, r16
     8f8:	81 2f       	mov	r24, r17
     8fa:	90 df       	rcall	.-224    	; 0x81c <setTime>
     8fc:	ad de       	rcall	.-678    	; 0x658 <printTimestring>
     8fe:	8d b7       	in	r24, 0x3d	; 61
     900:	9e b7       	in	r25, 0x3e	; 62
     902:	08 96       	adiw	r24, 0x08	; 8
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	9e bf       	out	0x3e, r25	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	8d bf       	out	0x3d, r24	; 61
     90e:	08 c0       	rjmp	.+16     	; 0x920 <setClockfromString+0xd6>
     910:	89 e2       	ldi	r24, 0x29	; 41
     912:	93 e0       	ldi	r25, 0x03	; 3
     914:	9f 93       	push	r25
     916:	8f 93       	push	r24
     918:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	08 95       	ret

0000092a <setDate>:
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	d6 2f       	mov	r29, r22
     930:	c4 2f       	mov	r28, r20
     932:	50 de       	rcall	.-864    	; 0x5d4 <decimal_to_bcd>
     934:	68 2f       	mov	r22, r24
     936:	84 e0       	ldi	r24, 0x04	; 4
     938:	71 de       	rcall	.-798    	; 0x61c <DS3231_Write>
     93a:	8d 2f       	mov	r24, r29
     93c:	4b de       	rcall	.-874    	; 0x5d4 <decimal_to_bcd>
     93e:	68 2f       	mov	r22, r24
     940:	85 e0       	ldi	r24, 0x05	; 5
     942:	6c de       	rcall	.-808    	; 0x61c <DS3231_Write>
     944:	8c 2f       	mov	r24, r28
     946:	46 de       	rcall	.-884    	; 0x5d4 <decimal_to_bcd>
     948:	68 2f       	mov	r22, r24
     94a:	86 e0       	ldi	r24, 0x06	; 6
     94c:	67 de       	rcall	.-818    	; 0x61c <DS3231_Write>
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <setDatefromString>:
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	ec 01       	movw	r28, r24
     95e:	fc 01       	movw	r30, r24
     960:	01 90       	ld	r0, Z+
     962:	00 20       	and	r0, r0
     964:	e9 f7       	brne	.-6      	; 0x960 <setDatefromString+0xc>
     966:	31 97       	sbiw	r30, 0x01	; 1
     968:	e8 1b       	sub	r30, r24
     96a:	f9 0b       	sbc	r31, r25
     96c:	ff 93       	push	r31
     96e:	ef 93       	push	r30
     970:	df 93       	push	r29
     972:	cf 93       	push	r28
     974:	82 ea       	ldi	r24, 0xA2	; 162
     976:	92 e0       	ldi	r25, 0x02	; 2
     978:	9f 93       	push	r25
     97a:	8f 93       	push	r24
     97c:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
     980:	fe 01       	movw	r30, r28
     982:	01 90       	ld	r0, Z+
     984:	00 20       	and	r0, r0
     986:	e9 f7       	brne	.-6      	; 0x982 <setDatefromString+0x2e>
     988:	cf 01       	movw	r24, r30
     98a:	07 97       	sbiw	r24, 0x07	; 7
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	8c 17       	cp	r24, r28
     99a:	9d 07       	cpc	r25, r29
     99c:	09 f0       	breq	.+2      	; 0x9a0 <setDatefromString+0x4c>
     99e:	3d c0       	rjmp	.+122    	; 0xa1a <setDatefromString+0xc6>
     9a0:	86 e8       	ldi	r24, 0x86	; 134
     9a2:	93 e0       	ldi	r25, 0x03	; 3
     9a4:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
     9a8:	18 81       	ld	r17, Y
     9aa:	11 0f       	add	r17, r17
     9ac:	10 56       	subi	r17, 0x60	; 96
     9ae:	81 2f       	mov	r24, r17
     9b0:	88 0f       	add	r24, r24
     9b2:	88 0f       	add	r24, r24
     9b4:	18 0f       	add	r17, r24
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	80 53       	subi	r24, 0x30	; 48
     9ba:	18 0f       	add	r17, r24
     9bc:	0a 81       	ldd	r16, Y+2	; 0x02
     9be:	00 0f       	add	r16, r16
     9c0:	00 56       	subi	r16, 0x60	; 96
     9c2:	80 2f       	mov	r24, r16
     9c4:	88 0f       	add	r24, r24
     9c6:	88 0f       	add	r24, r24
     9c8:	08 0f       	add	r16, r24
     9ca:	8b 81       	ldd	r24, Y+3	; 0x03
     9cc:	80 53       	subi	r24, 0x30	; 48
     9ce:	08 0f       	add	r16, r24
     9d0:	8c 81       	ldd	r24, Y+4	; 0x04
     9d2:	88 0f       	add	r24, r24
     9d4:	80 56       	subi	r24, 0x60	; 96
     9d6:	98 2f       	mov	r25, r24
     9d8:	99 0f       	add	r25, r25
     9da:	99 0f       	add	r25, r25
     9dc:	98 0f       	add	r25, r24
     9de:	8d 81       	ldd	r24, Y+5	; 0x05
     9e0:	80 53       	subi	r24, 0x30	; 48
     9e2:	c9 2f       	mov	r28, r25
     9e4:	c8 0f       	add	r28, r24
     9e6:	1f 92       	push	r1
     9e8:	cf 93       	push	r28
     9ea:	1f 92       	push	r1
     9ec:	0f 93       	push	r16
     9ee:	1f 92       	push	r1
     9f0:	1f 93       	push	r17
     9f2:	8f eb       	ldi	r24, 0xBF	; 191
     9f4:	93 e0       	ldi	r25, 0x03	; 3
     9f6:	9f 93       	push	r25
     9f8:	8f 93       	push	r24
     9fa:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
     9fe:	4c 2f       	mov	r20, r28
     a00:	60 2f       	mov	r22, r16
     a02:	81 2f       	mov	r24, r17
     a04:	92 df       	rcall	.-220    	; 0x92a <setDate>
     a06:	97 de       	rcall	.-722    	; 0x736 <printDatestring>
     a08:	8d b7       	in	r24, 0x3d	; 61
     a0a:	9e b7       	in	r25, 0x3e	; 62
     a0c:	08 96       	adiw	r24, 0x08	; 8
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	f8 94       	cli
     a12:	9e bf       	out	0x3e, r25	; 62
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	8d bf       	out	0x3d, r24	; 61
     a18:	08 c0       	rjmp	.+16     	; 0xa2a <setDatefromString+0xd6>
     a1a:	8c ed       	ldi	r24, 0xDC	; 220
     a1c:	93 e0       	ldi	r25, 0x03	; 3
     a1e:	9f 93       	push	r25
     a20:	8f 93       	push	r24
     a22:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	08 95       	ret

00000a34 <getTemp>:
     a34:	cf 92       	push	r12
     a36:	df 92       	push	r13
     a38:	ef 92       	push	r14
     a3a:	ff 92       	push	r15
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	82 e1       	ldi	r24, 0x12	; 18
     a42:	dc dd       	rcall	.-1096   	; 0x5fc <DS3231_Read>
     a44:	c8 2f       	mov	r28, r24
     a46:	81 e1       	ldi	r24, 0x11	; 17
     a48:	d9 dd       	rcall	.-1102   	; 0x5fc <DS3231_Read>
     a4a:	d8 2f       	mov	r29, r24
     a4c:	c2 95       	swap	r28
     a4e:	c6 95       	lsr	r28
     a50:	c6 95       	lsr	r28
     a52:	c3 70       	andi	r28, 0x03	; 3
     a54:	6c 2f       	mov	r22, r28
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__floatunsisf>
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	40 e8       	ldi	r20, 0x80	; 128
     a66:	5e e3       	ldi	r21, 0x3E	; 62
     a68:	0e 94 89 1a 	call	0x3512	; 0x3512 <__mulsf3>
     a6c:	6b 01       	movw	r12, r22
     a6e:	7c 01       	movw	r14, r24
     a70:	6d 2f       	mov	r22, r29
     a72:	dd 0f       	add	r29, r29
     a74:	77 0b       	sbc	r23, r23
     a76:	88 0b       	sbc	r24, r24
     a78:	99 0b       	sbc	r25, r25
     a7a:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__floatsisf>
     a7e:	a7 01       	movw	r20, r14
     a80:	96 01       	movw	r18, r12
     a82:	0e 94 03 19 	call	0x3206	; 0x3206 <__addsf3>
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	ff 90       	pop	r15
     a8c:	ef 90       	pop	r14
     a8e:	df 90       	pop	r13
     a90:	cf 90       	pop	r12
     a92:	08 95       	ret

00000a94 <printRTCtemp>:
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	00 d0       	rcall	.+0      	; 0xa9e <printRTCtemp+0xa>
     a9e:	00 d0       	rcall	.+0      	; 0xaa0 <printRTCtemp+0xc>
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
     aa4:	69 e3       	ldi	r22, 0x39	; 57
     aa6:	74 e0       	ldi	r23, 0x04	; 4
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	0e 94 7d 15 	call	0x2afa	; 0x2afa <uart_puts>
     ab0:	c1 df       	rcall	.-126    	; 0xa34 <getTemp>
     ab2:	8e 01       	movw	r16, r28
     ab4:	0f 5f       	subi	r16, 0xFF	; 255
     ab6:	1f 4f       	sbci	r17, 0xFF	; 255
     ab8:	21 e0       	ldi	r18, 0x01	; 1
     aba:	44 e0       	ldi	r20, 0x04	; 4
     abc:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <dtostrf>
     ac0:	b8 01       	movw	r22, r16
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	0e 94 7d 15 	call	0x2afa	; 0x2afa <uart_puts>
     aca:	6a e8       	ldi	r22, 0x8A	; 138
     acc:	7f e0       	ldi	r23, 0x0F	; 15
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 7d 15 	call	0x2afa	; 0x2afa <uart_puts>
     ad6:	26 96       	adiw	r28, 0x06	; 6
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	f8 94       	cli
     adc:	de bf       	out	0x3e, r29	; 62
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	cd bf       	out	0x3d, r28	; 61
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	08 95       	ret

00000aec <printAlarm1string>:
     aec:	8f 92       	push	r8
     aee:	9f 92       	push	r9
     af0:	af 92       	push	r10
     af2:	bf 92       	push	r11
     af4:	cf 92       	push	r12
     af6:	df 92       	push	r13
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	cd b7       	in	r28, 0x3d	; 61
     b06:	de b7       	in	r29, 0x3e	; 62
     b08:	2c 97       	sbiw	r28, 0x0c	; 12
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	cd bf       	out	0x3d, r28	; 61
     b14:	87 e0       	ldi	r24, 0x07	; 7
     b16:	72 dd       	rcall	.-1308   	; 0x5fc <DS3231_Read>
     b18:	8f 77       	andi	r24, 0x7F	; 127
     b1a:	51 dd       	rcall	.-1374   	; 0x5be <bcd_to_decimal>
     b1c:	18 2f       	mov	r17, r24
     b1e:	88 e0       	ldi	r24, 0x08	; 8
     b20:	6d dd       	rcall	.-1318   	; 0x5fc <DS3231_Read>
     b22:	8f 77       	andi	r24, 0x7F	; 127
     b24:	4c dd       	rcall	.-1384   	; 0x5be <bcd_to_decimal>
     b26:	e8 2e       	mov	r14, r24
     b28:	89 e0       	ldi	r24, 0x09	; 9
     b2a:	68 dd       	rcall	.-1328   	; 0x5fc <DS3231_Read>
     b2c:	8f 73       	andi	r24, 0x3F	; 63
     b2e:	47 dd       	rcall	.-1394   	; 0x5be <bcd_to_decimal>
     b30:	f8 2e       	mov	r15, r24
     b32:	8a e0       	ldi	r24, 0x0A	; 10
     b34:	63 dd       	rcall	.-1338   	; 0x5fc <DS3231_Read>
     b36:	8f 73       	andi	r24, 0x3F	; 63
     b38:	42 dd       	rcall	.-1404   	; 0x5be <bcd_to_decimal>
     b3a:	a8 2e       	mov	r10, r24
     b3c:	1f 92       	push	r1
     b3e:	1f 93       	push	r17
     b40:	04 e8       	ldi	r16, 0x84	; 132
     b42:	16 e0       	ldi	r17, 0x06	; 6
     b44:	1f 93       	push	r17
     b46:	0f 93       	push	r16
     b48:	1f 92       	push	r1
     b4a:	0f 2e       	mov	r0, r31
     b4c:	f3 e0       	ldi	r31, 0x03	; 3
     b4e:	bf 2e       	mov	r11, r31
     b50:	f0 2d       	mov	r31, r0
     b52:	bf 92       	push	r11
     b54:	ce 01       	movw	r24, r28
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	4c 01       	movw	r8, r24
     b5a:	9f 93       	push	r25
     b5c:	8f 93       	push	r24
     b5e:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <snprintf>
     b62:	1f 92       	push	r1
     b64:	ef 92       	push	r14
     b66:	1f 93       	push	r17
     b68:	0f 93       	push	r16
     b6a:	1f 92       	push	r1
     b6c:	bf 92       	push	r11
     b6e:	6e 01       	movw	r12, r28
     b70:	94 e0       	ldi	r25, 0x04	; 4
     b72:	c9 0e       	add	r12, r25
     b74:	d1 1c       	adc	r13, r1
     b76:	df 92       	push	r13
     b78:	cf 92       	push	r12
     b7a:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <snprintf>
     b7e:	1f 92       	push	r1
     b80:	ff 92       	push	r15
     b82:	1f 93       	push	r17
     b84:	0f 93       	push	r16
     b86:	1f 92       	push	r1
     b88:	bf 92       	push	r11
     b8a:	7e 01       	movw	r14, r28
     b8c:	87 e0       	ldi	r24, 0x07	; 7
     b8e:	e8 0e       	add	r14, r24
     b90:	f1 1c       	adc	r15, r1
     b92:	ff 92       	push	r15
     b94:	ef 92       	push	r14
     b96:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <snprintf>
     b9a:	1f 92       	push	r1
     b9c:	af 92       	push	r10
     b9e:	1f 93       	push	r17
     ba0:	0f 93       	push	r16
     ba2:	1f 92       	push	r1
     ba4:	bf 92       	push	r11
     ba6:	8e 01       	movw	r16, r28
     ba8:	06 5f       	subi	r16, 0xF6	; 246
     baa:	1f 4f       	sbci	r17, 0xFF	; 255
     bac:	1f 93       	push	r17
     bae:	0f 93       	push	r16
     bb0:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <snprintf>
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	1f 93       	push	r17
     bc0:	0f 93       	push	r16
     bc2:	9f 92       	push	r9
     bc4:	8f 92       	push	r8
     bc6:	df 92       	push	r13
     bc8:	cf 92       	push	r12
     bca:	ff 92       	push	r15
     bcc:	ef 92       	push	r14
     bce:	82 e5       	ldi	r24, 0x52	; 82
     bd0:	94 e0       	ldi	r25, 0x04	; 4
     bd2:	9f 93       	push	r25
     bd4:	8f 93       	push	r24
     bd6:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	de bf       	out	0x3e, r29	; 62
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	cd bf       	out	0x3d, r28	; 61
     be4:	2c 96       	adiw	r28, 0x0c	; 12
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	df 90       	pop	r13
     bfe:	cf 90       	pop	r12
     c00:	bf 90       	pop	r11
     c02:	af 90       	pop	r10
     c04:	9f 90       	pop	r9
     c06:	8f 90       	pop	r8
     c08:	08 95       	ret

00000c0a <ds3231Alarm1on>:
}


void ds3231Alarm1on(){
	//set bit 0 to high to allow the alarm flag to assert INT/SQW pin
	DS3231_Write(controlREG,(DS3231_Read(controlREG)) | 0b00000001);
     c0a:	8e e0       	ldi	r24, 0x0E	; 14
     c0c:	f7 dc       	rcall	.-1554   	; 0x5fc <DS3231_Read>
     c0e:	68 2f       	mov	r22, r24
     c10:	61 60       	ori	r22, 0x01	; 1
     c12:	8e e0       	ldi	r24, 0x0E	; 14
     c14:	03 dd       	rcall	.-1530   	; 0x61c <DS3231_Write>
	//print alarm bit state
	printf("Alarm bit = %i\r\n", (DS3231_Read(controlREG) & 0b00000001) );	
     c16:	8e e0       	ldi	r24, 0x0E	; 14
     c18:	f1 dc       	rcall	.-1566   	; 0x5fc <DS3231_Read>
     c1a:	81 70       	andi	r24, 0x01	; 1
     c1c:	1f 92       	push	r1
     c1e:	8f 93       	push	r24
     c20:	8e e2       	ldi	r24, 0x2E	; 46
     c22:	95 e0       	ldi	r25, 0x05	; 5
     c24:	9f 93       	push	r25
     c26:	8f 93       	push	r24
     c28:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
     c2c:	6f e3       	ldi	r22, 0x3F	; 63
	uart_puts(0,"RTC Alarm 1 ON");
     c2e:	75 e0       	ldi	r23, 0x05	; 5
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 7d 15 	call	0x2afa	; 0x2afa <uart_puts>
     c38:	0f 90       	pop	r0
// 	DS3231PrintRegisterValue(0xE);
// 	uart_puts(0,"DS3231_init() - statusREG  value is ");
// 	DS3231PrintRegisterValue(0xF);
	//ds3231PrintAlarm1RegisterValues();
	//ds3231Alarm1DateAndTimeMatch(); // sets alarm 1 mode to go when date and time match
}
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	08 95       	ret

00000c42 <ds3231Alarm1settime>:
     c42:	cf 92       	push	r12
	snprintf (dateString, 3, "%02d", date );
	//prints current time
	printf("RTC Alarm1 set for %s:%s:%s on the %s day of the month\n",hoursString,minutesString,secondsString, dateString);
}

void ds3231Alarm1settime(unsigned char hSet, unsigned char mSet, unsigned char sSet, unsigned char dateSet){
     c44:	df 92       	push	r13
     c46:	ef 92       	push	r14
     c48:	ff 92       	push	r15
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	e8 2e       	mov	r14, r24
     c54:	d6 2e       	mov	r13, r22
     c56:	c4 2e       	mov	r12, r20
     c58:	f2 2e       	mov	r15, r18

	int A1M1 = DS3231_Read(alarm1secREG) & 0x80;		// records the sate of the alarm mask bits
     c5a:	87 e0       	ldi	r24, 0x07	; 7
     c5c:	cf dc       	rcall	.-1634   	; 0x5fc <DS3231_Read>
     c5e:	08 2f       	mov	r16, r24
	int A1M2 = DS3231_Read(alarm1minREG) & 0x80;
     c60:	88 e0       	ldi	r24, 0x08	; 8
     c62:	cc dc       	rcall	.-1640   	; 0x5fc <DS3231_Read>
     c64:	18 2f       	mov	r17, r24
	int A1M3 = DS3231_Read(alarm1hrREG) & 0x80;
     c66:	89 e0       	ldi	r24, 0x09	; 9
     c68:	c9 dc       	rcall	.-1646   	; 0x5fc <DS3231_Read>
     c6a:	d8 2f       	mov	r29, r24
	int A1M4 = DS3231_Read(alarm1dateREG) & 0xC0;		// holds the date/day selection bit also
     c6c:	8a e0       	ldi	r24, 0x0A	; 10
     c6e:	c6 dc       	rcall	.-1652   	; 0x5fc <DS3231_Read>
     c70:	c8 2f       	mov	r28, r24
	
	DS3231_Write(alarm1secREG, ( A1M1  |  (decimal_to_bcd(sSet)))); // adds the previously stored bits from the alarm mask bits back to the new set time value and sends them to the RTC
     c72:	8c 2d       	mov	r24, r12
     c74:	af dc       	rcall	.-1698   	; 0x5d4 <decimal_to_bcd>
     c76:	00 78       	andi	r16, 0x80	; 128
     c78:	60 2f       	mov	r22, r16
     c7a:	68 2b       	or	r22, r24
     c7c:	87 e0       	ldi	r24, 0x07	; 7
     c7e:	ce dc       	rcall	.-1636   	; 0x61c <DS3231_Write>
	DS3231_Write(alarm1minREG, ( A1M2  |  (decimal_to_bcd(mSet))));
     c80:	8d 2d       	mov	r24, r13
     c82:	a8 dc       	rcall	.-1712   	; 0x5d4 <decimal_to_bcd>
     c84:	10 78       	andi	r17, 0x80	; 128
     c86:	61 2f       	mov	r22, r17
     c88:	68 2b       	or	r22, r24
     c8a:	88 e0       	ldi	r24, 0x08	; 8
     c8c:	c7 dc       	rcall	.-1650   	; 0x61c <DS3231_Write>
	DS3231_Write(alarm1hrREG,  (A1M3   |  ( 0x3F  &  (decimal_to_bcd(hSet)))));
     c8e:	8e 2d       	mov	r24, r14
     c90:	a1 dc       	rcall	.-1726   	; 0x5d4 <decimal_to_bcd>
     c92:	8f 73       	andi	r24, 0x3F	; 63
     c94:	d0 78       	andi	r29, 0x80	; 128
     c96:	68 2f       	mov	r22, r24
     c98:	6d 2b       	or	r22, r29
     c9a:	89 e0       	ldi	r24, 0x09	; 9
     c9c:	bf dc       	rcall	.-1666   	; 0x61c <DS3231_Write>
	DS3231_Write(alarm1dateREG,(A1M4   |  ( 0x3F  &  (decimal_to_bcd(dateSet)))));
     c9e:	8f 2d       	mov	r24, r15
     ca0:	99 dc       	rcall	.-1742   	; 0x5d4 <decimal_to_bcd>
     ca2:	8f 73       	andi	r24, 0x3F	; 63
     ca4:	c0 7c       	andi	r28, 0xC0	; 192
     ca6:	68 2f       	mov	r22, r24
     ca8:	6c 2b       	or	r22, r28
     caa:	8a e0       	ldi	r24, 0x0A	; 10
     cac:	b7 dc       	rcall	.-1682   	; 0x61c <DS3231_Write>
     cae:	1e df       	rcall	.-452    	; 0xaec <printAlarm1string>
     cb0:	ac df       	rcall	.-168    	; 0xc0a <ds3231Alarm1on>
	// print alarm time to be sure new time is correct
	printAlarm1string();
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
	ds3231Alarm1on();
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
}
     cba:	ff 90       	pop	r15
     cbc:	ef 90       	pop	r14
     cbe:	df 90       	pop	r13
     cc0:	cf 90       	pop	r12
     cc2:	08 95       	ret

00000cc4 <setAlarm1string>:
     cc4:	ff 92       	push	r15
     cc6:	0f 93       	push	r16
     cc8:	1f 93       	push	r17
     cca:	cf 93       	push	r28
	
}



void setAlarm1string(char command_value_string_passed[]){	
     ccc:	df 93       	push	r29
     cce:	ec 01       	movw	r28, r24
	// takes a "hhmmssDD" string and sets the rtc time
	printf ("command_value_string_passed = %s and is %d long\n", command_value_string_passed,strlen(command_value_string_passed) );
     cd0:	fc 01       	movw	r30, r24
     cd2:	01 90       	ld	r0, Z+
     cd4:	00 20       	and	r0, r0
     cd6:	e9 f7       	brne	.-6      	; 0xcd2 <setAlarm1string+0xe>
     cd8:	31 97       	sbiw	r30, 0x01	; 1
     cda:	e8 1b       	sub	r30, r24
     cdc:	f9 0b       	sbc	r31, r25
     cde:	ff 93       	push	r31
     ce0:	ef 93       	push	r30
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	82 ea       	ldi	r24, 0xA2	; 162
     ce8:	92 e0       	ldi	r25, 0x02	; 2
     cea:	9f 93       	push	r25
     cec:	8f 93       	push	r24
     cee:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
	// check that string length is 9 chars long (hhmmss plus the null terminator)
	if (strlen(command_value_string_passed) == 8){
     cf2:	fe 01       	movw	r30, r28
     cf4:	01 90       	ld	r0, Z+
     cf6:	00 20       	and	r0, r0
     cf8:	e9 f7       	brne	.-6      	; 0xcf4 <setAlarm1string+0x30>
     cfa:	cf 01       	movw	r24, r30
     cfc:	09 97       	sbiw	r24, 0x09	; 9
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	8c 17       	cp	r24, r28
     d0c:	9d 07       	cpc	r25, r29
     d0e:	09 f0       	breq	.+2      	; 0xd12 <setAlarm1string+0x4e>
     d10:	49 c0       	rjmp	.+146    	; 0xda4 <setAlarm1string+0xe0>
		printf("correct string length (hhmmssDD) for setting time and day of month has been received\n");
     d12:	8e e4       	ldi	r24, 0x4E	; 78
     d14:	95 e0       	ldi	r25, 0x05	; 5
     d16:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
		// reads the string passed into function, parses and converts it to unsigned chars
		unsigned char hours = ((command_value_string_passed[0] - '0') *10)  +  (command_value_string_passed[1] - '0');
     d1a:	18 81       	ld	r17, Y
     d1c:	11 0f       	add	r17, r17
     d1e:	10 56       	subi	r17, 0x60	; 96
     d20:	81 2f       	mov	r24, r17
     d22:	88 0f       	add	r24, r24
     d24:	88 0f       	add	r24, r24
     d26:	18 0f       	add	r17, r24
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	80 53       	subi	r24, 0x30	; 48
     d2c:	18 0f       	add	r17, r24
		unsigned char minutes = ((command_value_string_passed[2] - '0') *10)  +  (command_value_string_passed[3] - '0');
     d2e:	0a 81       	ldd	r16, Y+2	; 0x02
     d30:	00 0f       	add	r16, r16
     d32:	00 56       	subi	r16, 0x60	; 96
     d34:	80 2f       	mov	r24, r16
     d36:	88 0f       	add	r24, r24
     d38:	88 0f       	add	r24, r24
     d3a:	08 0f       	add	r16, r24
     d3c:	8b 81       	ldd	r24, Y+3	; 0x03
     d3e:	80 53       	subi	r24, 0x30	; 48
     d40:	08 0f       	add	r16, r24
		unsigned char seconds = ((command_value_string_passed[4] - '0') *10)  +  (command_value_string_passed[5] - '0');
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	88 0f       	add	r24, r24
     d46:	80 56       	subi	r24, 0x60	; 96
     d48:	f8 2e       	mov	r15, r24
     d4a:	ff 0c       	add	r15, r15
     d4c:	ff 0c       	add	r15, r15
     d4e:	f8 0e       	add	r15, r24
     d50:	8d 81       	ldd	r24, Y+5	; 0x05
     d52:	80 53       	subi	r24, 0x30	; 48
     d54:	f8 0e       	add	r15, r24
		unsigned char date = ((command_value_string_passed[6] - '0') *10)  +  (command_value_string_passed[7] - '0');
     d56:	8e 81       	ldd	r24, Y+6	; 0x06
     d58:	88 0f       	add	r24, r24
     d5a:	80 56       	subi	r24, 0x60	; 96
     d5c:	98 2f       	mov	r25, r24
     d5e:	99 0f       	add	r25, r25
     d60:	99 0f       	add	r25, r25
     d62:	98 0f       	add	r25, r24
     d64:	8f 81       	ldd	r24, Y+7	; 0x07
     d66:	80 53       	subi	r24, 0x30	; 48
     d68:	c9 2f       	mov	r28, r25
     d6a:	c8 0f       	add	r28, r24
		printf("time and day sent to RTC = %d:%d:%d on the %d day of the month\n", hours,minutes,seconds,date);
     d6c:	1f 92       	push	r1
     d6e:	cf 93       	push	r28
     d70:	1f 92       	push	r1
     d72:	ff 92       	push	r15
     d74:	1f 92       	push	r1
     d76:	0f 93       	push	r16
     d78:	1f 92       	push	r1
     d7a:	1f 93       	push	r17
     d7c:	83 ea       	ldi	r24, 0xA3	; 163
     d7e:	95 e0       	ldi	r25, 0x05	; 5
     d80:	9f 93       	push	r25
     d82:	8f 93       	push	r24
     d84:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
		//sends passed command to RTC to set time
		ds3231Alarm1settime(hours,minutes,seconds,date);
     d88:	2c 2f       	mov	r18, r28
     d8a:	4f 2d       	mov	r20, r15
     d8c:	60 2f       	mov	r22, r16
     d8e:	81 2f       	mov	r24, r17
     d90:	58 df       	rcall	.-336    	; 0xc42 <ds3231Alarm1settime>
     d92:	8d b7       	in	r24, 0x3d	; 61
     d94:	9e b7       	in	r25, 0x3e	; 62
     d96:	0a 96       	adiw	r24, 0x0a	; 10
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	9e bf       	out	0x3e, r25	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	8d bf       	out	0x3d, r24	; 61
     da2:	08 c0       	rjmp	.+16     	; 0xdb4 <setAlarm1string+0xf0>
	}
	else{
		printf("ERROR: incorrect string length for setting alarm time and date has been received *** alarm NOT set ***");
     da4:	83 ee       	ldi	r24, 0xE3	; 227
     da6:	95 e0       	ldi	r25, 0x05	; 5
     da8:	9f 93       	push	r25
     daa:	8f 93       	push	r24
     dac:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
	}
}
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	ff 90       	pop	r15
     dbe:	08 95       	ret

00000dc0 <ds3231Alarm1off>:
}


void ds3231Alarm1off(){
	//set bit 0 to high to allow the alarm flag to assert INT/SQW pin
	DS3231_Write(controlREG,(DS3231_Read(controlREG)) & ~(0b00000001));
     dc0:	8e e0       	ldi	r24, 0x0E	; 14
     dc2:	1c dc       	rcall	.-1992   	; 0x5fc <DS3231_Read>
     dc4:	68 2f       	mov	r22, r24
     dc6:	6e 7f       	andi	r22, 0xFE	; 254
     dc8:	8e e0       	ldi	r24, 0x0E	; 14
     dca:	28 dc       	rcall	.-1968   	; 0x61c <DS3231_Write>
	//print alarm bit state
	printf("Alarm bit = %i\r\n", (DS3231_Read(controlREG) & 0b00000001) );	
     dcc:	8e e0       	ldi	r24, 0x0E	; 14
     dce:	16 dc       	rcall	.-2004   	; 0x5fc <DS3231_Read>
     dd0:	81 70       	andi	r24, 0x01	; 1
     dd2:	1f 92       	push	r1
     dd4:	8f 93       	push	r24
     dd6:	8e e2       	ldi	r24, 0x2E	; 46
     dd8:	95 e0       	ldi	r25, 0x05	; 5
     dda:	9f 93       	push	r25
     ddc:	8f 93       	push	r24
     dde:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
     de2:	6a e4       	ldi	r22, 0x4A	; 74
	// print register data for debugging
	uart_puts(0,"DS3231_init() - controlREG value is ");
     de4:	76 e0       	ldi	r23, 0x06	; 6
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 7d 15 	call	0x2afa	; 0x2afa <uart_puts>
     dee:	0f 90       	pop	r0
	//DS3231PrintRegisterValue(0xE);
	//uart_puts(0,"DS3231_init() - statusREG  value is ");
	//DS3231PrintRegisterValue(0xF);
}
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	08 95       	ret

00000df8 <TimeDateString>:
     df8:	9f 92       	push	r9




char * TimeDateString(){
     dfa:	af 92       	push	r10
     dfc:	bf 92       	push	r11
     dfe:	cf 92       	push	r12
     e00:	df 92       	push	r13
     e02:	ef 92       	push	r14
     e04:	ff 92       	push	r15
     e06:	0f 93       	push	r16
     e08:	1f 93       	push	r17
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	62 97       	sbiw	r28, 0x12	; 18
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	de bf       	out	0x3e, r29	; 62
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	cd bf       	out	0x3d, r28	; 61
	char *dateTime = "000000,000000"; // format = ddmmyy,hhmmss
	//dateTime = malloc (sizeof (char) * 14);
	//char dayString [2];
	
	
	year = DS3231_Read(yearREG);				// reading data registers
     e1e:	86 e0       	ldi	r24, 0x06	; 6
     e20:	ed db       	rcall	.-2086   	; 0x5fc <DS3231_Read>
	year = bcd_to_decimal(year);				// converting register data to int
     e22:	cd db       	rcall	.-2150   	; 0x5be <bcd_to_decimal>
     e24:	c8 2e       	mov	r12, r24
	month = (0x1F & DS3231_Read(monthREG));
     e26:	85 e0       	ldi	r24, 0x05	; 5
     e28:	e9 db       	rcall	.-2094   	; 0x5fc <DS3231_Read>
	month = bcd_to_decimal(month);
     e2a:	8f 71       	andi	r24, 0x1F	; 31
     e2c:	c8 db       	rcall	.-2160   	; 0x5be <bcd_to_decimal>
     e2e:	d8 2e       	mov	r13, r24
	date = (0x3F & DS3231_Read(dateREG));
     e30:	84 e0       	ldi	r24, 0x04	; 4
     e32:	e4 db       	rcall	.-2104   	; 0x5fc <DS3231_Read>
	date = bcd_to_decimal(date);
     e34:	8f 73       	andi	r24, 0x3F	; 63
     e36:	c3 db       	rcall	.-2170   	; 0x5be <bcd_to_decimal>
	day = (0x07 & DS3231_Read(dayREG));
     e38:	e8 2e       	mov	r14, r24
     e3a:	83 e0       	ldi	r24, 0x03	; 3
	day = bcd_to_decimal(day);
	seconds = DS3231_Read(secondREG);
     e3c:	df db       	rcall	.-2114   	; 0x5fc <DS3231_Read>
     e3e:	80 e0       	ldi	r24, 0x00	; 0
	seconds = bcd_to_decimal(seconds);
     e40:	dd db       	rcall	.-2118   	; 0x5fc <DS3231_Read>
     e42:	bd db       	rcall	.-2182   	; 0x5be <bcd_to_decimal>
	minutes = DS3231_Read(minuteREG);
     e44:	98 2e       	mov	r9, r24
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	d9 db       	rcall	.-2126   	; 0x5fc <DS3231_Read>
	minutes = bcd_to_decimal(minutes);
     e4a:	b9 db       	rcall	.-2190   	; 0x5be <bcd_to_decimal>
     e4c:	a8 2e       	mov	r10, r24
     e4e:	82 e0       	ldi	r24, 0x02	; 2
	hours	= (0x3F & DS3231_Read(hourREG));
     e50:	d5 db       	rcall	.-2134   	; 0x5fc <DS3231_Read>
     e52:	8f 73       	andi	r24, 0x3F	; 63
     e54:	b4 db       	rcall	.-2200   	; 0x5be <bcd_to_decimal>
	hours	= bcd_to_decimal(hours);
     e56:	b8 2e       	mov	r11, r24
     e58:	1f 92       	push	r1
     e5a:	9f 92       	push	r9
     e5c:	04 e8       	ldi	r16, 0x84	; 132
		
	// converting int to strings
	snprintf (secondsString, 3, "%02d", seconds );
     e5e:	16 e0       	ldi	r17, 0x06	; 6
     e60:	1f 93       	push	r17
     e62:	0f 93       	push	r16
     e64:	1f 92       	push	r1
     e66:	0f 2e       	mov	r0, r31
     e68:	f3 e0       	ldi	r31, 0x03	; 3
     e6a:	ff 2e       	mov	r15, r31
     e6c:	f0 2d       	mov	r31, r0
     e6e:	ff 92       	push	r15
     e70:	ce 01       	movw	r24, r28
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	9f 93       	push	r25
     e76:	8f 93       	push	r24
     e78:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <snprintf>
     e7c:	1f 92       	push	r1
     e7e:	af 92       	push	r10
     e80:	1f 93       	push	r17
	snprintf (minutesString, 3, "%02d", minutes );
     e82:	0f 93       	push	r16
     e84:	1f 92       	push	r1
     e86:	ff 92       	push	r15
     e88:	ce 01       	movw	r24, r28
     e8a:	04 96       	adiw	r24, 0x04	; 4
     e8c:	9f 93       	push	r25
     e8e:	8f 93       	push	r24
     e90:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <snprintf>
     e94:	1f 92       	push	r1
     e96:	bf 92       	push	r11
     e98:	1f 93       	push	r17
	snprintf (hoursString, 3, "%02d", hours );
     e9a:	0f 93       	push	r16
     e9c:	1f 92       	push	r1
     e9e:	ff 92       	push	r15
     ea0:	ce 01       	movw	r24, r28
     ea2:	07 96       	adiw	r24, 0x07	; 7
     ea4:	9f 93       	push	r25
     ea6:	8f 93       	push	r24
     ea8:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <snprintf>
     eac:	1f 92       	push	r1
     eae:	cf 92       	push	r12
     eb0:	1f 93       	push	r17
	snprintf (yearString, 5, "%02d", year ); // converting int to strings with leading zeros and fixed width
     eb2:	0f 93       	push	r16
     eb4:	1f 92       	push	r1
     eb6:	85 e0       	ldi	r24, 0x05	; 5
     eb8:	8f 93       	push	r24
     eba:	ce 01       	movw	r24, r28
     ebc:	0a 96       	adiw	r24, 0x0a	; 10
     ebe:	9f 93       	push	r25
     ec0:	8f 93       	push	r24
     ec2:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <snprintf>
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
	snprintf (monthString, 3, "%02d", month );
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	1f 92       	push	r1
     ed2:	df 92       	push	r13
     ed4:	1f 93       	push	r17
     ed6:	0f 93       	push	r16
     ed8:	1f 92       	push	r1
     eda:	ff 92       	push	r15
     edc:	ce 01       	movw	r24, r28
     ede:	0d 96       	adiw	r24, 0x0d	; 13
     ee0:	9f 93       	push	r25
     ee2:	8f 93       	push	r24
     ee4:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <snprintf>
     ee8:	1f 92       	push	r1
     eea:	ef 92       	push	r14
     eec:	1f 93       	push	r17
	snprintf (dateString, 3, "%02d", date );
     eee:	0f 93       	push	r16
     ef0:	1f 92       	push	r1
     ef2:	ff 92       	push	r15
     ef4:	ce 01       	movw	r24, r28
     ef6:	40 96       	adiw	r24, 0x10	; 16
     ef8:	9f 93       	push	r25
     efa:	8f 93       	push	r24
     efc:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <snprintf>
     f00:	1f 92       	push	r1
     f02:	9f 92       	push	r9
     f04:	1f 92       	push	r1
	
	
	snprintf (dateTime, 16, "%02d%02d%02d_%02d%02d%02d", date,month,year,hours,minutes,seconds );
     f06:	af 92       	push	r10
     f08:	1f 92       	push	r1
     f0a:	bf 92       	push	r11
     f0c:	1f 92       	push	r1
     f0e:	cf 92       	push	r12
     f10:	1f 92       	push	r1
     f12:	df 92       	push	r13
     f14:	1f 92       	push	r1
     f16:	ef 92       	push	r14
     f18:	8f e6       	ldi	r24, 0x6F	; 111
     f1a:	96 e0       	ldi	r25, 0x06	; 6
     f1c:	9f 93       	push	r25
     f1e:	8f 93       	push	r24
     f20:	1f 92       	push	r1
     f22:	80 e1       	ldi	r24, 0x10	; 16
     f24:	8f 93       	push	r24
     f26:	89 e8       	ldi	r24, 0x89	; 137
     f28:	96 e0       	ldi	r25, 0x06	; 6
     f2a:	9f 93       	push	r25
     f2c:	8f 93       	push	r24
     f2e:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <snprintf>
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	de bf       	out	0x3e, r29	; 62
	//printf("%s\r\n",dateTime);

	return dateTime;
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	cd bf       	out	0x3d, r28	; 61
     f3c:	89 e8       	ldi	r24, 0x89	; 137
     f3e:	96 e0       	ldi	r25, 0x06	; 6
     f40:	62 96       	adiw	r28, 0x12	; 18
}
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	cd bf       	out	0x3d, r28	; 61
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	1f 91       	pop	r17
     f52:	0f 91       	pop	r16
     f54:	ff 90       	pop	r15
     f56:	ef 90       	pop	r14
     f58:	df 90       	pop	r13
     f5a:	cf 90       	pop	r12
     f5c:	bf 90       	pop	r11
     f5e:	af 90       	pop	r10
     f60:	9f 90       	pop	r9
     f62:	08 95       	ret

00000f64 <fram_write_sequential_address_to_fram>:
     f64:	a1 d0       	rcall	.+322    	; 0x10a8 <i2cStart>
     f66:	80 ea       	ldi	r24, 0xA0	; 160
     f68:	b6 d0       	rcall	.+364    	; 0x10d6 <i2cSend>
void fram_write_sequential_address_to_fram(){
	//printf("sequential address: %s", "sequential_address");
	//sequential_address = 256;  // this is put in for testing to force what is written to the fram
	i2cStart();
	i2cSend(0b10100000 | (A0 << 1) | (A1 << 2) | (A2 << 3) );   // device address, 4x MSB are fixed for this device 1010,pins at A1...A2 determine LSBs 1...3, the LSB (0) determines R/W, 1=Read, 0=write
	i2cSend(0x00 >> 8);
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	b4 d0       	rcall	.+360    	; 0x10d6 <i2cSend>
	i2cSend(0x00 & 0xFF);
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	b2 d0       	rcall	.+356    	; 0x10d6 <i2cSend>
     f72:	80 91 b7 15 	lds	r24, 0x15B7	; 0x8015b7 <sequential_address>
	i2cSend(sequential_address >> 8);
     f76:	90 91 b8 15 	lds	r25, 0x15B8	; 0x8015b8 <sequential_address+0x1>
     f7a:	89 2f       	mov	r24, r25
     f7c:	ac d0       	rcall	.+344    	; 0x10d6 <i2cSend>
     f7e:	80 91 b7 15 	lds	r24, 0x15B7	; 0x8015b7 <sequential_address>
	i2cSend(sequential_address & 0xFF);
     f82:	90 91 b8 15 	lds	r25, 0x15B8	; 0x8015b8 <sequential_address+0x1>
     f86:	a7 d0       	rcall	.+334    	; 0x10d6 <i2cSend>
     f88:	94 c0       	rjmp	.+296    	; 0x10b2 <i2cStop>
	i2cStop();
     f8a:	08 95       	ret

00000f8c <fram_resetWriteAddress>:
     f8c:	68 e3       	ldi	r22, 0x38	; 56
     f8e:	77 e0       	ldi	r23, 0x07	; 7
void fram_resetWriteAddress(){
	#ifdef LOGGING_ENABLE
		LogDebug("fram_resetWriteAddress() started\r\n");
	#endif
	#ifndef LOGGING_ENABLE
		uart_puts(0,"fram_resetWriteAddress() started\r\n");
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 7d 15 	call	0x2afa	; 0x2afa <uart_puts>
	#endif
		sequential_address = 0x02;
     f98:	82 e0       	ldi	r24, 0x02	; 2
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	90 93 b8 15 	sts	0x15B8, r25	; 0x8015b8 <sequential_address+0x1>
     fa0:	80 93 b7 15 	sts	0x15B7, r24	; 0x8015b7 <sequential_address>
		fram_write_sequential_address_to_fram();
     fa4:	df cf       	rjmp	.-66     	; 0xf64 <fram_write_sequential_address_to_fram>
     fa6:	08 95       	ret

00000fa8 <fs2012_sample>:
		reads_bad_consecutive = 0;
	}
}


uint16_t fs2012_sample(void){
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
	
	uint16_t data;
	uint8_t tmp;
	initI2C();
     fac:	28 d0       	rcall	.+80     	; 0xffe <initI2C>
	
	// use a timeout in case chip is non-responsive or 5V supply fails
	i2cSetTimeout(I2C_MODE_TIMEOUT, I2C_TIMEOUT_1MS);
     fae:	4f e8       	ldi	r20, 0x8F	; 143
     fb0:	52 e0       	ldi	r21, 0x02	; 2
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
	
	// write start condition
	i2cStart(); 
     fb8:	2f d0       	rcall	.+94     	; 0x1018 <i2cSetTimeout>
	
	// send FS2012's I2C address, with read bit set
	i2cSend( (FS2012_ADDRESS<<1) | I2C_READ );
     fba:	76 d0       	rcall	.+236    	; 0x10a8 <i2cStart>
     fbc:	8f e0       	ldi	r24, 0x0F	; 15
	
	// read back one byte, acknowledge
	tmp = i2cReadAck();
     fbe:	8b d0       	rcall	.+278    	; 0x10d6 <i2cSend>
     fc0:	7c d0       	rcall	.+248    	; 0x10ba <i2cReadAck>
	if (i2cGotTimeout())
     fc2:	d8 2f       	mov	r29, r24
     fc4:	3c d0       	rcall	.+120    	; 0x103e <i2cGotTimeout>
     fc6:	81 11       	cpse	r24, r1
		return FLOW_BAD_SAMPLE;
	data = tmp;
	data = data<<8;
	
	// read back another byte, no acknowledge required
	tmp = i2cReadNoAck();
     fc8:	12 c0       	rjmp	.+36     	; 0xfee <fs2012_sample+0x46>
     fca:	7e d0       	rcall	.+252    	; 0x10c8 <i2cReadNoAck>
     fcc:	c8 2f       	mov	r28, r24
	if (i2cGotTimeout())
     fce:	37 d0       	rcall	.+110    	; 0x103e <i2cGotTimeout>
     fd0:	81 11       	cpse	r24, r1
     fd2:	10 c0       	rjmp	.+32     	; 0xff4 <fs2012_sample+0x4c>
	// read back one byte, acknowledge
	tmp = i2cReadAck();
	if (i2cGotTimeout())
		return FLOW_BAD_SAMPLE;
	data = tmp;
	data = data<<8;
     fd4:	8c 2f       	mov	r24, r28
     fd6:	90 e0       	ldi	r25, 0x00	; 0
	
	// read back another byte, no acknowledge required
	tmp = i2cReadNoAck();
	if (i2cGotTimeout())
		return FLOW_BAD_SAMPLE;
	data |= tmp;
     fd8:	9c 01       	movw	r18, r24
     fda:	3d 2b       	or	r19, r29
     fdc:	e9 01       	movw	r28, r18
	
	// stop condition
	i2cStop();
     fde:	69 d0       	rcall	.+210    	; 0x10b2 <i2cStop>
     fe0:	ce 01       	movw	r24, r28
     fe2:	c9 38       	cpi	r28, 0x89	; 137
     fe4:	d3 41       	sbci	r29, 0x13	; 19
     fe6:	40 f0       	brcs	.+16     	; 0xff8 <fs2012_sample+0x50>
     fe8:	88 e8       	ldi	r24, 0x88	; 136
     fea:	93 e1       	ldi	r25, 0x13	; 19
     fec:	05 c0       	rjmp	.+10     	; 0xff8 <fs2012_sample+0x50>
     fee:	8f ef       	ldi	r24, 0xFF	; 255
	i2cSend( (FS2012_ADDRESS<<1) | I2C_READ );
	
	// read back one byte, acknowledge
	tmp = i2cReadAck();
	if (i2cGotTimeout())
		return FLOW_BAD_SAMPLE;
     ff0:	9f ef       	ldi	r25, 0xFF	; 255
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <fs2012_sample+0x50>
     ff4:	8f ef       	ldi	r24, 0xFF	; 255
	data = data<<8;
	
	// read back another byte, no acknowledge required
	tmp = i2cReadNoAck();
	if (i2cGotTimeout())
		return FLOW_BAD_SAMPLE;
     ff6:	9f ef       	ldi	r25, 0xFF	; 255
     ff8:	df 91       	pop	r29
	// limit to maximum flow condition
	if(data>FLOW_OVER_RANGE)
		return FLOW_OVER_RANGE;
		
	return data;
}
     ffa:	cf 91       	pop	r28
     ffc:	08 95       	ret

00000ffe <initI2C>:
void initI2C(void) {
	
	#ifdef LOGGING_ENABLE
		LogDebug("initI2C() started\r\n");
	#endif
	TWBR = 32;   /* set bit rate (p.242): 8MHz / (16+2*TWBR*1) ~= 100kHz */
     ffe:	80 e2       	ldi	r24, 0x20	; 32
    1000:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
	TWCR |= (1 << TWEN);                                      
    1004:	ec eb       	ldi	r30, 0xBC	; 188
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	84 60       	ori	r24, 0x04	; 4
    100c:	80 83       	st	Z, r24
	timeout_mode = 0;
    100e:	10 92 bb 15 	sts	0x15BB, r1	; 0x8015bb <timeout_mode>
	lastTimeout = false;
    1012:	10 92 c0 15 	sts	0x15C0, r1	; 0x8015c0 <lastTimeout>
    1016:	08 95       	ret

00001018 <i2cSetTimeout>:
		LogDebug("initI2C() complete\r\n");
	#endif
}

void i2cSetTimeout(uint8_t mode, uint32_t cycles){
	if (mode==I2C_MODE_BLOCKING){
    1018:	81 11       	cpse	r24, r1
    101a:	03 c0       	rjmp	.+6      	; 0x1022 <i2cSetTimeout+0xa>
		timeout_mode = 0;
    101c:	10 92 bb 15 	sts	0x15BB, r1	; 0x8015bb <timeout_mode>
    1020:	0b c0       	rjmp	.+22     	; 0x1038 <i2cSetTimeout+0x20>
	}
	else{
		timeout_mode = 1;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	80 93 bb 15 	sts	0x15BB, r24	; 0x8015bb <timeout_mode>
		timeout_cycles = cycles;
    1028:	40 93 bc 15 	sts	0x15BC, r20	; 0x8015bc <timeout_cycles>
    102c:	50 93 bd 15 	sts	0x15BD, r21	; 0x8015bd <timeout_cycles+0x1>
    1030:	60 93 be 15 	sts	0x15BE, r22	; 0x8015be <timeout_cycles+0x2>
    1034:	70 93 bf 15 	sts	0x15BF, r23	; 0x8015bf <timeout_cycles+0x3>
	}
	lastTimeout = false;
    1038:	10 92 c0 15 	sts	0x15C0, r1	; 0x8015c0 <lastTimeout>
    103c:	08 95       	ret

0000103e <i2cGotTimeout>:
	}
	lastTimeout = true;
}

bool i2cGotTimeout(void){
	return lastTimeout;
    103e:	80 91 c0 15 	lds	r24, 0x15C0	; 0x8015c0 <lastTimeout>
}
    1042:	08 95       	ret

00001044 <i2cWaitForComplete>:

void i2cWaitForComplete(void) {
	if (timeout_mode){
    1044:	80 91 bb 15 	lds	r24, 0x15BB	; 0x8015bb <timeout_mode>
    1048:	88 23       	and	r24, r24
    104a:	41 f1       	breq	.+80     	; 0x109c <i2cWaitForComplete+0x58>
}

inline void i2cCompleteOrTimeout();
inline void i2cCompleteOrTimeout() {
	uint32_t i;
	lastTimeout = false;
    104c:	10 92 c0 15 	sts	0x15C0, r1	; 0x8015c0 <lastTimeout>
	for(i=0;i<timeout_cycles;i++){
    1050:	40 91 bc 15 	lds	r20, 0x15BC	; 0x8015bc <timeout_cycles>
    1054:	50 91 bd 15 	lds	r21, 0x15BD	; 0x8015bd <timeout_cycles+0x1>
    1058:	60 91 be 15 	lds	r22, 0x15BE	; 0x8015be <timeout_cycles+0x2>
    105c:	70 91 bf 15 	lds	r23, 0x15BF	; 0x8015bf <timeout_cycles+0x3>
    1060:	41 15       	cp	r20, r1
    1062:	51 05       	cpc	r21, r1
    1064:	61 05       	cpc	r22, r1
    1066:	71 05       	cpc	r23, r1
    1068:	a9 f0       	breq	.+42     	; 0x1094 <i2cWaitForComplete+0x50>
		if (TWCR & (1<<TWINT))
    106a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    106e:	88 23       	and	r24, r24
    1070:	d4 f0       	brlt	.+52     	; 0x10a6 <i2cWaitForComplete+0x62>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	dc 01       	movw	r26, r24
    1078:	ec eb       	ldi	r30, 0xBC	; 188
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	03 c0       	rjmp	.+6      	; 0x1084 <i2cWaitForComplete+0x40>
    107e:	20 81       	ld	r18, Z
    1080:	22 23       	and	r18, r18
    1082:	8c f0       	brlt	.+34     	; 0x10a6 <i2cWaitForComplete+0x62>

inline void i2cCompleteOrTimeout();
inline void i2cCompleteOrTimeout() {
	uint32_t i;
	lastTimeout = false;
	for(i=0;i<timeout_cycles;i++){
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	a1 1d       	adc	r26, r1
    1088:	b1 1d       	adc	r27, r1
    108a:	84 17       	cp	r24, r20
    108c:	95 07       	cpc	r25, r21
    108e:	a6 07       	cpc	r26, r22
    1090:	b7 07       	cpc	r27, r23
    1092:	a9 f7       	brne	.-22     	; 0x107e <i2cWaitForComplete+0x3a>
		if (TWCR & (1<<TWINT))
			return;
	}
	lastTimeout = true;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	80 93 c0 15 	sts	0x15C0, r24	; 0x8015c0 <lastTimeout>
    109a:	08 95       	ret
void i2cWaitForComplete(void) {
	if (timeout_mode){
		i2cCompleteOrTimeout();
	}
	else{
		loop_until_bit_is_set(TWCR, TWINT);
    109c:	ec eb       	ldi	r30, 0xBC	; 188
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	88 23       	and	r24, r24
    10a4:	ec f7       	brge	.-6      	; 0x10a0 <i2cWaitForComplete+0x5c>
    10a6:	08 95       	ret

000010a8 <i2cStart>:
	}
}

void i2cStart(void) {
  TWCR = (_BV(TWINT) | _BV(TWEN) | _BV(TWSTA));
    10a8:	84 ea       	ldi	r24, 0xA4	; 164
    10aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  i2cWaitForComplete();
    10ae:	ca cf       	rjmp	.-108    	; 0x1044 <i2cWaitForComplete>
    10b0:	08 95       	ret

000010b2 <i2cStop>:
}

void i2cStop(void) {
  TWCR = (_BV(TWINT) | _BV(TWEN) | _BV(TWSTO));
    10b2:	84 e9       	ldi	r24, 0x94	; 148
    10b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    10b8:	08 95       	ret

000010ba <i2cReadAck>:
}

uint8_t i2cReadAck(void) {
  TWCR = (_BV(TWINT) | _BV(TWEN) | _BV(TWEA));
    10ba:	84 ec       	ldi	r24, 0xC4	; 196
    10bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  i2cWaitForComplete();
    10c0:	c1 df       	rcall	.-126    	; 0x1044 <i2cWaitForComplete>
  return (TWDR);
    10c2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
}
    10c6:	08 95       	ret

000010c8 <i2cReadNoAck>:

uint8_t i2cReadNoAck(void) {
  TWCR = (_BV(TWINT) | _BV(TWEN));
    10c8:	84 e8       	ldi	r24, 0x84	; 132
    10ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  i2cWaitForComplete();
    10ce:	ba df       	rcall	.-140    	; 0x1044 <i2cWaitForComplete>
  return (TWDR);
    10d0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
}
    10d4:	08 95       	ret

000010d6 <i2cSend>:

void i2cSend(uint8_t data) {
  TWDR = data;
    10d6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
  TWCR = (_BV(TWINT) | _BV(TWEN));                  /* init and enable */
    10da:	84 e8       	ldi	r24, 0x84	; 132
    10dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
  i2cWaitForComplete();
    10e0:	b1 cf       	rjmp	.-158    	; 0x1044 <i2cWaitForComplete>
    10e2:	08 95       	ret

000010e4 <LogInfo>:
	* FUNCTION NAME: LogInfo
	* ARGUMENTS: 
	* RETURNS: 
	* DESCRIPTION: 
*********************************************************/
void LogInfo(char *event_data_string){
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	c8 57       	subi	r28, 0x78	; 120
    10f6:	d1 09       	sbc	r29, r1
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	de bf       	out	0x3e, r29	; 62
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	cd bf       	out	0x3d, r28	; 61
	// print the error log event if the log event priority is equal or lower than the log set point
	if (logging_level_global > 1){
    1102:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <logging_level_global>
    1106:	22 30       	cpi	r18, 0x02	; 2
    1108:	48 f1       	brcs	.+82     	; 0x115c <LogInfo+0x78>
    110a:	09 2f       	mov	r16, r25
    110c:	18 2f       	mov	r17, r24
		char str[120];
		char *datetimestr;
		datetimestr = malloc (sizeof (char) * 14);
		datetimestr = TimeDateString();
    110e:	74 de       	rcall	.-792    	; 0xdf8 <TimeDateString>
    1110:	e8 2e       	mov	r14, r24
    1112:	f9 2e       	mov	r15, r25
		sprintf(str, "%s %s %s","[INFO] ", datetimestr, event_data_string);
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
    1118:	9f 93       	push	r25
    111a:	8f 93       	push	r24
    111c:	85 ef       	ldi	r24, 0xF5	; 245
    111e:	97 e0       	ldi	r25, 0x07	; 7
    1120:	9f 93       	push	r25
    1122:	8f 93       	push	r24
    1124:	8c ee       	ldi	r24, 0xEC	; 236
    1126:	97 e0       	ldi	r25, 0x07	; 7
    1128:	9f 93       	push	r25
    112a:	8f 93       	push	r24
    112c:	8e 01       	movw	r16, r28
    112e:	0f 5f       	subi	r16, 0xFF	; 255
    1130:	1f 4f       	sbci	r17, 0xFF	; 255
    1132:	1f 93       	push	r17
    1134:	0f 93       	push	r16
    1136:	0e 94 2c 22 	call	0x4458	; 0x4458 <sprintf>
		printf("%s",str);
    113a:	1f 93       	push	r17
    113c:	0f 93       	push	r16
    113e:	82 e1       	ldi	r24, 0x12	; 18
    1140:	9c e0       	ldi	r25, 0x0C	; 12
    1142:	9f 93       	push	r25
    1144:	8f 93       	push	r24
    1146:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
		#ifdef FRAM_ENABLE // if the FRAM_ENABLE is defines in config.h or elsewhere then data will be writted to the FRAM also
			sprintf(str, "%s %s %s","[INFO]* ", datetimestr, event_data_string);
			fram_writeString(str);
		#endif	
		free(datetimestr);
    114a:	8e 2d       	mov	r24, r14
    114c:	9f 2d       	mov	r25, r15
    114e:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <free>
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	f8 94       	cli
    1156:	de bf       	out	0x3e, r29	; 62
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	cd bf       	out	0x3d, r28	; 61
	}
}
    115c:	c8 58       	subi	r28, 0x88	; 136
    115e:	df 4f       	sbci	r29, 0xFF	; 255
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	08 95       	ret

00001178 <LogDebug>:
	* FUNCTION NAME: LogDebug
	* ARGUMENTS: 
	* RETURNS: 
	* DESCRIPTION: 
*********************************************************/
void LogDebug(char *event_data_string){
    1178:	ef 92       	push	r14
    117a:	ff 92       	push	r15
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	c8 57       	subi	r28, 0x78	; 120
    118a:	d1 09       	sbc	r29, r1
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	de bf       	out	0x3e, r29	; 62
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	cd bf       	out	0x3d, r28	; 61
	// print the error log event if the log event priority is equal or lower than the log set point
	if (logging_level_global > 2){
    1196:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <logging_level_global>
    119a:	23 30       	cpi	r18, 0x03	; 3
    119c:	48 f1       	brcs	.+82     	; 0x11f0 <LogDebug+0x78>
    119e:	09 2f       	mov	r16, r25
    11a0:	18 2f       	mov	r17, r24
		char str[120];
		char *datetimestr;
		datetimestr = malloc (sizeof (char) * 14);
		datetimestr = TimeDateString();
    11a2:	2a de       	rcall	.-940    	; 0xdf8 <TimeDateString>
    11a4:	e8 2e       	mov	r14, r24
    11a6:	f9 2e       	mov	r15, r25
		sprintf(str, "%s %s %s","[DEBUG] ", datetimestr, event_data_string);
    11a8:	0f 93       	push	r16
    11aa:	1f 93       	push	r17
    11ac:	9f 93       	push	r25
    11ae:	8f 93       	push	r24
    11b0:	8d ef       	ldi	r24, 0xFD	; 253
    11b2:	97 e0       	ldi	r25, 0x07	; 7
    11b4:	9f 93       	push	r25
    11b6:	8f 93       	push	r24
    11b8:	8c ee       	ldi	r24, 0xEC	; 236
    11ba:	97 e0       	ldi	r25, 0x07	; 7
    11bc:	9f 93       	push	r25
    11be:	8f 93       	push	r24
    11c0:	8e 01       	movw	r16, r28
    11c2:	0f 5f       	subi	r16, 0xFF	; 255
    11c4:	1f 4f       	sbci	r17, 0xFF	; 255
    11c6:	1f 93       	push	r17
    11c8:	0f 93       	push	r16
    11ca:	0e 94 2c 22 	call	0x4458	; 0x4458 <sprintf>
		printf("%s",str);
    11ce:	1f 93       	push	r17
    11d0:	0f 93       	push	r16
    11d2:	82 e1       	ldi	r24, 0x12	; 18
    11d4:	9c e0       	ldi	r25, 0x0C	; 12
    11d6:	9f 93       	push	r25
    11d8:	8f 93       	push	r24
    11da:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
		#ifdef FRAM_ENABLE // if the FRAM_ENABLE is defines in config.h or elsewhere then data will be writted to the FRAM also
			sprintf(str, "%s %s %s","[DEBUG]* ", datetimestr, event_data_string);
			fram_writeString(str);
		#endif
		free(datetimestr);
    11de:	8e 2d       	mov	r24, r14
    11e0:	9f 2d       	mov	r25, r15
    11e2:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <free>
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
	}
}
    11f0:	c8 58       	subi	r28, 0x88	; 136
    11f2:	df 4f       	sbci	r29, 0xFF	; 255
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	ff 90       	pop	r15
    1208:	ef 90       	pop	r14
    120a:	08 95       	ret

0000120c <collectSample>:
		
		/* you can have any number of case statements */
		default : /* Optional */
		lcdStatusLineUpdate("invalid mode");
	}
	lcdShowIfRunCompleted();
    120c:	2f 92       	push	r2
    120e:	3f 92       	push	r3
    1210:	4f 92       	push	r4
    1212:	5f 92       	push	r5
    1214:	6f 92       	push	r6
    1216:	7f 92       	push	r7
    1218:	8f 92       	push	r8
    121a:	9f 92       	push	r9
    121c:	af 92       	push	r10
    121e:	bf 92       	push	r11
    1220:	cf 92       	push	r12
    1222:	df 92       	push	r13
    1224:	ef 92       	push	r14
    1226:	ff 92       	push	r15
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	cb 53       	subi	r28, 0x3B	; 59
    1236:	d1 40       	sbci	r29, 0x01	; 1
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	6a ed       	ldi	r22, 0xDA	; 218
    1244:	78 e0       	ldi	r23, 0x08	; 8
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	0e 94 7d 15 	call	0x2afa	; 0x2afa <uart_puts>
    124e:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    1252:	81 60       	ori	r24, 0x01	; 1
    1254:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
    1258:	e1 e8       	ldi	r30, 0x81	; 129
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	84 60       	ori	r24, 0x04	; 4
    1260:	80 83       	st	Z, r24
    1262:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <inlet_valve_energise>
    1266:	4f ef       	ldi	r20, 0xFF	; 255
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	61 e0       	ldi	r22, 0x01	; 1
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	0e 94 35 13 	call	0x266a	; 0x266a <MotordriverRun>
    1272:	6d ef       	ldi	r22, 0xFD	; 253
    1274:	78 e0       	ldi	r23, 0x08	; 8
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 7d 15 	call	0x2afa	; 0x2afa <uart_puts>
    127e:	82 e4       	ldi	r24, 0x42	; 66
    1280:	8f 93       	push	r24
    1282:	80 e7       	ldi	r24, 0x70	; 112
    1284:	8f 93       	push	r24
    1286:	1f 92       	push	r1
    1288:	1f 92       	push	r1
    128a:	81 e4       	ldi	r24, 0x41	; 65
    128c:	8f 93       	push	r24
    128e:	80 e8       	ldi	r24, 0x80	; 128
    1290:	8f 93       	push	r24
    1292:	1f 92       	push	r1
    1294:	1f 92       	push	r1
    1296:	8b e0       	ldi	r24, 0x0B	; 11
    1298:	8f 93       	push	r24
    129a:	88 eb       	ldi	r24, 0xB8	; 184
    129c:	8f 93       	push	r24
    129e:	88 e1       	ldi	r24, 0x18	; 24
    12a0:	99 e0       	ldi	r25, 0x09	; 9
    12a2:	9f 93       	push	r25
    12a4:	8f 93       	push	r24
    12a6:	ce 01       	movw	r24, r28
    12a8:	01 96       	adiw	r24, 0x01	; 1
    12aa:	9f 93       	push	r25
    12ac:	8f 93       	push	r24
    12ae:	0e 94 2c 22 	call	0x4458	; 0x4458 <sprintf>
    12b2:	81 e5       	ldi	r24, 0x51	; 81
    12b4:	99 e0       	ldi	r25, 0x09	; 9
    12b6:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	9f ef       	ldi	r25, 0xFF	; 255
    12c6:	c7 5c       	subi	r28, 0xC7	; 199
    12c8:	de 4f       	sbci	r29, 0xFE	; 254
    12ca:	98 83       	st	Y, r25
    12cc:	c9 53       	subi	r28, 0x39	; 57
    12ce:	d1 40       	sbci	r29, 0x01	; 1
    12d0:	c6 5c       	subi	r28, 0xC6	; 198
    12d2:	de 4f       	sbci	r29, 0xFE	; 254
    12d4:	18 82       	st	Y, r1
    12d6:	ca 53       	subi	r28, 0x3A	; 58
    12d8:	d1 40       	sbci	r29, 0x01	; 1
    12da:	51 2c       	mov	r5, r1
    12dc:	41 2c       	mov	r4, r1
    12de:	c5 5c       	subi	r28, 0xC5	; 197
    12e0:	de 4f       	sbci	r29, 0xFE	; 254
    12e2:	18 82       	st	Y, r1
    12e4:	cb 53       	subi	r28, 0x3B	; 59
    12e6:	d1 40       	sbci	r29, 0x01	; 1
    12e8:	71 2c       	mov	r7, r1
    12ea:	81 2c       	mov	r8, r1
    12ec:	91 2c       	mov	r9, r1
    12ee:	61 2c       	mov	r6, r1
    12f0:	e1 2c       	mov	r14, r1
    12f2:	f1 2c       	mov	r15, r1
    12f4:	0f 2e       	mov	r0, r31
    12f6:	f9 e2       	ldi	r31, 0x29	; 41
    12f8:	af 2e       	mov	r10, r31
    12fa:	f6 e1       	ldi	r31, 0x16	; 22
    12fc:	bf 2e       	mov	r11, r31
    12fe:	f0 2d       	mov	r31, r0
    1300:	0f 2e       	mov	r0, r31
    1302:	f1 ec       	ldi	r31, 0xC1	; 193
    1304:	cf 2e       	mov	r12, r31
    1306:	f5 e1       	ldi	r31, 0x15	; 21
    1308:	df 2e       	mov	r13, r31
    130a:	f0 2d       	mov	r31, r0
    130c:	0f 2e       	mov	r0, r31
    130e:	f4 e8       	ldi	r31, 0x84	; 132
    1310:	2f 2e       	mov	r2, r31
    1312:	31 2c       	mov	r3, r1
    1314:	f0 2d       	mov	r31, r0
    1316:	0b ee       	ldi	r16, 0xEB	; 235
    1318:	15 e1       	ldi	r17, 0x15	; 21
    131a:	fe 01       	movw	r30, r28
    131c:	e7 58       	subi	r30, 0x87	; 135
    131e:	ff 4f       	sbci	r31, 0xFF	; 255
    1320:	c9 5c       	subi	r28, 0xC9	; 201
    1322:	de 4f       	sbci	r29, 0xFE	; 254
    1324:	f9 83       	std	Y+1, r31	; 0x01
    1326:	e8 83       	st	Y, r30
    1328:	c7 53       	subi	r28, 0x37	; 55
    132a:	d1 40       	sbci	r29, 0x01	; 1
    132c:	2a c1       	rjmp	.+596    	; 0x1582 <collectSample+0x376>
    132e:	f1 01       	movw	r30, r2
    1330:	80 81       	ld	r24, Z
    1332:	91 81       	ldd	r25, Z+1	; 0x01
    1334:	81 31       	cpi	r24, 0x11	; 17
    1336:	9a 47       	sbci	r25, 0x7A	; 122
    1338:	08 f4       	brcc	.+2      	; 0x133c <collectSample+0x130>
    133a:	a6 c0       	rjmp	.+332    	; 0x1488 <collectSample+0x27c>
    133c:	f1 01       	movw	r30, r2
    133e:	11 82       	std	Z+1, r1	; 0x01
    1340:	10 82       	st	Z, r1
    1342:	ff ef       	ldi	r31, 0xFF	; 255
    1344:	ef 1a       	sub	r14, r31
    1346:	ff 0a       	sbc	r15, r31
    1348:	ee e2       	ldi	r30, 0x2E	; 46
    134a:	f6 e1       	ldi	r31, 0x16	; 22
    134c:	80 81       	ld	r24, Z
    134e:	8f 5f       	subi	r24, 0xFF	; 255
    1350:	80 83       	st	Z, r24
    1352:	8f e6       	ldi	r24, 0x6F	; 111
    1354:	97 e1       	ldi	r25, 0x17	; 23
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <collectSample+0x14a>
    135a:	00 c0       	rjmp	.+0      	; 0x135c <collectSample+0x150>
    135c:	00 00       	nop
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	0e 94 86 13 	call	0x270c	; 0x270c <ReadPressure>
    1364:	76 2e       	mov	r7, r22
    1366:	87 2e       	mov	r8, r23
    1368:	98 2e       	mov	r9, r24
    136a:	69 2e       	mov	r6, r25
    136c:	82 e0       	ldi	r24, 0x02	; 2
    136e:	0e 94 86 13 	call	0x270c	; 0x270c <ReadPressure>
    1372:	c6 5c       	subi	r28, 0xC6	; 198
    1374:	de 4f       	sbci	r29, 0xFE	; 254
    1376:	68 83       	st	Y, r22
    1378:	ca 53       	subi	r28, 0x3A	; 58
    137a:	d1 40       	sbci	r29, 0x01	; 1
    137c:	57 2e       	mov	r5, r23
    137e:	48 2e       	mov	r4, r24
    1380:	c5 5c       	subi	r28, 0xC5	; 197
    1382:	de 4f       	sbci	r29, 0xFE	; 254
    1384:	98 83       	st	Y, r25
    1386:	cb 53       	subi	r28, 0x3B	; 59
    1388:	d1 40       	sbci	r29, 0x01	; 1
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	4c e5       	ldi	r20, 0x5C	; 92
    1390:	52 e4       	ldi	r21, 0x42	; 66
    1392:	0e 94 85 1a 	call	0x350a	; 0x350a <__gesf2>
    1396:	18 16       	cp	r1, r24
    1398:	8c f4       	brge	.+34     	; 0x13bc <collectSample+0x1b0>
    139a:	c7 5c       	subi	r28, 0xC7	; 199
    139c:	de 4f       	sbci	r29, 0xFE	; 254
    139e:	98 81       	ld	r25, Y
    13a0:	c9 53       	subi	r28, 0x39	; 57
    13a2:	d1 40       	sbci	r29, 0x01	; 1
    13a4:	9a 50       	subi	r25, 0x0A	; 10
    13a6:	c7 5c       	subi	r28, 0xC7	; 199
    13a8:	de 4f       	sbci	r29, 0xFE	; 254
    13aa:	98 83       	st	Y, r25
    13ac:	c9 53       	subi	r28, 0x39	; 57
    13ae:	d1 40       	sbci	r29, 0x01	; 1
    13b0:	49 2f       	mov	r20, r25
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	61 e0       	ldi	r22, 0x01	; 1
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	0e 94 35 13 	call	0x266a	; 0x266a <MotordriverRun>
    13bc:	97 01       	movw	r18, r14
    13be:	ad ec       	ldi	r26, 0xCD	; 205
    13c0:	bc ec       	ldi	r27, 0xCC	; 204
    13c2:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__umulhisi3>
    13c6:	96 95       	lsr	r25
    13c8:	87 95       	ror	r24
    13ca:	96 95       	lsr	r25
    13cc:	87 95       	ror	r24
    13ce:	9c 01       	movw	r18, r24
    13d0:	22 0f       	add	r18, r18
    13d2:	33 1f       	adc	r19, r19
    13d4:	22 0f       	add	r18, r18
    13d6:	33 1f       	adc	r19, r19
    13d8:	82 0f       	add	r24, r18
    13da:	93 1f       	adc	r25, r19
    13dc:	e8 16       	cp	r14, r24
    13de:	f9 06       	cpc	r15, r25
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <collectSample+0x1d8>
    13e2:	52 c0       	rjmp	.+164    	; 0x1488 <collectSample+0x27c>
    13e4:	f5 01       	movw	r30, r10
    13e6:	83 81       	ldd	r24, Z+3	; 0x03
    13e8:	8f 93       	push	r24
    13ea:	82 81       	ldd	r24, Z+2	; 0x02
    13ec:	8f 93       	push	r24
    13ee:	81 81       	ldd	r24, Z+1	; 0x01
    13f0:	8f 93       	push	r24
    13f2:	80 81       	ld	r24, Z
    13f4:	8f 93       	push	r24
    13f6:	f8 01       	movw	r30, r16
    13f8:	81 ad       	ldd	r24, Z+57	; 0x39
    13fa:	8f 93       	push	r24
    13fc:	80 ad       	ldd	r24, Z+56	; 0x38
    13fe:	8f 93       	push	r24
    1400:	1f 92       	push	r1
    1402:	c7 5c       	subi	r28, 0xC7	; 199
    1404:	de 4f       	sbci	r29, 0xFE	; 254
    1406:	f8 81       	ld	r31, Y
    1408:	c9 53       	subi	r28, 0x39	; 57
    140a:	d1 40       	sbci	r29, 0x01	; 1
    140c:	ff 93       	push	r31
    140e:	c5 5c       	subi	r28, 0xC5	; 197
    1410:	de 4f       	sbci	r29, 0xFE	; 254
    1412:	28 81       	ld	r18, Y
    1414:	cb 53       	subi	r28, 0x3B	; 59
    1416:	d1 40       	sbci	r29, 0x01	; 1
    1418:	2f 93       	push	r18
    141a:	4f 92       	push	r4
    141c:	5f 92       	push	r5
    141e:	c6 5c       	subi	r28, 0xC6	; 198
    1420:	de 4f       	sbci	r29, 0xFE	; 254
    1422:	88 81       	ld	r24, Y
    1424:	ca 53       	subi	r28, 0x3A	; 58
    1426:	d1 40       	sbci	r29, 0x01	; 1
    1428:	8f 93       	push	r24
    142a:	6f 92       	push	r6
    142c:	9f 92       	push	r9
    142e:	8f 92       	push	r8
    1430:	7f 92       	push	r7
    1432:	ff 92       	push	r15
    1434:	ef 92       	push	r14
    1436:	e6 e6       	ldi	r30, 0x66	; 102
    1438:	f9 e0       	ldi	r31, 0x09	; 9
    143a:	ff 93       	push	r31
    143c:	ef 93       	push	r30
    143e:	c8 5c       	subi	r28, 0xC8	; 200
    1440:	de 4f       	sbci	r29, 0xFE	; 254
    1442:	88 81       	ld	r24, Y
    1444:	c8 53       	subi	r28, 0x38	; 56
    1446:	d1 40       	sbci	r29, 0x01	; 1
    1448:	8f 93       	push	r24
    144a:	c9 5c       	subi	r28, 0xC9	; 201
    144c:	de 4f       	sbci	r29, 0xFE	; 254
    144e:	98 81       	ld	r25, Y
    1450:	c7 53       	subi	r28, 0x37	; 55
    1452:	d1 40       	sbci	r29, 0x01	; 1
    1454:	9f 93       	push	r25
    1456:	0e 94 2c 22 	call	0x4458	; 0x4458 <sprintf>
    145a:	c8 5c       	subi	r28, 0xC8	; 200
    145c:	de 4f       	sbci	r29, 0xFE	; 254
    145e:	e8 81       	ld	r30, Y
    1460:	c8 53       	subi	r28, 0x38	; 56
    1462:	d1 40       	sbci	r29, 0x01	; 1
    1464:	ef 93       	push	r30
    1466:	c9 5c       	subi	r28, 0xC9	; 201
    1468:	de 4f       	sbci	r29, 0xFE	; 254
    146a:	f8 81       	ld	r31, Y
    146c:	c7 53       	subi	r28, 0x37	; 55
    146e:	d1 40       	sbci	r29, 0x01	; 1
    1470:	ff 93       	push	r31
    1472:	82 e1       	ldi	r24, 0x12	; 18
    1474:	9c e0       	ldi	r25, 0x0C	; 12
    1476:	9f 93       	push	r25
    1478:	8f 93       	push	r24
    147a:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	ed b7       	in	r30, 0x3d	; 61
    148a:	fe b7       	in	r31, 0x3e	; 62
    148c:	e6 54       	subi	r30, 0x46	; 70
    148e:	f1 09       	sbc	r31, r1
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	fe bf       	out	0x3e, r31	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	ed bf       	out	0x3d, r30	; 61
    149a:	ad b7       	in	r26, 0x3d	; 61
    149c:	be b7       	in	r27, 0x3e	; 62
    149e:	11 96       	adiw	r26, 0x01	; 1
    14a0:	86 e4       	ldi	r24, 0x46	; 70
    14a2:	f8 01       	movw	r30, r16
    14a4:	01 90       	ld	r0, Z+
    14a6:	0d 92       	st	X+, r0
    14a8:	8a 95       	dec	r24
    14aa:	e1 f7       	brne	.-8      	; 0x14a4 <collectSample+0x298>
    14ac:	ce 01       	movw	r24, r28
    14ae:	8f 50       	subi	r24, 0x0F	; 15
    14b0:	9f 4f       	sbci	r25, 0xFF	; 255
    14b2:	0e 94 01 17 	call	0x2e02	; 0x2e02 <volume_instants>
    14b6:	86 e4       	ldi	r24, 0x46	; 70
    14b8:	fe 01       	movw	r30, r28
    14ba:	ef 50       	subi	r30, 0x0F	; 15
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	d8 01       	movw	r26, r16
    14c0:	01 90       	ld	r0, Z+
    14c2:	0d 92       	st	X+, r0
    14c4:	8a 95       	dec	r24
    14c6:	e1 f7       	brne	.-8      	; 0x14c0 <collectSample+0x2b4>
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	ed b7       	in	r30, 0x3d	; 61
    14d4:	fe b7       	in	r31, 0x3e	; 62
    14d6:	e6 54       	subi	r30, 0x46	; 70
    14d8:	f1 09       	sbc	r31, r1
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	fe bf       	out	0x3e, r31	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	ed bf       	out	0x3d, r30	; 61
    14e4:	ad b7       	in	r26, 0x3d	; 61
    14e6:	be b7       	in	r27, 0x3e	; 62
    14e8:	11 96       	adiw	r26, 0x01	; 1
    14ea:	86 e4       	ldi	r24, 0x46	; 70
    14ec:	f8 01       	movw	r30, r16
    14ee:	01 90       	ld	r0, Z+
    14f0:	0d 92       	st	X+, r0
    14f2:	8a 95       	dec	r24
    14f4:	e1 f7       	brne	.-8      	; 0x14ee <collectSample+0x2e2>
    14f6:	ce 01       	movw	r24, r28
    14f8:	8f 50       	subi	r24, 0x0F	; 15
    14fa:	9f 4f       	sbci	r25, 0xFF	; 255
    14fc:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <volume_means>
    1500:	86 e4       	ldi	r24, 0x46	; 70
    1502:	fe 01       	movw	r30, r28
    1504:	ef 50       	subi	r30, 0x0F	; 15
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	d8 01       	movw	r26, r16
    150a:	01 90       	ld	r0, Z+
    150c:	0d 92       	st	X+, r0
    150e:	8a 95       	dec	r24
    1510:	e1 f7       	brne	.-8      	; 0x150a <collectSample+0x2fe>
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	de bf       	out	0x3e, r29	; 62
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	cd bf       	out	0x3d, r28	; 61
    151c:	98 eb       	ldi	r25, 0xB8	; 184
    151e:	e9 16       	cp	r14, r25
    1520:	9b e0       	ldi	r25, 0x0B	; 11
    1522:	f9 06       	cpc	r15, r25
    1524:	08 f0       	brcs	.+2      	; 0x1528 <collectSample+0x31c>
    1526:	40 c0       	rjmp	.+128    	; 0x15a8 <collectSample+0x39c>
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e8       	ldi	r20, 0x80	; 128
    152e:	51 e4       	ldi	r21, 0x41	; 65
    1530:	67 2d       	mov	r22, r7
    1532:	78 2d       	mov	r23, r8
    1534:	89 2d       	mov	r24, r9
    1536:	96 2d       	mov	r25, r6
    1538:	0e 94 67 19 	call	0x32ce	; 0x32ce <__cmpsf2>
    153c:	88 23       	and	r24, r24
    153e:	a4 f5       	brge	.+104    	; 0x15a8 <collectSample+0x39c>
    1540:	e4 eb       	ldi	r30, 0xB4	; 180
    1542:	ee 16       	cp	r14, r30
    1544:	f1 04       	cpc	r15, r1
    1546:	b0 f0       	brcs	.+44     	; 0x1574 <collectSample+0x368>
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e7       	ldi	r20, 0x70	; 112
    154e:	52 e4       	ldi	r21, 0x42	; 66
    1550:	c6 5c       	subi	r28, 0xC6	; 198
    1552:	de 4f       	sbci	r29, 0xFE	; 254
    1554:	b8 81       	ld	r27, Y
    1556:	ca 53       	subi	r28, 0x3A	; 58
    1558:	d1 40       	sbci	r29, 0x01	; 1
    155a:	c5 5c       	subi	r28, 0xC5	; 197
    155c:	de 4f       	sbci	r29, 0xFE	; 254
    155e:	e8 81       	ld	r30, Y
    1560:	cb 53       	subi	r28, 0x3B	; 59
    1562:	d1 40       	sbci	r29, 0x01	; 1
    1564:	6b 2f       	mov	r22, r27
    1566:	75 2d       	mov	r23, r5
    1568:	84 2d       	mov	r24, r4
    156a:	9e 2f       	mov	r25, r30
    156c:	0e 94 67 19 	call	0x32ce	; 0x32ce <__cmpsf2>
    1570:	88 23       	and	r24, r24
    1572:	d4 f4       	brge	.+52     	; 0x15a8 <collectSample+0x39c>
    1574:	c7 5c       	subi	r28, 0xC7	; 199
    1576:	de 4f       	sbci	r29, 0xFE	; 254
    1578:	f8 81       	ld	r31, Y
    157a:	c9 53       	subi	r28, 0x39	; 57
    157c:	d1 40       	sbci	r29, 0x01	; 1
    157e:	f9 37       	cpi	r31, 0x79	; 121
    1580:	98 f0       	brcs	.+38     	; 0x15a8 <collectSample+0x39c>
    1582:	f6 01       	movw	r30, r12
    1584:	60 81       	ld	r22, Z
    1586:	71 81       	ldd	r23, Z+1	; 0x01
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__floatunsisf>
    1590:	9b 01       	movw	r18, r22
    1592:	ac 01       	movw	r20, r24
    1594:	f5 01       	movw	r30, r10
    1596:	60 81       	ld	r22, Z
    1598:	71 81       	ldd	r23, Z+1	; 0x01
    159a:	82 81       	ldd	r24, Z+2	; 0x02
    159c:	93 81       	ldd	r25, Z+3	; 0x03
    159e:	0e 94 67 19 	call	0x32ce	; 0x32ce <__cmpsf2>
    15a2:	88 23       	and	r24, r24
    15a4:	0c f4       	brge	.+2      	; 0x15a8 <collectSample+0x39c>
    15a6:	c3 ce       	rjmp	.-634    	; 0x132e <collectSample+0x122>
    15a8:	e9 e2       	ldi	r30, 0x29	; 41
    15aa:	f6 e1       	ldi	r31, 0x16	; 22
    15ac:	83 81       	ldd	r24, Z+3	; 0x03
    15ae:	8f 93       	push	r24
    15b0:	82 81       	ldd	r24, Z+2	; 0x02
    15b2:	8f 93       	push	r24
    15b4:	81 81       	ldd	r24, Z+1	; 0x01
    15b6:	8f 93       	push	r24
    15b8:	80 81       	ld	r24, Z
    15ba:	8f 93       	push	r24
    15bc:	88 e8       	ldi	r24, 0x88	; 136
    15be:	99 e0       	ldi	r25, 0x09	; 9
    15c0:	9f 93       	push	r25
    15c2:	8f 93       	push	r24
    15c4:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	0e 94 53 13 	call	0x26a6	; 0x26a6 <MotordriverStop>
    15ce:	0e 94 db 14 	call	0x29b6	; 0x29b6 <inlet_valve_denergise>
    15d2:	6c ea       	ldi	r22, 0xAC	; 172
    15d4:	79 e0       	ldi	r23, 0x09	; 9
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 7d 15 	call	0x2afa	; 0x2afa <uart_puts>
    15de:	c7 5c       	subi	r28, 0xC7	; 199
    15e0:	de 4f       	sbci	r29, 0xFE	; 254
    15e2:	f8 81       	ld	r31, Y
    15e4:	c9 53       	subi	r28, 0x39	; 57
    15e6:	d1 40       	sbci	r29, 0x01	; 1
    15e8:	4f 2f       	mov	r20, r31
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	61 e0       	ldi	r22, 0x01	; 1
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	0e 94 35 13 	call	0x266a	; 0x266a <MotordriverRun>
    15f4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    15f8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	e1 2c       	mov	r14, r1
    160a:	f1 2c       	mov	r15, r1
    160c:	04 e8       	ldi	r16, 0x84	; 132
    160e:	10 e0       	ldi	r17, 0x00	; 0
    1610:	0f 2e       	mov	r0, r31
    1612:	f8 ec       	ldi	r31, 0xC8	; 200
    1614:	cf 2e       	mov	r12, r31
    1616:	f9 e0       	ldi	r31, 0x09	; 9
    1618:	df 2e       	mov	r13, r31
    161a:	f0 2d       	mov	r31, r0
    161c:	1a c0       	rjmp	.+52     	; 0x1652 <collectSample+0x446>
    161e:	f8 01       	movw	r30, r16
    1620:	80 81       	ld	r24, Z
    1622:	91 81       	ldd	r25, Z+1	; 0x01
    1624:	81 31       	cpi	r24, 0x11	; 17
    1626:	9a 47       	sbci	r25, 0x7A	; 122
    1628:	d0 f3       	brcs	.-12     	; 0x161e <collectSample+0x412>
    162a:	f8 01       	movw	r30, r16
    162c:	11 82       	std	Z+1, r1	; 0x01
    162e:	10 82       	st	Z, r1
    1630:	ff ef       	ldi	r31, 0xFF	; 255
    1632:	ef 1a       	sub	r14, r31
    1634:	ff 0a       	sbc	r15, r31
    1636:	ff 92       	push	r15
    1638:	ef 92       	push	r14
    163a:	df 92       	push	r13
    163c:	cf 92       	push	r12
    163e:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	2c e3       	ldi	r18, 0x3C	; 60
    164c:	e2 16       	cp	r14, r18
    164e:	f1 04       	cpc	r15, r1
    1650:	39 f0       	breq	.+14     	; 0x1660 <collectSample+0x454>
    1652:	f8 01       	movw	r30, r16
    1654:	80 81       	ld	r24, Z
    1656:	91 81       	ldd	r25, Z+1	; 0x01
    1658:	81 31       	cpi	r24, 0x11	; 17
    165a:	9a 47       	sbci	r25, 0x7A	; 122
    165c:	30 f7       	brcc	.-52     	; 0x162a <collectSample+0x41e>
    165e:	df cf       	rjmp	.-66     	; 0x161e <collectSample+0x412>
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	0e 94 53 13 	call	0x26a6	; 0x26a6 <MotordriverStop>
    1666:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    166a:	8e 7f       	andi	r24, 0xFE	; 254
    166c:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
    1670:	6d ee       	ldi	r22, 0xED	; 237
    1672:	79 e0       	ldi	r23, 0x09	; 9
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	0e 94 7d 15 	call	0x2afa	; 0x2afa <uart_puts>
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	c5 5c       	subi	r28, 0xC5	; 197
    1682:	de 4f       	sbci	r29, 0xFE	; 254
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	ff 90       	pop	r15
    1698:	ef 90       	pop	r14
    169a:	df 90       	pop	r13
    169c:	cf 90       	pop	r12
    169e:	bf 90       	pop	r11
    16a0:	af 90       	pop	r10
    16a2:	9f 90       	pop	r9
    16a4:	8f 90       	pop	r8
    16a6:	7f 90       	pop	r7
    16a8:	6f 90       	pop	r6
    16aa:	5f 90       	pop	r5
    16ac:	4f 90       	pop	r4
    16ae:	3f 90       	pop	r3
    16b0:	2f 90       	pop	r2
    16b2:	08 95       	ret

000016b4 <__vector_42>:
    16b4:	1f 92       	push	r1
    16b6:	0f 92       	push	r0
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	0f 92       	push	r0
    16bc:	11 24       	eor	r1, r1
    16be:	0b b6       	in	r0, 0x3b	; 59
    16c0:	0f 92       	push	r0
    16c2:	2f 93       	push	r18
    16c4:	3f 93       	push	r19
    16c6:	4f 93       	push	r20
    16c8:	5f 93       	push	r21
    16ca:	6f 93       	push	r22
    16cc:	7f 93       	push	r23
    16ce:	8f 93       	push	r24
    16d0:	9f 93       	push	r25
    16d2:	af 93       	push	r26
    16d4:	bf 93       	push	r27
    16d6:	ef 93       	push	r30
    16d8:	ff 93       	push	r31
    16da:	80 91 68 16 	lds	r24, 0x1668	; 0x801668 <timerx_sub>
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	01 96       	adiw	r24, 0x01	; 1
    16e2:	6a e0       	ldi	r22, 0x0A	; 10
    16e4:	70 e0       	ldi	r23, 0x00	; 0
    16e6:	0e 94 75 1e 	call	0x3cea	; 0x3cea <__divmodhi4>
    16ea:	80 93 68 16 	sts	0x1668, r24	; 0x801668 <timerx_sub>
    16ee:	81 11       	cpse	r24, r1
    16f0:	1e c0       	rjmp	.+60     	; 0x172e <__vector_42+0x7a>
    16f2:	80 91 64 16 	lds	r24, 0x1664	; 0x801664 <timerx_sec>
    16f6:	90 91 65 16 	lds	r25, 0x1665	; 0x801665 <timerx_sec+0x1>
    16fa:	a0 91 66 16 	lds	r26, 0x1666	; 0x801666 <timerx_sec+0x2>
    16fe:	b0 91 67 16 	lds	r27, 0x1667	; 0x801667 <timerx_sec+0x3>
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	a1 1d       	adc	r26, r1
    1706:	b1 1d       	adc	r27, r1
    1708:	80 93 64 16 	sts	0x1664, r24	; 0x801664 <timerx_sec>
    170c:	90 93 65 16 	sts	0x1665, r25	; 0x801665 <timerx_sec+0x1>
    1710:	a0 93 66 16 	sts	0x1666, r26	; 0x801666 <timerx_sec+0x2>
    1714:	b0 93 67 16 	sts	0x1667, r27	; 0x801667 <timerx_sec+0x3>
    1718:	e0 91 62 16 	lds	r30, 0x1662	; 0x801662 <timerx_callback_sec>
    171c:	f0 91 63 16 	lds	r31, 0x1663	; 0x801663 <timerx_callback_sec+0x1>
    1720:	30 97       	sbiw	r30, 0x00	; 0
    1722:	69 f0       	breq	.+26     	; 0x173e <__vector_42+0x8a>
    1724:	19 95       	eicall
    1726:	0b c0       	rjmp	.+22     	; 0x173e <__vector_42+0x8a>
    1728:	fc 01       	movw	r30, r24
    172a:	19 95       	eicall
    172c:	12 c0       	rjmp	.+36     	; 0x1752 <__vector_42+0x9e>
    172e:	e0 91 60 16 	lds	r30, 0x1660	; 0x801660 <timerx_callback_sub>
    1732:	f0 91 61 16 	lds	r31, 0x1661	; 0x801661 <timerx_callback_sub+0x1>
    1736:	30 97       	sbiw	r30, 0x00	; 0
    1738:	61 f0       	breq	.+24     	; 0x1752 <__vector_42+0x9e>
    173a:	19 95       	eicall
    173c:	0a c0       	rjmp	.+20     	; 0x1752 <__vector_42+0x9e>
    173e:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <timerx_1hz_callbacks>
    1742:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <timerx_1hz_callbacks+0x1>
    1746:	a0 91 09 02 	lds	r26, 0x0209	; 0x800209 <timerx_1hz_callbacks+0x2>
    174a:	b0 91 0a 02 	lds	r27, 0x020A	; 0x80020a <timerx_1hz_callbacks+0x3>
    174e:	ab 2b       	or	r26, r27
    1750:	59 f7       	brne	.-42     	; 0x1728 <__vector_42+0x74>
    1752:	ff 91       	pop	r31
    1754:	ef 91       	pop	r30
    1756:	bf 91       	pop	r27
    1758:	af 91       	pop	r26
    175a:	9f 91       	pop	r25
    175c:	8f 91       	pop	r24
    175e:	7f 91       	pop	r23
    1760:	6f 91       	pop	r22
    1762:	5f 91       	pop	r21
    1764:	4f 91       	pop	r20
    1766:	3f 91       	pop	r19
    1768:	2f 91       	pop	r18
    176a:	0f 90       	pop	r0
    176c:	0b be       	out	0x3b, r0	; 59
    176e:	0f 90       	pop	r0
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	0f 90       	pop	r0
    1774:	1f 90       	pop	r1
    1776:	18 95       	reti

00001778 <__vector_3>:
    1778:	1f 92       	push	r1
    177a:	0f 92       	push	r0
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	0f 92       	push	r0
    1780:	11 24       	eor	r1, r1
    1782:	0b b6       	in	r0, 0x3b	; 59
    1784:	0f 92       	push	r0
    1786:	2f 93       	push	r18
    1788:	3f 93       	push	r19
    178a:	4f 93       	push	r20
    178c:	5f 93       	push	r21
    178e:	6f 93       	push	r22
    1790:	7f 93       	push	r23
    1792:	8f 93       	push	r24
    1794:	9f 93       	push	r25
    1796:	af 93       	push	r26
    1798:	bf 93       	push	r27
    179a:	ef 93       	push	r30
    179c:	ff 93       	push	r31
    179e:	ea 98       	cbi	0x1d, 2	; 29
    17a0:	63 e1       	ldi	r22, 0x13	; 19
    17a2:	7a e0       	ldi	r23, 0x0A	; 10
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	0e 94 7d 15 	call	0x2afa	; 0x2afa <uart_puts>
    17ac:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    17b0:	88 7f       	andi	r24, 0xF8	; 248
    17b2:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
    17b6:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    17ba:	86 60       	ori	r24, 0x06	; 6
    17bc:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
    17c0:	0e 94 84 18 	call	0x3108	; 0x3108 <USART1_re_enable>
    17c4:	ff 91       	pop	r31
    17c6:	ef 91       	pop	r30
    17c8:	bf 91       	pop	r27
    17ca:	af 91       	pop	r26
    17cc:	9f 91       	pop	r25
    17ce:	8f 91       	pop	r24
    17d0:	7f 91       	pop	r23
    17d2:	6f 91       	pop	r22
    17d4:	5f 91       	pop	r21
    17d6:	4f 91       	pop	r20
    17d8:	3f 91       	pop	r19
    17da:	2f 91       	pop	r18
    17dc:	0f 90       	pop	r0
    17de:	0b be       	out	0x3b, r0	; 59
    17e0:	0f 90       	pop	r0
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	0f 90       	pop	r0
    17e6:	1f 90       	pop	r1
    17e8:	18 95       	reti

000017ea <__vector_8>:
    17ea:	1f 92       	push	r1
    17ec:	0f 92       	push	r0
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	0f 92       	push	r0
    17f2:	11 24       	eor	r1, r1
    17f4:	0b b6       	in	r0, 0x3b	; 59
    17f6:	0f 92       	push	r0
    17f8:	2f 93       	push	r18
    17fa:	3f 93       	push	r19
    17fc:	4f 93       	push	r20
    17fe:	5f 93       	push	r21
    1800:	6f 93       	push	r22
    1802:	7f 93       	push	r23
    1804:	8f 93       	push	r24
    1806:	9f 93       	push	r25
    1808:	af 93       	push	r26
    180a:	bf 93       	push	r27
    180c:	ef 93       	push	r30
    180e:	ff 93       	push	r31
    1810:	ef 98       	cbi	0x1d, 7	; 29
    1812:	2f ef       	ldi	r18, 0xFF	; 255
    1814:	84 e3       	ldi	r24, 0x34	; 52
    1816:	9c e0       	ldi	r25, 0x0C	; 12
    1818:	21 50       	subi	r18, 0x01	; 1
    181a:	80 40       	sbci	r24, 0x00	; 0
    181c:	90 40       	sbci	r25, 0x00	; 0
    181e:	e1 f7       	brne	.-8      	; 0x1818 <__vector_8+0x2e>
    1820:	00 c0       	rjmp	.+0      	; 0x1822 <__vector_8+0x38>
    1822:	00 00       	nop
    1824:	84 e2       	ldi	r24, 0x24	; 36
    1826:	9a e0       	ldi	r25, 0x0A	; 10
    1828:	a7 dc       	rcall	.-1714   	; 0x1178 <LogDebug>
    182a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    182e:	88 7f       	andi	r24, 0xF8	; 248
    1830:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
    1834:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    1838:	8b 60       	ori	r24, 0x0B	; 11
    183a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
    183e:	ff 91       	pop	r31
    1840:	ef 91       	pop	r30
    1842:	bf 91       	pop	r27
    1844:	af 91       	pop	r26
    1846:	9f 91       	pop	r25
    1848:	8f 91       	pop	r24
    184a:	7f 91       	pop	r23
    184c:	6f 91       	pop	r22
    184e:	5f 91       	pop	r21
    1850:	4f 91       	pop	r20
    1852:	3f 91       	pop	r19
    1854:	2f 91       	pop	r18
    1856:	0f 90       	pop	r0
    1858:	0b be       	out	0x3b, r0	; 59
    185a:	0f 90       	pop	r0
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	0f 90       	pop	r0
    1860:	1f 90       	pop	r1
    1862:	18 95       	reti

00001864 <__vector_25>:
    1864:	1f 92       	push	r1
    1866:	0f 92       	push	r0
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	0f 92       	push	r0
    186c:	11 24       	eor	r1, r1
    186e:	0b b6       	in	r0, 0x3b	; 59
    1870:	0f 92       	push	r0
    1872:	8f 93       	push	r24
    1874:	ef 93       	push	r30
    1876:	ff 93       	push	r31
    1878:	e0 91 d7 15 	lds	r30, 0x15D7	; 0x8015d7 <data_count>
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1882:	ef 51       	subi	r30, 0x1F	; 31
    1884:	fa 4e       	sbci	r31, 0xEA	; 234
    1886:	80 83       	st	Z, r24
    1888:	e0 91 d7 15 	lds	r30, 0x15D7	; 0x8015d7 <data_count>
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	ef 51       	subi	r30, 0x1F	; 31
    1890:	fa 4e       	sbci	r31, 0xEA	; 234
    1892:	80 81       	ld	r24, Z
    1894:	8a 30       	cpi	r24, 0x0A	; 10
    1896:	31 f4       	brne	.+12     	; 0x18a4 <__vector_25+0x40>
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	80 93 35 16 	sts	0x1635, r24	; 0x801635 <command_ready>
    189e:	10 92 d7 15 	sts	0x15D7, r1	; 0x8015d7 <data_count>
    18a2:	05 c0       	rjmp	.+10     	; 0x18ae <__vector_25+0x4a>
    18a4:	80 91 d7 15 	lds	r24, 0x15D7	; 0x8015d7 <data_count>
    18a8:	8f 5f       	subi	r24, 0xFF	; 255
    18aa:	80 93 d7 15 	sts	0x15D7, r24	; 0x8015d7 <data_count>
    18ae:	ff 91       	pop	r31
    18b0:	ef 91       	pop	r30
    18b2:	8f 91       	pop	r24
    18b4:	0f 90       	pop	r0
    18b6:	0b be       	out	0x3b, r0	; 59
    18b8:	0f 90       	pop	r0
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	0f 90       	pop	r0
    18be:	1f 90       	pop	r1
    18c0:	18 95       	reti

000018c2 <settings_Print>:
    18c2:	8d e3       	ldi	r24, 0x3D	; 61
    18c4:	9a e0       	ldi	r25, 0x0A	; 10
    18c6:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
    18ca:	e1 ec       	ldi	r30, 0xC1	; 193
    18cc:	f5 e1       	ldi	r31, 0x15	; 21
    18ce:	81 81       	ldd	r24, Z+1	; 0x01
    18d0:	8f 93       	push	r24
    18d2:	80 81       	ld	r24, Z
    18d4:	8f 93       	push	r24
    18d6:	81 e5       	ldi	r24, 0x51	; 81
    18d8:	9a e0       	ldi	r25, 0x0A	; 10
    18da:	9f 93       	push	r25
    18dc:	8f 93       	push	r24
    18de:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
    18e2:	8b e4       	ldi	r24, 0x4B	; 75
    18e4:	9a e0       	ldi	r25, 0x0A	; 10
    18e6:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	08 95       	ret

000018f4 <init_interrupts>:
    18f4:	88 e6       	ldi	r24, 0x68	; 104
    18f6:	9a e0       	ldi	r25, 0x0A	; 10
    18f8:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
    18fc:	ef 98       	cbi	0x1d, 7	; 29
    18fe:	ed 98       	cbi	0x1d, 5	; 29
    1900:	ec 98       	cbi	0x1d, 4	; 29
    1902:	e7 9a       	sbi	0x1c, 7	; 28
    1904:	e5 9a       	sbi	0x1c, 5	; 28
    1906:	e4 9a       	sbi	0x1c, 4	; 28
    1908:	ef 9a       	sbi	0x1d, 7	; 29
    190a:	ed 9a       	sbi	0x1d, 5	; 29
    190c:	ec 9a       	sbi	0x1d, 4	; 29
    190e:	83 e8       	ldi	r24, 0x83	; 131
    1910:	9a e0       	ldi	r25, 0x0A	; 10
    1912:	0c 94 8f 21 	jmp	0x431e	; 0x431e <puts>
    1916:	08 95       	ret

00001918 <copy_command>:
    1918:	f8 94       	cli
    191a:	80 e1       	ldi	r24, 0x10	; 16
    191c:	e1 ee       	ldi	r30, 0xE1	; 225
    191e:	f5 e1       	ldi	r31, 0x15	; 21
    1920:	a8 ed       	ldi	r26, 0xD8	; 216
    1922:	b5 e1       	ldi	r27, 0x15	; 21
    1924:	01 90       	ld	r0, Z+
    1926:	0d 92       	st	X+, r0
    1928:	8a 95       	dec	r24
    192a:	e1 f7       	brne	.-8      	; 0x1924 <copy_command+0xc>
    192c:	80 e1       	ldi	r24, 0x10	; 16
    192e:	e1 ee       	ldi	r30, 0xE1	; 225
    1930:	f5 e1       	ldi	r31, 0x15	; 21
    1932:	df 01       	movw	r26, r30
    1934:	1d 92       	st	X+, r1
    1936:	8a 95       	dec	r24
    1938:	e9 f7       	brne	.-6      	; 0x1934 <copy_command+0x1c>
    193a:	78 94       	sei
    193c:	08 95       	ret

0000193e <processCommand>:
    193e:	8f 92       	push	r8
    1940:	9f 92       	push	r9
    1942:	af 92       	push	r10
    1944:	bf 92       	push	r11
    1946:	cf 92       	push	r12
    1948:	df 92       	push	r13
    194a:	ef 92       	push	r14
    194c:	ff 92       	push	r15
    194e:	0f 93       	push	r16
    1950:	1f 93       	push	r17
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	8c 01       	movw	r16, r24
    195c:	ad b6       	in	r10, 0x3d	; 61
    195e:	be b6       	in	r11, 0x3e	; 62
    1960:	dc 01       	movw	r26, r24
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	09 c0       	rjmp	.+18     	; 0x197a <processCommand+0x3c>
    1968:	fd 01       	movw	r30, r26
    196a:	2c 91       	ld	r18, X
    196c:	2a 30       	cpi	r18, 0x0A	; 10
    196e:	11 f0       	breq	.+4      	; 0x1974 <processCommand+0x36>
    1970:	2d 30       	cpi	r18, 0x0D	; 13
    1972:	09 f4       	brne	.+2      	; 0x1976 <processCommand+0x38>
    1974:	10 82       	st	Z, r1
    1976:	01 96       	adiw	r24, 0x01	; 1
    1978:	11 96       	adiw	r26, 0x01	; 1
    197a:	f8 01       	movw	r30, r16
    197c:	01 90       	ld	r0, Z+
    197e:	00 20       	and	r0, r0
    1980:	e9 f7       	brne	.-6      	; 0x197c <processCommand+0x3e>
    1982:	31 97       	sbiw	r30, 0x01	; 1
    1984:	4f 01       	movw	r8, r30
    1986:	80 1a       	sub	r8, r16
    1988:	91 0a       	sbc	r9, r17
    198a:	88 15       	cp	r24, r8
    198c:	99 05       	cpc	r25, r9
    198e:	60 f3       	brcs	.-40     	; 0x1968 <processCommand+0x2a>
    1990:	43 e0       	ldi	r20, 0x03	; 3
    1992:	50 e0       	ldi	r21, 0x00	; 0
    1994:	b8 01       	movw	r22, r16
    1996:	81 e3       	ldi	r24, 0x31	; 49
    1998:	96 e1       	ldi	r25, 0x16	; 22
    199a:	0e 94 1e 21 	call	0x423c	; 0x423c <strncpy>
    199e:	10 92 34 16 	sts	0x1634, r1	; 0x801634 <command_name+0x3>
    19a2:	a4 01       	movw	r20, r8
    19a4:	43 50       	subi	r20, 0x03	; 3
    19a6:	51 09       	sbc	r21, r1
    19a8:	8d b7       	in	r24, 0x3d	; 61
    19aa:	9e b7       	in	r25, 0x3e	; 62
    19ac:	84 1b       	sub	r24, r20
    19ae:	95 0b       	sbc	r25, r21
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	9e bf       	out	0x3e, r25	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	8d bf       	out	0x3d, r24	; 61
    19ba:	ed b7       	in	r30, 0x3d	; 61
    19bc:	fe b7       	in	r31, 0x3e	; 62
    19be:	31 96       	adiw	r30, 0x01	; 1
    19c0:	7f 01       	movw	r14, r30
    19c2:	6f 01       	movw	r12, r30
    19c4:	f4 e0       	ldi	r31, 0x04	; 4
    19c6:	8f 16       	cp	r8, r31
    19c8:	91 04       	cpc	r9, r1
    19ca:	64 f0       	brlt	.+24     	; 0x19e4 <processCommand+0xa6>
    19cc:	d8 01       	movw	r26, r16
    19ce:	13 96       	adiw	r26, 0x03	; 3
    19d0:	c7 01       	movw	r24, r14
    19d2:	08 0d       	add	r16, r8
    19d4:	19 1d       	adc	r17, r9
    19d6:	2d 91       	ld	r18, X+
    19d8:	fc 01       	movw	r30, r24
    19da:	21 93       	st	Z+, r18
    19dc:	cf 01       	movw	r24, r30
    19de:	a0 17       	cp	r26, r16
    19e0:	b1 07       	cpc	r27, r17
    19e2:	c9 f7       	brne	.-14     	; 0x19d6 <processCommand+0x98>
    19e4:	f7 01       	movw	r30, r14
    19e6:	e4 0f       	add	r30, r20
    19e8:	f5 1f       	adc	r31, r21
    19ea:	10 82       	st	Z, r1
    19ec:	0f 2e       	mov	r0, r31
    19ee:	f6 e0       	ldi	r31, 0x06	; 6
    19f0:	8f 2e       	mov	r8, r31
    19f2:	f2 e0       	ldi	r31, 0x02	; 2
    19f4:	9f 2e       	mov	r9, r31
    19f6:	f0 2d       	mov	r31, r0
    19f8:	00 e0       	ldi	r16, 0x00	; 0
    19fa:	10 e0       	ldi	r17, 0x00	; 0
    19fc:	f4 01       	movw	r30, r8
    19fe:	65 91       	lpm	r22, Z+
    1a00:	74 91       	lpm	r23, Z
    1a02:	81 e3       	ldi	r24, 0x31	; 49
    1a04:	96 e1       	ldi	r25, 0x16	; 22
    1a06:	0e 94 15 21 	call	0x422a	; 0x422a <strcmp>
    1a0a:	89 2b       	or	r24, r25
    1a0c:	09 f0       	breq	.+2      	; 0x1a10 <processCommand+0xd2>
    1a0e:	3b c0       	rjmp	.+118    	; 0x1a86 <processCommand+0x148>
    1a10:	81 e3       	ldi	r24, 0x31	; 49
    1a12:	96 e1       	ldi	r25, 0x16	; 22
    1a14:	9f 93       	push	r25
    1a16:	8f 93       	push	r24
    1a18:	8d e9       	ldi	r24, 0x9D	; 157
    1a1a:	9a e0       	ldi	r25, 0x0A	; 10
    1a1c:	9f 93       	push	r25
    1a1e:	8f 93       	push	r24
    1a20:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
    1a24:	ff 92       	push	r15
    1a26:	ef 92       	push	r14
    1a28:	85 eb       	ldi	r24, 0xB5	; 181
    1a2a:	9a e0       	ldi	r25, 0x0A	; 10
    1a2c:	9f 93       	push	r25
    1a2e:	8f 93       	push	r24
    1a30:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
    1a34:	f8 01       	movw	r30, r16
    1a36:	ee 0f       	add	r30, r30
    1a38:	ff 1f       	adc	r31, r31
    1a3a:	e0 0f       	add	r30, r16
    1a3c:	f1 1f       	adc	r31, r17
    1a3e:	ee 0f       	add	r30, r30
    1a40:	ff 1f       	adc	r31, r31
    1a42:	e8 5f       	subi	r30, 0xF8	; 248
    1a44:	fd 4f       	sbci	r31, 0xFD	; 253
    1a46:	25 91       	lpm	r18, Z+
    1a48:	34 91       	lpm	r19, Z
    1a4a:	c7 01       	movw	r24, r14
    1a4c:	f9 01       	movw	r30, r18
    1a4e:	19 95       	eicall
    1a50:	f6 01       	movw	r30, r12
    1a52:	01 90       	ld	r0, Z+
    1a54:	00 20       	and	r0, r0
    1a56:	e9 f7       	brne	.-6      	; 0x1a52 <processCommand+0x114>
    1a58:	31 97       	sbiw	r30, 0x01	; 1
    1a5a:	6f 01       	movw	r12, r30
    1a5c:	ce 18       	sub	r12, r14
    1a5e:	df 08       	sbc	r13, r15
    1a60:	df 92       	push	r13
    1a62:	cf 92       	push	r12
    1a64:	ff 92       	push	r15
    1a66:	ef 92       	push	r14
    1a68:	8c e0       	ldi	r24, 0x0C	; 12
    1a6a:	9b e0       	ldi	r25, 0x0B	; 11
    1a6c:	9f 93       	push	r25
    1a6e:	8f 93       	push	r24
    1a70:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
    1a74:	8d b7       	in	r24, 0x3d	; 61
    1a76:	9e b7       	in	r25, 0x3e	; 62
    1a78:	0e 96       	adiw	r24, 0x0e	; 14
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	9e bf       	out	0x3e, r25	; 62
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	8d bf       	out	0x3d, r24	; 61
    1a84:	1b c0       	rjmp	.+54     	; 0x1abc <processCommand+0x17e>
    1a86:	01 33       	cpi	r16, 0x31	; 49
    1a88:	11 05       	cpc	r17, r1
    1a8a:	79 f4       	brne	.+30     	; 0x1aaa <processCommand+0x16c>
    1a8c:	81 e3       	ldi	r24, 0x31	; 49
    1a8e:	96 e1       	ldi	r25, 0x16	; 22
    1a90:	9f 93       	push	r25
    1a92:	8f 93       	push	r24
    1a94:	8c e3       	ldi	r24, 0x3C	; 60
    1a96:	9b e0       	ldi	r25, 0x0B	; 11
    1a98:	9f 93       	push	r25
    1a9a:	8f 93       	push	r24
    1a9c:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	09 c0       	rjmp	.+18     	; 0x1abc <processCommand+0x17e>
    1aaa:	0f 5f       	subi	r16, 0xFF	; 255
    1aac:	1f 4f       	sbci	r17, 0xFF	; 255
    1aae:	96 e0       	ldi	r25, 0x06	; 6
    1ab0:	89 0e       	add	r8, r25
    1ab2:	91 1c       	adc	r9, r1
    1ab4:	02 33       	cpi	r16, 0x32	; 50
    1ab6:	11 05       	cpc	r17, r1
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <processCommand+0x17e>
    1aba:	a0 cf       	rjmp	.-192    	; 0x19fc <processCommand+0xbe>
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	be be       	out	0x3e, r11	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	ad be       	out	0x3d, r10	; 61
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	ff 90       	pop	r15
    1ad0:	ef 90       	pop	r14
    1ad2:	df 90       	pop	r13
    1ad4:	cf 90       	pop	r12
    1ad6:	bf 90       	pop	r11
    1ad8:	af 90       	pop	r10
    1ada:	9f 90       	pop	r9
    1adc:	8f 90       	pop	r8
    1ade:	08 95       	ret

00001ae0 <pwm_init_PL5>:
    1ae0:	85 e1       	ldi	r24, 0x15	; 21
    1ae2:	9c e0       	ldi	r25, 0x0C	; 12
    1ae4:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
    1ae8:	ea e0       	ldi	r30, 0x0A	; 10
    1aea:	f1 e0       	ldi	r31, 0x01	; 1
    1aec:	80 81       	ld	r24, Z
    1aee:	80 62       	ori	r24, 0x20	; 32
    1af0:	80 83       	st	Z, r24
    1af2:	a0 e2       	ldi	r26, 0x20	; 32
    1af4:	b1 e0       	ldi	r27, 0x01	; 1
    1af6:	8c 91       	ld	r24, X
    1af8:	81 60       	ori	r24, 0x01	; 1
    1afa:	8c 93       	st	X, r24
    1afc:	e1 e2       	ldi	r30, 0x21	; 33
    1afe:	f1 e0       	ldi	r31, 0x01	; 1
    1b00:	80 81       	ld	r24, Z
    1b02:	88 60       	ori	r24, 0x08	; 8
    1b04:	80 83       	st	Z, r24
    1b06:	8c 91       	ld	r24, X
    1b08:	88 60       	ori	r24, 0x08	; 8
    1b0a:	8c 93       	st	X, r24
    1b0c:	80 81       	ld	r24, Z
    1b0e:	81 60       	ori	r24, 0x01	; 1
    1b10:	80 83       	st	Z, r24
    1b12:	85 e1       	ldi	r24, 0x15	; 21
    1b14:	9c e0       	ldi	r25, 0x0C	; 12
    1b16:	0c 94 8f 21 	jmp	0x431e	; 0x431e <puts>
    1b1a:	08 95       	ret

00001b1c <pwm_init_PL3>:
    1b1c:	8b e2       	ldi	r24, 0x2B	; 43
    1b1e:	9c e0       	ldi	r25, 0x0C	; 12
    1b20:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
    1b24:	ea e0       	ldi	r30, 0x0A	; 10
    1b26:	f1 e0       	ldi	r31, 0x01	; 1
    1b28:	80 81       	ld	r24, Z
    1b2a:	88 60       	ori	r24, 0x08	; 8
    1b2c:	80 83       	st	Z, r24
    1b2e:	a0 e2       	ldi	r26, 0x20	; 32
    1b30:	b1 e0       	ldi	r27, 0x01	; 1
    1b32:	8c 91       	ld	r24, X
    1b34:	81 60       	ori	r24, 0x01	; 1
    1b36:	8c 93       	st	X, r24
    1b38:	e1 e2       	ldi	r30, 0x21	; 33
    1b3a:	f1 e0       	ldi	r31, 0x01	; 1
    1b3c:	80 81       	ld	r24, Z
    1b3e:	88 60       	ori	r24, 0x08	; 8
    1b40:	80 83       	st	Z, r24
    1b42:	8c 91       	ld	r24, X
    1b44:	80 68       	ori	r24, 0x80	; 128
    1b46:	8c 93       	st	X, r24
    1b48:	80 81       	ld	r24, Z
    1b4a:	81 60       	ori	r24, 0x01	; 1
    1b4c:	80 83       	st	Z, r24
    1b4e:	8b e2       	ldi	r24, 0x2B	; 43
    1b50:	9c e0       	ldi	r25, 0x0C	; 12
    1b52:	0c 94 8f 21 	jmp	0x431e	; 0x431e <puts>
    1b56:	08 95       	ret

00001b58 <init_sleep_mode>:
    1b58:	83 b7       	in	r24, 0x33	; 51
    1b5a:	84 60       	ori	r24, 0x04	; 4
    1b5c:	83 bf       	out	0x33, r24	; 51
    1b5e:	08 95       	ret

00001b60 <sleep_mode_on>:
    1b60:	61 e4       	ldi	r22, 0x41	; 65
    1b62:	7c e0       	ldi	r23, 0x0C	; 12
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	c8 d7       	rcall	.+3984   	; 0x2afa <uart_puts>
    1b6a:	8f e9       	ldi	r24, 0x9F	; 159
    1b6c:	9f e0       	ldi	r25, 0x0F	; 15
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	f1 f7       	brne	.-4      	; 0x1b6e <sleep_mode_on+0xe>
    1b72:	00 c0       	rjmp	.+0      	; 0x1b74 <sleep_mode_on+0x14>
    1b74:	00 00       	nop
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	80 93 b4 15 	sts	0x15B4, r24	; 0x8015b4 <__data_end>
    1b7c:	ec e6       	ldi	r30, 0x6C	; 108
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	81 60       	ori	r24, 0x01	; 1
    1b84:	80 83       	st	Z, r24
    1b86:	83 b7       	in	r24, 0x33	; 51
    1b88:	81 60       	ori	r24, 0x01	; 1
    1b8a:	83 bf       	out	0x33, r24	; 51
    1b8c:	88 95       	sleep
    1b8e:	83 b7       	in	r24, 0x33	; 51
    1b90:	8e 7f       	andi	r24, 0xFE	; 254
    1b92:	83 bf       	out	0x33, r24	; 51
    1b94:	87 e5       	ldi	r24, 0x57	; 87
    1b96:	9c e0       	ldi	r25, 0x0C	; 12
    1b98:	0c 94 8f 21 	jmp	0x431e	; 0x431e <puts>
    1b9c:	08 95       	ret

00001b9e <Ledinit>:
    1b9e:	8b e6       	ldi	r24, 0x6B	; 107
    1ba0:	9c e0       	ldi	r25, 0x0C	; 12
    1ba2:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
    1ba6:	e7 e0       	ldi	r30, 0x07	; 7
    1ba8:	f1 e0       	ldi	r31, 0x01	; 1
    1baa:	80 81       	ld	r24, Z
    1bac:	80 68       	ori	r24, 0x80	; 128
    1bae:	80 83       	st	Z, r24
    1bb0:	80 81       	ld	r24, Z
    1bb2:	80 64       	ori	r24, 0x40	; 64
    1bb4:	80 83       	st	Z, r24
    1bb6:	80 81       	ld	r24, Z
    1bb8:	80 62       	ori	r24, 0x20	; 32
    1bba:	80 83       	st	Z, r24
    1bbc:	80 81       	ld	r24, Z
    1bbe:	80 61       	ori	r24, 0x10	; 16
    1bc0:	80 83       	st	Z, r24
    1bc2:	80 81       	ld	r24, Z
    1bc4:	88 60       	ori	r24, 0x08	; 8
    1bc6:	80 83       	st	Z, r24
    1bc8:	83 9a       	sbi	0x10, 3	; 16
    1bca:	81 9a       	sbi	0x10, 1	; 16
    1bcc:	9d 9a       	sbi	0x13, 5	; 19
    1bce:	8e e7       	ldi	r24, 0x7E	; 126
    1bd0:	9c e0       	ldi	r25, 0x0C	; 12
    1bd2:	0c 94 8f 21 	jmp	0x431e	; 0x431e <puts>
    1bd6:	08 95       	ret

00001bd8 <LedBlink>:
    1bd8:	88 0f       	add	r24, r24
    1bda:	88 0f       	add	r24, r24
    1bdc:	b1 f1       	breq	.+108    	; 0x1c4a <LedBlink+0x72>
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	e8 e0       	ldi	r30, 0x08	; 8
    1be2:	f1 e0       	ldi	r31, 0x01	; 1
    1be4:	90 81       	ld	r25, Z
    1be6:	90 68       	ori	r25, 0x80	; 128
    1be8:	90 83       	st	Z, r25
    1bea:	90 81       	ld	r25, Z
    1bec:	90 64       	ori	r25, 0x40	; 64
    1bee:	90 83       	st	Z, r25
    1bf0:	90 81       	ld	r25, Z
    1bf2:	90 62       	ori	r25, 0x20	; 32
    1bf4:	90 83       	st	Z, r25
    1bf6:	90 81       	ld	r25, Z
    1bf8:	90 61       	ori	r25, 0x10	; 16
    1bfa:	90 83       	st	Z, r25
    1bfc:	90 81       	ld	r25, Z
    1bfe:	98 60       	ori	r25, 0x08	; 8
    1c00:	90 83       	st	Z, r25
    1c02:	8b 9a       	sbi	0x11, 3	; 17
    1c04:	89 9a       	sbi	0x11, 1	; 17
    1c06:	a5 9a       	sbi	0x14, 5	; 20
    1c08:	af e5       	ldi	r26, 0x5F	; 95
    1c0a:	ba ee       	ldi	r27, 0xEA	; 234
    1c0c:	11 97       	sbiw	r26, 0x01	; 1
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <LedBlink+0x34>
    1c10:	00 c0       	rjmp	.+0      	; 0x1c12 <LedBlink+0x3a>
    1c12:	00 00       	nop
    1c14:	90 81       	ld	r25, Z
    1c16:	9f 77       	andi	r25, 0x7F	; 127
    1c18:	90 83       	st	Z, r25
    1c1a:	90 81       	ld	r25, Z
    1c1c:	9f 7b       	andi	r25, 0xBF	; 191
    1c1e:	90 83       	st	Z, r25
    1c20:	90 81       	ld	r25, Z
    1c22:	9f 7d       	andi	r25, 0xDF	; 223
    1c24:	90 83       	st	Z, r25
    1c26:	90 81       	ld	r25, Z
    1c28:	9f 7e       	andi	r25, 0xEF	; 239
    1c2a:	90 83       	st	Z, r25
    1c2c:	90 81       	ld	r25, Z
    1c2e:	97 7f       	andi	r25, 0xF7	; 247
    1c30:	90 83       	st	Z, r25
    1c32:	8b 98       	cbi	0x11, 3	; 17
    1c34:	89 98       	cbi	0x11, 1	; 17
    1c36:	a5 98       	cbi	0x14, 5	; 20
    1c38:	af e5       	ldi	r26, 0x5F	; 95
    1c3a:	ba ee       	ldi	r27, 0xEA	; 234
    1c3c:	11 97       	sbiw	r26, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <LedBlink+0x64>
    1c40:	00 c0       	rjmp	.+0      	; 0x1c42 <LedBlink+0x6a>
    1c42:	00 00       	nop
    1c44:	2f 5f       	subi	r18, 0xFF	; 255
    1c46:	82 13       	cpse	r24, r18
    1c48:	cd cf       	rjmp	.-102    	; 0x1be4 <LedBlink+0xc>
    1c4a:	08 95       	ret

00001c4c <LedControl>:
    1c4c:	61 30       	cpi	r22, 0x01	; 1
    1c4e:	a1 f5       	brne	.+104    	; 0x1cb8 <LedControl+0x6c>
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	88 30       	cpi	r24, 0x08	; 8
    1c54:	91 05       	cpc	r25, r1
    1c56:	58 f5       	brcc	.+86     	; 0x1cae <LedControl+0x62>
    1c58:	fc 01       	movw	r30, r24
    1c5a:	88 27       	eor	r24, r24
    1c5c:	ee 58       	subi	r30, 0x8E	; 142
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	8f 4f       	sbci	r24, 0xFF	; 255
    1c62:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__tablejump2__>
    1c66:	e8 e0       	ldi	r30, 0x08	; 8
    1c68:	f1 e0       	ldi	r31, 0x01	; 1
    1c6a:	80 81       	ld	r24, Z
    1c6c:	80 68       	ori	r24, 0x80	; 128
    1c6e:	80 83       	st	Z, r24
    1c70:	08 95       	ret
    1c72:	e8 e0       	ldi	r30, 0x08	; 8
    1c74:	f1 e0       	ldi	r31, 0x01	; 1
    1c76:	80 81       	ld	r24, Z
    1c78:	80 64       	ori	r24, 0x40	; 64
    1c7a:	80 83       	st	Z, r24
    1c7c:	08 95       	ret
    1c7e:	e8 e0       	ldi	r30, 0x08	; 8
    1c80:	f1 e0       	ldi	r31, 0x01	; 1
    1c82:	80 81       	ld	r24, Z
    1c84:	80 62       	ori	r24, 0x20	; 32
    1c86:	80 83       	st	Z, r24
    1c88:	08 95       	ret
    1c8a:	e8 e0       	ldi	r30, 0x08	; 8
    1c8c:	f1 e0       	ldi	r31, 0x01	; 1
    1c8e:	80 81       	ld	r24, Z
    1c90:	80 61       	ori	r24, 0x10	; 16
    1c92:	80 83       	st	Z, r24
    1c94:	08 95       	ret
    1c96:	e8 e0       	ldi	r30, 0x08	; 8
    1c98:	f1 e0       	ldi	r31, 0x01	; 1
    1c9a:	80 81       	ld	r24, Z
    1c9c:	88 60       	ori	r24, 0x08	; 8
    1c9e:	80 83       	st	Z, r24
    1ca0:	08 95       	ret
    1ca2:	8b 9a       	sbi	0x11, 3	; 17
    1ca4:	08 95       	ret
    1ca6:	89 9a       	sbi	0x11, 1	; 17
    1ca8:	08 95       	ret
    1caa:	a5 9a       	sbi	0x14, 5	; 20
    1cac:	08 95       	ret
    1cae:	82 e9       	ldi	r24, 0x92	; 146
    1cb0:	9c e0       	ldi	r25, 0x0C	; 12
    1cb2:	0c 94 8f 21 	jmp	0x431e	; 0x431e <puts>
    1cb6:	08 95       	ret
    1cb8:	61 11       	cpse	r22, r1
    1cba:	34 c0       	rjmp	.+104    	; 0x1d24 <LedControl+0xd8>
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	88 30       	cpi	r24, 0x08	; 8
    1cc0:	91 05       	cpc	r25, r1
    1cc2:	58 f5       	brcc	.+86     	; 0x1d1a <LedControl+0xce>
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	88 27       	eor	r24, r24
    1cc8:	e6 58       	subi	r30, 0x86	; 134
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	8f 4f       	sbci	r24, 0xFF	; 255
    1cce:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__tablejump2__>
    1cd2:	e8 e0       	ldi	r30, 0x08	; 8
    1cd4:	f1 e0       	ldi	r31, 0x01	; 1
    1cd6:	80 81       	ld	r24, Z
    1cd8:	8f 77       	andi	r24, 0x7F	; 127
    1cda:	80 83       	st	Z, r24
    1cdc:	08 95       	ret
    1cde:	e8 e0       	ldi	r30, 0x08	; 8
    1ce0:	f1 e0       	ldi	r31, 0x01	; 1
    1ce2:	80 81       	ld	r24, Z
    1ce4:	8f 7b       	andi	r24, 0xBF	; 191
    1ce6:	80 83       	st	Z, r24
    1ce8:	08 95       	ret
    1cea:	e8 e0       	ldi	r30, 0x08	; 8
    1cec:	f1 e0       	ldi	r31, 0x01	; 1
    1cee:	80 81       	ld	r24, Z
    1cf0:	8f 7d       	andi	r24, 0xDF	; 223
    1cf2:	80 83       	st	Z, r24
    1cf4:	08 95       	ret
    1cf6:	e8 e0       	ldi	r30, 0x08	; 8
    1cf8:	f1 e0       	ldi	r31, 0x01	; 1
    1cfa:	80 81       	ld	r24, Z
    1cfc:	8f 7e       	andi	r24, 0xEF	; 239
    1cfe:	80 83       	st	Z, r24
    1d00:	08 95       	ret
    1d02:	e8 e0       	ldi	r30, 0x08	; 8
    1d04:	f1 e0       	ldi	r31, 0x01	; 1
    1d06:	80 81       	ld	r24, Z
    1d08:	87 7f       	andi	r24, 0xF7	; 247
    1d0a:	80 83       	st	Z, r24
    1d0c:	08 95       	ret
    1d0e:	8b 98       	cbi	0x11, 3	; 17
    1d10:	08 95       	ret
    1d12:	89 98       	cbi	0x11, 1	; 17
    1d14:	08 95       	ret
    1d16:	a5 98       	cbi	0x14, 5	; 20
    1d18:	08 95       	ret
    1d1a:	87 ec       	ldi	r24, 0xC7	; 199
    1d1c:	9c e0       	ldi	r25, 0x0C	; 12
    1d1e:	0c 94 8f 21 	jmp	0x431e	; 0x431e <puts>
    1d22:	08 95       	ret
    1d24:	8a ef       	ldi	r24, 0xFA	; 250
    1d26:	9c e0       	ldi	r25, 0x0C	; 12
    1d28:	0c 94 8f 21 	jmp	0x431e	; 0x431e <puts>
    1d2c:	08 95       	ret

00001d2e <sampleTest>:
    1d2e:	cf 92       	push	r12
    1d30:	df 92       	push	r13
    1d32:	ef 92       	push	r14
    1d34:	ff 92       	push	r15
    1d36:	0f 93       	push	r16
    1d38:	1f 93       	push	r17
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	68 e2       	ldi	r22, 0x28	; 40
    1d40:	7d e0       	ldi	r23, 0x0D	; 13
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	d9 d6       	rcall	.+3506   	; 0x2afa <uart_puts>
    1d48:	66 e4       	ldi	r22, 0x46	; 70
    1d4a:	7d e0       	ldi	r23, 0x0D	; 13
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	d4 d6       	rcall	.+3496   	; 0x2afa <uart_puts>
    1d52:	c3 e0       	ldi	r28, 0x03	; 3
    1d54:	d0 e0       	ldi	r29, 0x00	; 0
    1d56:	2f d6       	rcall	.+3166   	; 0x29b6 <inlet_valve_denergise>
    1d58:	2f ef       	ldi	r18, 0xFF	; 255
    1d5a:	80 e7       	ldi	r24, 0x70	; 112
    1d5c:	92 e0       	ldi	r25, 0x02	; 2
    1d5e:	21 50       	subi	r18, 0x01	; 1
    1d60:	80 40       	sbci	r24, 0x00	; 0
    1d62:	90 40       	sbci	r25, 0x00	; 0
    1d64:	e1 f7       	brne	.-8      	; 0x1d5e <sampleTest+0x30>
    1d66:	00 c0       	rjmp	.+0      	; 0x1d68 <sampleTest+0x3a>
    1d68:	00 00       	nop
    1d6a:	8c e5       	ldi	r24, 0x5C	; 92
    1d6c:	9d e0       	ldi	r25, 0x0D	; 13
    1d6e:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
    1d72:	2a d6       	rcall	.+3156   	; 0x29c8 <inlet_valve_energise>
    1d74:	8c e7       	ldi	r24, 0x7C	; 124
    1d76:	9d e0       	ldi	r25, 0x0D	; 13
    1d78:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
    1d7c:	2f ef       	ldi	r18, 0xFF	; 255
    1d7e:	80 e7       	ldi	r24, 0x70	; 112
    1d80:	92 e0       	ldi	r25, 0x02	; 2
    1d82:	21 50       	subi	r18, 0x01	; 1
    1d84:	80 40       	sbci	r24, 0x00	; 0
    1d86:	90 40       	sbci	r25, 0x00	; 0
    1d88:	e1 f7       	brne	.-8      	; 0x1d82 <sampleTest+0x54>
    1d8a:	00 c0       	rjmp	.+0      	; 0x1d8c <sampleTest+0x5e>
    1d8c:	00 00       	nop
    1d8e:	21 97       	sbiw	r28, 0x01	; 1
    1d90:	11 f7       	brne	.-60     	; 0x1d56 <sampleTest+0x28>
    1d92:	6b e9       	ldi	r22, 0x9B	; 155
    1d94:	7d e0       	ldi	r23, 0x0D	; 13
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	af d6       	rcall	.+3422   	; 0x2afa <uart_puts>
    1d9c:	4f ef       	ldi	r20, 0xFF	; 255
    1d9e:	50 e0       	ldi	r21, 0x00	; 0
    1da0:	61 e0       	ldi	r22, 0x01	; 1
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	62 d4       	rcall	.+2244   	; 0x266a <MotordriverRun>
    1da6:	2f ef       	ldi	r18, 0xFF	; 255
    1da8:	8e e9       	ldi	r24, 0x9E	; 158
    1daa:	94 e2       	ldi	r25, 0x24	; 36
    1dac:	21 50       	subi	r18, 0x01	; 1
    1dae:	80 40       	sbci	r24, 0x00	; 0
    1db0:	90 40       	sbci	r25, 0x00	; 0
    1db2:	e1 f7       	brne	.-8      	; 0x1dac <sampleTest+0x7e>
    1db4:	00 c0       	rjmp	.+0      	; 0x1db6 <sampleTest+0x88>
    1db6:	00 00       	nop
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	75 d4       	rcall	.+2282   	; 0x26a6 <MotordriverStop>
    1dbc:	2f ef       	ldi	r18, 0xFF	; 255
    1dbe:	89 e6       	ldi	r24, 0x69	; 105
    1dc0:	98 e1       	ldi	r25, 0x18	; 24
    1dc2:	21 50       	subi	r18, 0x01	; 1
    1dc4:	80 40       	sbci	r24, 0x00	; 0
    1dc6:	90 40       	sbci	r25, 0x00	; 0
    1dc8:	e1 f7       	brne	.-8      	; 0x1dc2 <sampleTest+0x94>
    1dca:	00 c0       	rjmp	.+0      	; 0x1dcc <sampleTest+0x9e>
    1dcc:	00 00       	nop
    1dce:	4f ef       	ldi	r20, 0xFF	; 255
    1dd0:	50 e0       	ldi	r21, 0x00	; 0
    1dd2:	60 e0       	ldi	r22, 0x00	; 0
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	49 d4       	rcall	.+2194   	; 0x266a <MotordriverRun>
    1dd8:	2f ef       	ldi	r18, 0xFF	; 255
    1dda:	8e e9       	ldi	r24, 0x9E	; 158
    1ddc:	94 e2       	ldi	r25, 0x24	; 36
    1dde:	21 50       	subi	r18, 0x01	; 1
    1de0:	80 40       	sbci	r24, 0x00	; 0
    1de2:	90 40       	sbci	r25, 0x00	; 0
    1de4:	e1 f7       	brne	.-8      	; 0x1dde <sampleTest+0xb0>
    1de6:	00 c0       	rjmp	.+0      	; 0x1de8 <sampleTest+0xba>
    1de8:	00 00       	nop
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	5c d4       	rcall	.+2232   	; 0x26a6 <MotordriverStop>
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	8d d4       	rcall	.+2330   	; 0x270c <ReadPressure>
    1df2:	f6 2e       	mov	r15, r22
    1df4:	e7 2e       	mov	r14, r23
    1df6:	d8 2e       	mov	r13, r24
    1df8:	c9 2e       	mov	r12, r25
    1dfa:	82 e0       	ldi	r24, 0x02	; 2
    1dfc:	87 d4       	rcall	.+2318   	; 0x270c <ReadPressure>
    1dfe:	c6 2f       	mov	r28, r22
    1e00:	d7 2f       	mov	r29, r23
    1e02:	18 2f       	mov	r17, r24
    1e04:	09 2f       	mov	r16, r25
    1e06:	81 e4       	ldi	r24, 0x41	; 65
    1e08:	8f 93       	push	r24
    1e0a:	80 e8       	ldi	r24, 0x80	; 128
    1e0c:	8f 93       	push	r24
    1e0e:	1f 92       	push	r1
    1e10:	1f 92       	push	r1
    1e12:	cf 92       	push	r12
    1e14:	df 92       	push	r13
    1e16:	ef 92       	push	r14
    1e18:	ff 92       	push	r15
    1e1a:	8a ea       	ldi	r24, 0xAA	; 170
    1e1c:	9d e0       	ldi	r25, 0x0D	; 13
    1e1e:	9f 93       	push	r25
    1e20:	8f 93       	push	r24
    1e22:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
    1e26:	82 e4       	ldi	r24, 0x42	; 66
    1e28:	8f 93       	push	r24
    1e2a:	80 e7       	ldi	r24, 0x70	; 112
    1e2c:	8f 93       	push	r24
    1e2e:	1f 92       	push	r1
    1e30:	1f 92       	push	r1
    1e32:	0f 93       	push	r16
    1e34:	1f 93       	push	r17
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	8c ed       	ldi	r24, 0xDC	; 220
    1e3c:	9d e0       	ldi	r25, 0x0D	; 13
    1e3e:	9f 93       	push	r25
    1e40:	8f 93       	push	r24
    1e42:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
    1e46:	60 e0       	ldi	r22, 0x00	; 0
    1e48:	82 e0       	ldi	r24, 0x02	; 2
    1e4a:	00 df       	rcall	.-512    	; 0x1c4c <LedControl>
    1e4c:	67 e0       	ldi	r22, 0x07	; 7
    1e4e:	7e e0       	ldi	r23, 0x0E	; 14
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	52 d6       	rcall	.+3236   	; 0x2afa <uart_puts>
    1e56:	8d b7       	in	r24, 0x3d	; 61
    1e58:	9e b7       	in	r25, 0x3e	; 62
    1e5a:	44 96       	adiw	r24, 0x14	; 20
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	9e bf       	out	0x3e, r25	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	8d bf       	out	0x3d, r24	; 61
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	df 91       	pop	r29
    1e6c:	cf 91       	pop	r28
    1e6e:	1f 91       	pop	r17
    1e70:	0f 91       	pop	r16
    1e72:	ff 90       	pop	r15
    1e74:	ef 90       	pop	r14
    1e76:	df 90       	pop	r13
    1e78:	cf 90       	pop	r12
    1e7a:	08 95       	ret

00001e7c <LedAllOFF>:
    1e7c:	e8 e0       	ldi	r30, 0x08	; 8
    1e7e:	f1 e0       	ldi	r31, 0x01	; 1
    1e80:	80 81       	ld	r24, Z
    1e82:	8f 77       	andi	r24, 0x7F	; 127
    1e84:	80 83       	st	Z, r24
    1e86:	80 81       	ld	r24, Z
    1e88:	8f 7b       	andi	r24, 0xBF	; 191
    1e8a:	80 83       	st	Z, r24
    1e8c:	80 81       	ld	r24, Z
    1e8e:	8f 7d       	andi	r24, 0xDF	; 223
    1e90:	80 83       	st	Z, r24
    1e92:	80 81       	ld	r24, Z
    1e94:	8f 7e       	andi	r24, 0xEF	; 239
    1e96:	80 83       	st	Z, r24
    1e98:	80 81       	ld	r24, Z
    1e9a:	87 7f       	andi	r24, 0xF7	; 247
    1e9c:	80 83       	st	Z, r24
    1e9e:	8b 98       	cbi	0x11, 3	; 17
    1ea0:	89 98       	cbi	0x11, 1	; 17
    1ea2:	a5 98       	cbi	0x14, 5	; 20
    1ea4:	08 95       	ret

00001ea6 <printModeflags>:
}


void printModeflags(void){
	#ifndef LOGGING_ENABLE
		uart_puts(0,"modeFlags = ");                          // to test
    1ea6:	6f ed       	ldi	r22, 0xDF	; 223
    1ea8:	7e e0       	ldi	r23, 0x0E	; 14
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	25 d6       	rcall	.+3146   	; 0x2afa <uart_puts>
		uart_printBinaryByte(0,modeFlags);
    1eb0:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <modeFlags>
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	b9 d6       	rcall	.+3442   	; 0x2c2c <uart_printBinaryByte>
		uart_puts(0,"\r\n");
    1eba:	6a e8       	ldi	r22, 0x8A	; 138
    1ebc:	7f e0       	ldi	r23, 0x0F	; 15
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	1b c6       	rjmp	.+3126   	; 0x2afa <uart_puts>
    1ec4:	08 95       	ret

00001ec6 <__vector_6>:
}



/*	This INT toggles the run/start button flags */
ISR (RUN_BUTTON_INT){  
    1ec6:	1f 92       	push	r1
    1ec8:	0f 92       	push	r0
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	0f 92       	push	r0
    1ece:	11 24       	eor	r1, r1
    1ed0:	0b b6       	in	r0, 0x3b	; 59
    1ed2:	0f 92       	push	r0
    1ed4:	2f 93       	push	r18
    1ed6:	3f 93       	push	r19
    1ed8:	4f 93       	push	r20
    1eda:	5f 93       	push	r21
    1edc:	6f 93       	push	r22
    1ede:	7f 93       	push	r23
    1ee0:	8f 93       	push	r24
    1ee2:	9f 93       	push	r25
    1ee4:	af 93       	push	r26
    1ee6:	bf 93       	push	r27
    1ee8:	ef 93       	push	r30
    1eea:	ff 93       	push	r31
    1eec:	2f ef       	ldi	r18, 0xFF	; 255
    1eee:	84 e3       	ldi	r24, 0x34	; 52
    1ef0:	9c e0       	ldi	r25, 0x0C	; 12
    1ef2:	21 50       	subi	r18, 0x01	; 1
    1ef4:	80 40       	sbci	r24, 0x00	; 0
    1ef6:	90 40       	sbci	r25, 0x00	; 0
    1ef8:	e1 f7       	brne	.-8      	; 0x1ef2 <__vector_6+0x2c>
    1efa:	00 c0       	rjmp	.+0      	; 0x1efc <__vector_6+0x36>
    1efc:	00 00       	nop
	_delay_ms (500);  // this delay stops the int re triggering
	LogDebug("INT5 triggered\r\n");
    1efe:	8c ee       	ldi	r24, 0xEC	; 236
    1f00:	9e e0       	ldi	r25, 0x0E	; 14
    1f02:	3a d9       	rcall	.-3468   	; 0x1178 <LogDebug>
	LogDebug("run button pressed\r\n");
    1f04:	8d ef       	ldi	r24, 0xFD	; 253
    1f06:	9e e0       	ldi	r25, 0x0E	; 14
    1f08:	37 d9       	rcall	.-3474   	; 0x1178 <LogDebug>
	//uart_puts(0, "INT5 triggered\r\n");    //  ***TEST CODE comment out on deployment
	if ((modeFlags & 0b00001000) == 0b00000000) {// if run/start bit is low, set to high
    1f0a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    1f0e:	83 fd       	sbrc	r24, 3
    1f10:	09 c0       	rjmp	.+18     	; 0x1f24 <__vector_6+0x5e>
		modeFlags |= 0b00001000;	// set run/start active
    1f12:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    1f16:	88 60       	ori	r24, 0x08	; 8
    1f18:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
		LogDebug("run/start mode on\r\n");
    1f1c:	82 e1       	ldi	r24, 0x12	; 18
    1f1e:	9f e0       	ldi	r25, 0x0F	; 15
    1f20:	2b d9       	rcall	.-3498   	; 0x1178 <LogDebug>
    1f22:	08 c0       	rjmp	.+16     	; 0x1f34 <__vector_6+0x6e>
		//printf("run/start mode on\r\n");    //  ***TEST CODE comment out on deployment
	}
	else {									// if run/start active, set to low
		modeFlags &= ~(0b00001000);	
    1f24:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    1f28:	87 7f       	andi	r24, 0xF7	; 247
    1f2a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
		LogDebug("run/start mode off\r\n");
    1f2e:	86 e2       	ldi	r24, 0x26	; 38
    1f30:	9f e0       	ldi	r25, 0x0F	; 15
		//printf("run/start mode off\r\n");    //  ***TEST CODE comment out on deployment
	}
	printModeflags();
    1f32:	22 d9       	rcall	.-3516   	; 0x1178 <LogDebug>
    1f34:	b8 df       	rcall	.-144    	; 0x1ea6 <printModeflags>
}
    1f36:	ff 91       	pop	r31
    1f38:	ef 91       	pop	r30
    1f3a:	bf 91       	pop	r27
    1f3c:	af 91       	pop	r26
    1f3e:	9f 91       	pop	r25
    1f40:	8f 91       	pop	r24
    1f42:	7f 91       	pop	r23
    1f44:	6f 91       	pop	r22
    1f46:	5f 91       	pop	r21
    1f48:	4f 91       	pop	r20
    1f4a:	3f 91       	pop	r19
    1f4c:	2f 91       	pop	r18
    1f4e:	0f 90       	pop	r0
    1f50:	0b be       	out	0x3b, r0	; 59
    1f52:	0f 90       	pop	r0
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	0f 90       	pop	r0
    1f58:	1f 90       	pop	r1
    1f5a:	18 95       	reti

00001f5c <__vector_5>:
	

/*	This INT is triggered by the mode button, cycles between mode 0...NUMBER_OF_MODESINT 	*/
ISR(MODE_BUTTON_INT) {  
    1f5c:	1f 92       	push	r1
    1f5e:	0f 92       	push	r0
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	0f 92       	push	r0
    1f64:	11 24       	eor	r1, r1
    1f66:	0b b6       	in	r0, 0x3b	; 59
    1f68:	0f 92       	push	r0
    1f6a:	2f 93       	push	r18
    1f6c:	3f 93       	push	r19
    1f6e:	4f 93       	push	r20
    1f70:	5f 93       	push	r21
    1f72:	6f 93       	push	r22
    1f74:	7f 93       	push	r23
    1f76:	8f 93       	push	r24
    1f78:	9f 93       	push	r25
    1f7a:	af 93       	push	r26
    1f7c:	bf 93       	push	r27
    1f7e:	ef 93       	push	r30
    1f80:	ff 93       	push	r31
    1f82:	2f ef       	ldi	r18, 0xFF	; 255
    1f84:	84 e3       	ldi	r24, 0x34	; 52
    1f86:	9c e0       	ldi	r25, 0x0C	; 12
    1f88:	21 50       	subi	r18, 0x01	; 1
    1f8a:	80 40       	sbci	r24, 0x00	; 0
    1f8c:	90 40       	sbci	r25, 0x00	; 0
    1f8e:	e1 f7       	brne	.-8      	; 0x1f88 <__vector_5+0x2c>
    1f90:	00 c0       	rjmp	.+0      	; 0x1f92 <__vector_5+0x36>
    1f92:	00 00       	nop
	_delay_ms (500); //this delay stops the int re triggering
	//uart_puts(0," MOBI sample mode button pressed \r\n**INT7 ISR Triggered\r\n");    //  ***TEST CODE comment out on deployment
	LogDebug("Mode button pressed\r\n");
    1f94:	8b e3       	ldi	r24, 0x3B	; 59
    1f96:	9f e0       	ldi	r25, 0x0F	; 15
    1f98:	ef d8       	rcall	.-3618   	; 0x1178 <LogDebug>
	modeFlags &= ~(0b00001000);	//clear the mode active/start bit so it doesnt trigger when going into a new mode
    1f9a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    1f9e:	87 7f       	andi	r24, 0xF7	; 247
    1fa0:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
	if ((modeFlags & 0b00000111) < NUMBER_OF_MODES ){  // if the modeflags is less than the max number of modes
    1fa4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    1fa8:	87 70       	andi	r24, 0x07	; 7
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	07 97       	sbiw	r24, 0x07	; 7
    1fae:	34 f4       	brge	.+12     	; 0x1fbc <__vector_5+0x60>
		modeFlags += 0b00000001;	//increment to the next mode
    1fb0:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    1fb4:	8f 5f       	subi	r24, 0xFF	; 255
    1fb6:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
    1fba:	0a c0       	rjmp	.+20     	; 0x1fd0 <__vector_5+0x74>
	}
	else if ((modeFlags & 0b00000111) == NUMBER_OF_MODES ){		// if the max number of modes has been reached
    1fbc:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    1fc0:	87 70       	andi	r24, 0x07	; 7
    1fc2:	87 30       	cpi	r24, 0x07	; 7
    1fc4:	29 f4       	brne	.+10     	; 0x1fd0 <__vector_5+0x74>
		modeFlags &= ~(0b00000111);		// return the 3LSB to 0b000
    1fc6:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    1fca:	88 7f       	andi	r24, 0xF8	; 248
    1fcc:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
	}
 	printModeflags();
    1fd0:	6a df       	rcall	.-300    	; 0x1ea6 <printModeflags>
}
    1fd2:	ff 91       	pop	r31
    1fd4:	ef 91       	pop	r30
    1fd6:	bf 91       	pop	r27
    1fd8:	af 91       	pop	r26
    1fda:	9f 91       	pop	r25
    1fdc:	8f 91       	pop	r24
    1fde:	7f 91       	pop	r23
    1fe0:	6f 91       	pop	r22
    1fe2:	5f 91       	pop	r21
    1fe4:	4f 91       	pop	r20
    1fe6:	3f 91       	pop	r19
    1fe8:	2f 91       	pop	r18
    1fea:	0f 90       	pop	r0
    1fec:	0b be       	out	0x3b, r0	; 59
    1fee:	0f 90       	pop	r0
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	0f 90       	pop	r0
    1ff4:	1f 90       	pop	r1
    1ff6:	18 95       	reti

00001ff8 <main>:


// ********************************************************************************
// Main
// ********************************************************************************
int main(void){
    1ff8:	cf 93       	push	r28
    1ffa:	df 93       	push	r29
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	cd 55       	subi	r28, 0x5D	; 93
    2002:	d1 09       	sbc	r29, r1
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	de bf       	out	0x3e, r29	; 62
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	cd bf       	out	0x3d, r28	; 61
	
	// -------- Inits --------- //	
    init_UART(0);//USART init, this is used for pc commuication via the puts and printf functions
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	87 d5       	rcall	.+2830   	; 0x2b22 <init_UART>
	uart_puts(0, "\r\nOneShot  Startup Sequence\r\n");//startup text to UART
    2014:	61 e5       	ldi	r22, 0x51	; 81
    2016:	7f e0       	ldi	r23, 0x0F	; 15
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	6e d5       	rcall	.+2780   	; 0x2afa <uart_puts>
	uart_puts(0, "Firmware Version  ");
    201e:	6f e6       	ldi	r22, 0x6F	; 111
    2020:	7f e0       	ldi	r23, 0x0F	; 15
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	69 d5       	rcall	.+2770   	; 0x2afa <uart_puts>
	uart_puts(0, firmware_version);
    2028:	62 e8       	ldi	r22, 0x82	; 130
    202a:	7f e0       	ldi	r23, 0x0F	; 15
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	64 d5       	rcall	.+2760   	; 0x2afa <uart_puts>
	uart_puts(0, "\r\n\r\n");
    2032:	68 e8       	ldi	r22, 0x88	; 136
    2034:	7f e0       	ldi	r23, 0x0F	; 15
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	90 e0       	ldi	r25, 0x00	; 0
	/* initialize display, cursor off */
	#ifdef LCD_ENABLE
		lcd_init(LCD_DISP_ON);
	#endif
	//init_push_buttons(); // sets pullups on the active low schmitt trigger 
	Ledinit();  //init peripherals etc
    203a:	5f d5       	rcall	.+2750   	; 0x2afa <uart_puts>
	initI2C();
    203c:	b0 dd       	rcall	.-1184   	; 0x1b9e <Ledinit>
	//InitLogging(); // defaults to VERBOSE logging (in logging.c global variable), this will need to be user modifiable with software and hardware eventually	
	DS3231_init();
    203e:	0e 94 ff 07 	call	0xffe	; 0xffe <initI2C>
	PressureSensorInit();	
	spi_init_master();
    2042:	0e 94 1d 03 	call	0x63a	; 0x63a <DS3231_init>
	pwm_init_PL5();	// initialise pwm for the valve driver
    2046:	42 d3       	rcall	.+1668   	; 0x26cc <PressureSensorInit>
	pwm_init_PL3();  // initialise pwm for the motor driver 
    2048:	43 d5       	rcall	.+2694   	; 0x2ad0 <spi_init_master>
    204a:	4a dd       	rcall	.-1388   	; 0x1ae0 <pwm_init_PL5>
	init_sleep_mode();
    204c:	67 dd       	rcall	.-1330   	; 0x1b1c <pwm_init_PL3>
    204e:	84 dd       	rcall	.-1272   	; 0x1b58 <init_sleep_mode>
	init_interrupts();	// this has been moved up from immediately before the sleep while loop below,if there are any interrupt issues  this may need to go back down 
    2050:	51 dc       	rcall	.-1886   	; 0x18f4 <init_interrupts>
    2052:	f6 d2       	rcall	.+1516   	; 0x2640 <MotordriverInit>
	MotordriverInit();	// initialize motor driver pins as outputs
    2054:	ce 01       	movw	r24, r28
	settings = settings_Load();
    2056:	01 96       	adiw	r24, 0x01	; 1
    2058:	cf d4       	rcall	.+2462   	; 0x29f8 <settings_Load>
    205a:	86 e1       	ldi	r24, 0x16	; 22
    205c:	fe 01       	movw	r30, r28
    205e:	31 96       	adiw	r30, 0x01	; 1
    2060:	a1 ec       	ldi	r26, 0xC1	; 193
    2062:	b5 e1       	ldi	r27, 0x15	; 21
    2064:	01 90       	ld	r0, Z+
    2066:	0d 92       	st	X+, r0
    2068:	8a 95       	dec	r24
    206a:	e1 f7       	brne	.-8      	; 0x2064 <main+0x6c>
    206c:	2a dc       	rcall	.-1964   	; 0x18c2 <settings_Print>
    206e:	8d b7       	in	r24, 0x3d	; 61
	settings_Print();
    2070:	9e b7       	in	r25, 0x3e	; 62
    2072:	86 54       	subi	r24, 0x46	; 70
	v = volume_init(v);
    2074:	91 09       	sbc	r25, r1
    2076:	0f b6       	in	r0, 0x3f	; 63
    2078:	f8 94       	cli
    207a:	9e bf       	out	0x3e, r25	; 62
    207c:	0f be       	out	0x3f, r0	; 63
    207e:	8d bf       	out	0x3d, r24	; 61
    2080:	ad b7       	in	r26, 0x3d	; 61
    2082:	be b7       	in	r27, 0x3e	; 62
    2084:	11 96       	adiw	r26, 0x01	; 1
    2086:	86 e4       	ldi	r24, 0x46	; 70
    2088:	eb ee       	ldi	r30, 0xEB	; 235
    208a:	f5 e1       	ldi	r31, 0x15	; 21
    208c:	01 90       	ld	r0, Z+
    208e:	0d 92       	st	X+, r0
    2090:	8a 95       	dec	r24
    2092:	e1 f7       	brne	.-8      	; 0x208c <main+0x94>
    2094:	ce 01       	movw	r24, r28
    2096:	47 96       	adiw	r24, 0x17	; 23
    2098:	d5 d7       	rcall	.+4010   	; 0x3044 <volume_init>
    209a:	86 e4       	ldi	r24, 0x46	; 70
    209c:	fe 01       	movw	r30, r28
    209e:	77 96       	adiw	r30, 0x17	; 23
    20a0:	ab ee       	ldi	r26, 0xEB	; 235
    20a2:	b5 e1       	ldi	r27, 0x15	; 21
    20a4:	01 90       	ld	r0, Z+
    20a6:	0d 92       	st	X+, r0
    20a8:	8a 95       	dec	r24
    20aa:	e1 f7       	brne	.-8      	; 0x20a4 <main+0xac>
    20ac:	0f b6       	in	r0, 0x3f	; 63
	
	#ifdef LCD_ENABLE
		lcd_init(LCD_DISP_ON); /* initialize LCD display, cursor off */
	#endif
	//INT2_init();		// Initialise the interrupt INT2 code. This is used to send wakeup signals from SoundTrap to AVR via RX1/TNT2
	LedBlink(1); // blinks for x seconds to show activity
    20ae:	f8 94       	cli
    20b0:	de bf       	out	0x3e, r29	; 62
    20b2:	0f be       	out	0x3f, r0	; 63
    20b4:	cd bf       	out	0x3d, r28	; 61
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	8f dd       	rcall	.-1250   	; 0x1bd8 <LedBlink>
    20ba:	0e 94 2c 03 	call	0x658	; 0x658 <printTimestring>
	
 	#ifndef LOGGING_ENABLE  // if logging is not enables, print the time date and alarm. if logging is enables then this will be appended to each message
 		printTimestring();
    20be:	0e 94 9b 03 	call	0x736	; 0x736 <printDatestring>
 		printDatestring();
    20c2:	0e 94 76 05 	call	0xaec	; 0xaec <printAlarm1string>
 		printAlarm1string();
    20c6:	ef de       	rcall	.-546    	; 0x1ea6 <printModeflags>
    20c8:	d9 de       	rcall	.-590    	; 0x1e7c <LedAllOFF>
	
	#ifdef FRAM_ENABLE
		initFRAM();			/* Initialise FRAM. Read last written memory address*/
	#endif
	
	printModeflags();
    20ca:	0e 94 8e 18 	call	0x311c	; 0x311c <pin_change_1_init>
	#ifdef LCD_ENABLE
		lcdStatusLineUpdate("Initialising");
	#endif
	
	// turn off  all LEDs
	LedAllOFF();
    20ce:	0f 2e       	mov	r0, r31
    20d0:	f2 e7       	ldi	r31, 0x72	; 114
			printf ("%5lu\n",flow_net_uL());        // accumulated microlitres
		}
	#endif
	//////////////////////////////////////////////////////////

	pin_change_1_init();	
    20d2:	2f 2e       	mov	r2, r31
    20d4:	f1 e1       	ldi	r31, 0x11	; 17
						{
							case 1  :
							printf("Wash step %i  \r\n", wash_step);
							break; /* optional */
							case 2  :
							printf("Wash step %i - Place inlet in   \r\n", wash_step);
    20d6:	3f 2e       	mov	r3, r31
    20d8:	f0 2d       	mov	r31, r0
    20da:	0f 2e       	mov	r0, r31
    20dc:	f1 e8       	ldi	r31, 0x81	; 129
    20de:	4f 2e       	mov	r4, r31
							break; /* optional */
						}
						//Sample pump on
						inlet_valve_energise();  // open the 3 way inlet valve to the external environment to let sample/bleach water in
						MotordriverRun(SAMPLE_PUMP,COUNTER_CLOCKWISE,255);
						TCCR1B |= (1 << CS12) ; // Set up timer at Fcpu /256
    20e0:	51 2c       	mov	r5, r1
    20e2:	f0 2d       	mov	r31, r0
    20e4:	04 e8       	ldi	r16, 0x84	; 132
    20e6:	10 e0       	ldi	r17, 0x00	; 0
    20e8:	0f 2e       	mov	r0, r31
						TCNT1 = 0; // Reset timer value
    20ea:	f5 e9       	ldi	r31, 0x95	; 149
						
						while (elapsed_seconds < WASH_RUNTHROUGH_TIMEOUT_SECONDS){ // while elapsed time is below cutoff time.
							if ( TCNT1 >= 31249){  // if the counter has reached 1 second worth of ticks
								TCNT1 = 0; // Reset timer value
								elapsed_seconds ++;  // increment the seconds
								printf("elapsed_seconds %i of %i\r\n", elapsed_seconds, WASH_RUNTHROUGH_TIMEOUT_SECONDS);
    20ec:	6f 2e       	mov	r6, r31
    20ee:	f1 e1       	ldi	r31, 0x11	; 17
    20f0:	7f 2e       	mov	r7, r31
    20f2:	f0 2d       	mov	r31, r0
    20f4:	c3 de       	rcall	.-634    	; 0x1e7c <LedAllOFF>
    20f6:	83 b7       	in	r24, 0x33	; 51
	pin_change_1_init();	
	char c = 0, oldChar = 0;

	while (1){
		// goes to sleep on startup or when no other mode is selected
		LedAllOFF();
    20f8:	81 7f       	andi	r24, 0xF1	; 241
    20fa:	84 60       	ori	r24, 0x04	; 4
		#ifdef LCD_ENABLE
			lcdPrintAllLines("Sleep Mode:","Press mode key to","wake","");  // print the first two lines of the lcd
		#endif
		set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    20fc:	83 bf       	out	0x33, r24	; 51
    20fe:	8f e5       	ldi	r24, 0x5F	; 95
    2100:	9a ee       	ldi	r25, 0xEA	; 234
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	f1 f7       	brne	.-4      	; 0x2102 <main+0x10a>
    2106:	00 c0       	rjmp	.+0      	; 0x2108 <main+0x110>
    2108:	00 00       	nop
    210a:	2a dd       	rcall	.-1452   	; 0x1b60 <sleep_mode_on>
    210c:	f1 2c       	mov	r15, r1
		//uart_puts(0,"Sleep mode ON\r\n"); // deprecated code, replaced with logging code
		_delay_ms(30);
		sleep_mode_on();
    210e:	ee 24       	eor	r14, r14
    2110:	e3 94       	inc	r14
					set_sample_volume(0, 10000);
					break;
					
				default:
					uart_puts(0,"Invalid operation mode\r\n");
					PCINT8flag = true;
    2112:	80 91 b6 15 	lds	r24, 0x15B6	; 0x8015b6 <PCINT8flag>
		//sleep_mode();
		//when woken from sleep: turn off sleep enable and check if sleep was interrupted by manual mode or by auto sampling request
		//fram_memory_report();

		getinput:
		if (PCINT8flag)	{ // AVR wakes up if pin changed in RX0 (uart0)
    2116:	88 23       	and	r24, r24
    2118:	a1 f0       	breq	.+40     	; 0x2142 <main+0x14a>
			PCINT8flag = false;			// Reset interrupt flag			
    211a:	10 92 b6 15 	sts	0x15B6, r1	; 0x8015b6 <PCINT8flag>
			puts_P(MAINMENUTEXT); 
    211e:	89 e6       	ldi	r24, 0x69	; 105
    2120:	94 e0       	ldi	r25, 0x04	; 4
    2122:	0e 94 bf 21 	call	0x437e	; 0x437e <puts_P>
			c = USART0_getchar();
    2126:	a4 d5       	rcall	.+2888   	; 0x2c70 <USART0_getchar>
    2128:	f8 2e       	mov	r15, r24
    212a:	6d e8       	ldi	r22, 0x8D	; 141
			uart_puts(0,"Entered: ");
    212c:	7f e0       	ldi	r23, 0x0F	; 15
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	e3 d4       	rcall	.+2502   	; 0x2afa <uart_puts>
    2134:	8f 2d       	mov	r24, r15
    2136:	a5 d5       	rcall	.+2890   	; 0x2c82 <USART0_send>
			USART0_send(c); uart_puts(0,"\r\n");
    2138:	6a e8       	ldi	r22, 0x8A	; 138
    213a:	7f e0       	ldi	r23, 0x0F	; 15
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	dc d4       	rcall	.+2488   	; 0x2afa <uart_puts>
    2142:	ff 20       	and	r15, r15
    2144:	09 f4       	brne	.+2      	; 0x2148 <main+0x150>
    2146:	61 c0       	rjmp	.+194    	; 0x220a <__stack+0xb>
    2148:	93 e3       	ldi	r25, 0x33	; 51
		}
	
		if (c != 0)
    214a:	f9 16       	cp	r15, r25
    214c:	11 f1       	breq	.+68     	; 0x2192 <main+0x19a>
		{
			switch (c)
    214e:	9f 15       	cp	r25, r15
    2150:	38 f0       	brcs	.+14     	; 0x2160 <main+0x168>
    2152:	e1 e3       	ldi	r30, 0x31	; 49
    2154:	fe 16       	cp	r15, r30
    2156:	59 f0       	breq	.+22     	; 0x216e <main+0x176>
    2158:	f2 e3       	ldi	r31, 0x32	; 50
    215a:	ff 16       	cp	r15, r31
    215c:	89 f0       	breq	.+34     	; 0x2180 <main+0x188>
    215e:	39 c0       	rjmp	.+114    	; 0x21d2 <main+0x1da>
    2160:	24 e3       	ldi	r18, 0x34	; 52
    2162:	f2 16       	cp	r15, r18
    2164:	41 f1       	breq	.+80     	; 0x21b6 <main+0x1be>
    2166:	85 e3       	ldi	r24, 0x35	; 53
    2168:	f8 16       	cp	r15, r24
    216a:	71 f1       	breq	.+92     	; 0x21c8 <main+0x1d0>
    216c:	32 c0       	rjmp	.+100    	; 0x21d2 <main+0x1da>
    216e:	67 e9       	ldi	r22, 0x97	; 151
			{
				case '1':
					uart_puts(0,"Manual mode selected\r\n");
    2170:	7f e0       	ldi	r23, 0x0F	; 15
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	c1 d4       	rcall	.+2434   	; 0x2afa <uart_puts>
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
					modeFlags = 0b00000001;				
					break;
    217e:	47 c2       	rjmp	.+1166   	; 0x260e <__stack+0x40f>
					
				case '2':
					uart_puts(0,"Test mode selected\r\n");
    2180:	6e ea       	ldi	r22, 0xAE	; 174
    2182:	7f e0       	ldi	r23, 0x0F	; 15
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	b8 d4       	rcall	.+2416   	; 0x2afa <uart_puts>
    218a:	82 e0       	ldi	r24, 0x02	; 2
					modeFlags = 0b00000010;
    218c:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
					break;
    2190:	3e c2       	rjmp	.+1148   	; 0x260e <__stack+0x40f>
					
				case '3':
					uart_puts(0,"Sample collection mode selected\r\n");
    2192:	63 ec       	ldi	r22, 0xC3	; 195
    2194:	7f e0       	ldi	r23, 0x0F	; 15
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	af d4       	rcall	.+2398   	; 0x2afa <uart_puts>
					modeFlags = 0b00000011;
    219c:	83 e0       	ldi	r24, 0x03	; 3
    219e:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
					goto getinput;
					break;
			}
			oldChar = c;
			
			uart_puts(0,"\r\nDo you want to run after mode settings? (y/n)\r\n");
    21a2:	65 ee       	ldi	r22, 0xE5	; 229
    21a4:	7f e0       	ldi	r23, 0x0F	; 15
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	a7 d4       	rcall	.+2382   	; 0x2afa <uart_puts>
			c = USART0_getchar();
    21ac:	61 d5       	rcall	.+2754   	; 0x2c70 <USART0_getchar>
    21ae:	89 37       	cpi	r24, 0x79	; 121
			if (c == 'y' || c == 'Y')
    21b0:	09 f0       	breq	.+2      	; 0x21b4 <main+0x1bc>
    21b2:	42 c2       	rjmp	.+1156   	; 0x2638 <__stack+0x439>
    21b4:	16 c2       	rjmp	.+1068   	; 0x25e2 <__stack+0x3e3>
    21b6:	67 e1       	ldi	r22, 0x17	; 23
					uart_puts(0,"Sample collection mode selected\r\n");
					modeFlags = 0b00000011;
					break;
					
				case '4':
					uart_puts(0,"Clean mode selected\r\n");
    21b8:	70 e1       	ldi	r23, 0x10	; 16
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	9d d4       	rcall	.+2362   	; 0x2afa <uart_puts>
    21c0:	84 e0       	ldi	r24, 0x04	; 4
					modeFlags = 0b00000100;
    21c2:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
    21c6:	23 c2       	rjmp	.+1094   	; 0x260e <__stack+0x40f>
					break;
    21c8:	60 e1       	ldi	r22, 0x10	; 16
					
				case '5':
					set_sample_volume(0, 10000);
    21ca:	77 e2       	ldi	r23, 0x27	; 39
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	a8 d5       	rcall	.+2896   	; 0x2d20 <set_sample_volume>
    21d0:	1e c2       	rjmp	.+1084   	; 0x260e <__stack+0x40f>
    21d2:	6d e2       	ldi	r22, 0x2D	; 45
					break;
    21d4:	70 e1       	ldi	r23, 0x10	; 16
					
				default:
					uart_puts(0,"Invalid operation mode\r\n");
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	8f d4       	rcall	.+2334   	; 0x2afa <uart_puts>
    21dc:	e0 92 b6 15 	sts	0x15B6, r14	; 0x8015b6 <PCINT8flag>
    21e0:	98 cf       	rjmp	.-208    	; 0x2112 <main+0x11a>
					PCINT8flag = true;
    21e2:	89 35       	cpi	r24, 0x59	; 89
					goto getinput;
    21e4:	91 f4       	brne	.+36     	; 0x220a <__stack+0xb>
			}
			oldChar = c;
			
			uart_puts(0,"\r\nDo you want to run after mode settings? (y/n)\r\n");
			c = USART0_getchar();
			if (c == 'y' || c == 'Y')
    21e6:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
			{
				modeFlags |= 0b00001000;
    21ea:	88 60       	ori	r24, 0x08	; 8
    21ec:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
				uart_puts(0,"Automatically run after mode settings\r\n");
    21f0:	66 e4       	ldi	r22, 0x46	; 70
    21f2:	70 e1       	ldi	r23, 0x10	; 16
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	80 d4       	rcall	.+2304   	; 0x2afa <uart_puts>
				if (oldChar == '3')	// run sample mode
    21fa:	93 e3       	ldi	r25, 0x33	; 51
    21fc:	f9 12       	cpse	r15, r25
    21fe:	05 c0       	rjmp	.+10     	; 0x220a <__stack+0xb>
				{
					modeFlags |= 0b10000000;
    2200:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    2204:	80 68       	ori	r24, 0x80	; 128
    2206:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
		
		
		

		// manual mode
		if ((modeFlags & 0b00000111) == 0b00000001){			// *** MANUAL MODE *** test 3LSB --> 001= manual mode
    220a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    220e:	87 70       	andi	r24, 0x07	; 7
    2210:	81 30       	cpi	r24, 0x01	; 1
    2212:	09 f5       	brne	.+66     	; 0x2256 <__stack+0x57>
			#endif
			#ifdef LOGGING_ENABLE
				LogInfo("Manual Mode, enter command:\r\n");
			#endif
			#ifndef LOGGING_ENABLE
				uart_puts(0,"\r\nManual mode ON - Enter Command: ");
    2214:	6e e6       	ldi	r22, 0x6E	; 110
    2216:	70 e1       	ldi	r23, 0x10	; 16
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	6e d4       	rcall	.+2268   	; 0x2afa <uart_puts>
			#endif
			
			LedControl(LED_MANUAL_MODE,ON);
    221e:	61 e0       	ldi	r22, 0x01	; 1
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	14 dd       	rcall	.-1496   	; 0x1c4c <LedControl>
			//*** MANUAL MODE CODE ***
			while((modeFlags & 0b00000111) == 0b00000001) {				// test if manual modes flags are still set, will stop loop if isr (manual mode switch) toggles manual mode off
    2224:	0a c0       	rjmp	.+20     	; 0x223a <__stack+0x3b>
				//uart_puts(0,"uart command processor code loop\r\n");			//  ***TEST CODE comment out on deployment
				if (command_ready == TRUE) {
    2226:	80 91 35 16 	lds	r24, 0x1635	; 0x801635 <command_ready>
    222a:	81 30       	cpi	r24, 0x01	; 1
    222c:	31 f4       	brne	.+12     	; 0x223a <__stack+0x3b>
					//uart_puts(0,"manual mode found a command ready from ISR\r\n");		//  ***TEST CODE comment out on deployment
					copy_command ();// Here is where we will copy
    222e:	74 db       	rcall	.-2328   	; 0x1918 <copy_command>
    2230:	88 ed       	ldi	r24, 0xD8	; 216
					processCommand((void *)command_in);// and parse the command.
    2232:	95 e1       	ldi	r25, 0x15	; 21
    2234:	84 db       	rcall	.-2296   	; 0x193e <processCommand>
    2236:	10 92 35 16 	sts	0x1635, r1	; 0x801635 <command_ready>
					command_ready = FALSE; // clear the command ready bit
    223a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
				uart_puts(0,"\r\nManual mode ON - Enter Command: ");
			#endif
			
			LedControl(LED_MANUAL_MODE,ON);
			//*** MANUAL MODE CODE ***
			while((modeFlags & 0b00000111) == 0b00000001) {				// test if manual modes flags are still set, will stop loop if isr (manual mode switch) toggles manual mode off
    223e:	87 70       	andi	r24, 0x07	; 7
    2240:	81 30       	cpi	r24, 0x01	; 1
    2242:	89 f3       	breq	.-30     	; 0x2226 <__stack+0x27>
    2244:	ef ef       	ldi	r30, 0xFF	; 255
    2246:	f0 e7       	ldi	r31, 0x70	; 112
    2248:	22 e0       	ldi	r18, 0x02	; 2
    224a:	e1 50       	subi	r30, 0x01	; 1
    224c:	f0 40       	sbci	r31, 0x00	; 0
    224e:	20 40       	sbci	r18, 0x00	; 0
    2250:	e1 f7       	brne	.-8      	; 0x224a <__stack+0x4b>
    2252:	00 c0       	rjmp	.+0      	; 0x2254 <__stack+0x55>
    2254:	00 00       	nop
    2256:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
			}
			_delay_ms(100);
		}
		
		//test mode
		if ((modeFlags & 0b00000111) == 0b00000010){		// test 3LSB 010= test mode
    225a:	87 70       	andi	r24, 0x07	; 7
    225c:	82 30       	cpi	r24, 0x02	; 2
    225e:	f1 f4       	brne	.+60     	; 0x229c <__stack+0x9d>
    2260:	0d de       	rcall	.-998    	; 0x1e7c <LedAllOFF>
				lcd_clrscr();
				lcdGetModeAndUpdate(); //updates the LCD with the current mode
				lcdLine1Update("Press RUN button to");
				lcdLine2Update("start");
			#endif
			LedAllOFF();
    2262:	61 e0       	ldi	r22, 0x01	; 1
			LedControl(LED_TEST_MODE,1);   //  Turn on test mode LED
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	f2 dc       	rcall	.-1564   	; 0x1c4c <LedControl>
    2268:	81 e9       	ldi	r24, 0x91	; 145
    226a:	90 e1       	ldi	r25, 0x10	; 16
			
			#ifdef LOGGING_ENABLE
				LogInfo("Test mode on\r\n");
			#endif
			#ifndef LOGGING_ENABLE
				printf("\r\ntest mode ON\r\n");
    226c:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
    2270:	10 c0       	rjmp	.+32     	; 0x2292 <__stack+0x93>
			#endif
			
			
			
			while ((modeFlags & 0b00000111) == 0b00000010){ // while modeFlags remain in test mode carry out this code which tests for the run button to be pressed
    2272:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
				if ((modeFlags & 0b00001111) == 0b00001010){	
    2276:	8f 70       	andi	r24, 0x0F	; 15
    2278:	8a 30       	cpi	r24, 0x0A	; 10
    227a:	59 f4       	brne	.+22     	; 0x2292 <__stack+0x93>
    227c:	81 e9       	ldi	r24, 0x91	; 145
						LogDebug("testing sequence run triggered\r\n");
						LogError("fram testing\r\n");
						LogData("fram testing\r\n");
					#endif
					#ifndef LOGGING_ENABLE
						printf("\r\ntest mode ON\r\n");
    227e:	90 e1       	ldi	r25, 0x10	; 16
    2280:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
    2284:	0e 94 97 02 	call	0x52e	; 0x52e <BUOYANCYgoToSurface>
							
							
//					*********** motor driver testing code***********
 				while (1)
 				{
				 BUOYANCYgoToSurface();
    2288:	82 e3       	ldi	r24, 0x32	; 50
				 BUOYANCYgoToDepth(50);
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	0e 94 bb 02 	call	0x576	; 0x576 <BUOYANCYgoToDepth>
    2290:	f9 cf       	rjmp	.-14     	; 0x2284 <__stack+0x85>
    2292:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
				printf("\r\ntest mode ON\r\n");
			#endif
			
			
			
			while ((modeFlags & 0b00000111) == 0b00000010){ // while modeFlags remain in test mode carry out this code which tests for the run button to be pressed
    2296:	87 70       	andi	r24, 0x07	; 7
    2298:	82 30       	cpi	r24, 0x02	; 2
    229a:	59 f3       	breq	.-42     	; 0x2272 <__stack+0x73>
    229c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
				}
			}
		}
		
		// sample mode 
		if ((modeFlags & 0b00000111) == 0b00000011){		// test 3LSB 011
    22a0:	87 70       	andi	r24, 0x07	; 7
    22a2:	83 30       	cpi	r24, 0x03	; 3
    22a4:	71 f5       	brne	.+92     	; 0x2302 <__stack+0x103>
    22a6:	ea dd       	rcall	.-1068   	; 0x1e7c <LedAllOFF>
				lcd_clrscr();
				lcdGetModeAndUpdate(); //updates the LCD with the current mode
				lcdLine1Update("Press RUN button to");
				lcdLine2Update("start sampling");
			#endif
			LedAllOFF();
    22a8:	61 e0       	ldi	r22, 0x01	; 1
    22aa:	82 e0       	ldi	r24, 0x02	; 2
			LedControl(LED_SAMPLE_MODE,1);	//  Turn on sample mode LED
    22ac:	cf dc       	rcall	.-1634   	; 0x1c4c <LedControl>
    22ae:	61 ea       	ldi	r22, 0xA1	; 161
    22b0:	70 e1       	ldi	r23, 0x10	; 16
    22b2:	80 e0       	ldi	r24, 0x00	; 0
			
			#ifdef LOGGING_ENABLE
				LogInfo("sample collection mode\r\n");
			#endif
			#ifndef LOGGING_ENABLE
				uart_puts(0, "sample collection mode ON\r\n");
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	21 d4       	rcall	.+2114   	; 0x2afa <uart_puts>
    22b8:	1f c0       	rjmp	.+62     	; 0x22f8 <__stack+0xf9>
    22ba:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    22be:	8f 78       	andi	r24, 0x8F	; 143
			#endif
			
			
			
			
			while ((modeFlags & 0b00000111) == 0b00000011){
    22c0:	8b 38       	cpi	r24, 0x8B	; 139
				if ((modeFlags & 0b10001111) == 0b10001011){ // will only collect sample is modeflags MSB is set, this indicates the device is ready to collect
    22c2:	61 f4       	brne	.+24     	; 0x22dc <__stack+0xdd>
    22c4:	8d eb       	ldi	r24, 0xBD	; 189
    22c6:	90 e1       	ldi	r25, 0x10	; 16
    22c8:	0e 94 bc 08 	call	0x1178	; 0x1178 <LogDebug>
					LogDebug("sample collection sequence triggered\r\n");
    22cc:	0e 94 06 09 	call	0x120c	; 0x120c <collectSample>
					#ifdef LCD_ENABLE
						lcd_clrscr();
						lcdGetModeAndUpdate(); //updates the LCD with the current mode
						lcdLine1Update("Starting");
					#endif
					collectSample();	
    22d0:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
					modeFlags &= ~(0b10001111);// clear the modeflags after interrupt back to default (sleep mode) ensuring that the ready to sample bit (MSB) is cleared to prevent another sample being taken
    22d4:	80 77       	andi	r24, 0x70	; 112
    22d6:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
    22da:	0e c0       	rjmp	.+28     	; 0x22f8 <__stack+0xf9>
    22dc:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
				}
				else if ((modeFlags & 0b10001111) == 0b00001011){ // modeflags MSB is not set, this indicates the device is has already sampled
    22e0:	8f 78       	andi	r24, 0x8F	; 143
    22e2:	8b 30       	cpi	r24, 0x0B	; 11
    22e4:	49 f4       	brne	.+18     	; 0x22f8 <__stack+0xf9>
    22e6:	84 ee       	ldi	r24, 0xE4	; 228
    22e8:	90 e1       	ldi	r25, 0x10	; 16
					#ifdef LOGGING_ENABLE
						LogError("Sample collection Failed: Sample already taken, reset and try again\r\n");
					#endif
					#ifndef LOGGING_ENABLE
						printf("Sample collection sequence could not be triggered as sample has already been taken\r\n");
    22ea:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
    22ee:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
					#endif
					modeFlags &= ~(0b00001111);// clear the modeflags after interrupt back to default (sleep mode)
    22f2:	80 7f       	andi	r24, 0xF0	; 240
    22f4:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
    22f8:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
			#endif
			
			
			
			
			while ((modeFlags & 0b00000111) == 0b00000011){
    22fc:	87 70       	andi	r24, 0x07	; 7
    22fe:	83 30       	cpi	r24, 0x03	; 3
    2300:	e1 f2       	breq	.-72     	; 0x22ba <__stack+0xbb>
    2302:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
				}
			}
		}
		// cleaning mode 
		
		if ((modeFlags & 0b00000111) == 0b00000100){		// test 3LSB 100= cleaning mode
    2306:	87 70       	andi	r24, 0x07	; 7
    2308:	84 30       	cpi	r24, 0x04	; 4
    230a:	09 f0       	breq	.+2      	; 0x230e <__stack+0x10f>
    230c:	b4 c0       	rjmp	.+360    	; 0x2476 <__stack+0x277>
    230e:	b6 dd       	rcall	.-1172   	; 0x1e7c <LedAllOFF>
    2310:	68 e3       	ldi	r22, 0x38	; 56
				lcd_clrscr();
				lcdGetModeAndUpdate(); //updates the LCD with the current   mode
				lcdLine1Update("Press RUN button to");
				lcdLine2Update("start cleaning run");
			#endif
			LedAllOFF();		
    2312:	71 e1       	ldi	r23, 0x11	; 17
    2314:	80 e0       	ldi	r24, 0x00	; 0
			#ifdef LOGGING_ENABLE
				LogInfo("clean mode ON\r\n");
			#endif
			#ifndef LOGGING_ENABLE
				uart_puts(0,"\r\nclean mode ON - \r\n");
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	f0 d3       	rcall	.+2016   	; 0x2afa <uart_puts>
    231a:	61 e0       	ldi	r22, 0x01	; 1
    231c:	83 e0       	ldi	r24, 0x03	; 3
    231e:	96 dc       	rcall	.-1748   	; 0x1c4c <LedControl>
    2320:	0f 2e       	mov	r0, r31
			#endif
			
			
			LedControl(LED_CLEANING_MODE,1);
    2322:	f1 e6       	ldi	r31, 0x61	; 97
    2324:	af 2e       	mov	r10, r31
    2326:	f1 e1       	ldi	r31, 0x11	; 17
    2328:	bf 2e       	mov	r11, r31
							break; /* optional */
							case 2  :
							printf("Wash step %i - Place inlet in   \r\n", wash_step);
							break; /* optional */
							case 3  :
							printf("Wash step %i  \r\n", wash_step);
    232a:	f0 2d       	mov	r31, r0
    232c:	9e c0       	rjmp	.+316    	; 0x246a <__stack+0x26b>
    232e:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    2332:	8f 70       	andi	r24, 0x0F	; 15
    2334:	8c 30       	cpi	r24, 0x0C	; 12
			#endif
			
			
			LedControl(LED_CLEANING_MODE,1);
			uint16_t elapsed_seconds = 0; // Make a new counter variable and initialize to zero
			while ((modeFlags & 0b00000111) == 0b00000100){  // while in cleaning mode
    2336:	09 f0       	breq	.+2      	; 0x233a <__stack+0x13b>
				if ((modeFlags & 0b00001111) == 0b00001100){  // if the run button is pressed		
    2338:	98 c0       	rjmp	.+304    	; 0x246a <__stack+0x26b>
    233a:	8d e4       	ldi	r24, 0x4D	; 77
    233c:	91 e1       	ldi	r25, 0x11	; 17
    233e:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
    2342:	ee 24       	eor	r14, r14
					#ifdef LOGGING_ENABLE
						LogInfo("Clean mode started\r\n");
					#endif
					#ifndef LOGGING_ENABLE
					 printf("Clean mode started\r\n");
    2344:	e3 94       	inc	r14
    2346:	f1 2c       	mov	r15, r1
    2348:	0f 2e       	mov	r0, r31
    234a:	f0 eb       	ldi	r31, 0xB0	; 176
    234c:	8f 2e       	mov	r8, r31
    234e:	f1 e1       	ldi	r31, 0x11	; 17
    2350:	9f 2e       	mov	r9, r31
							}
						}
						//Sample and preservative pumps off
						inlet_valve_denergise();
						MotordriverStop(SAMPLE_PUMP);
						printf("Wash stage %i complete\r\n", wash_step);
    2352:	f0 2d       	mov	r31, r0
    2354:	6e 96       	adiw	r28, 0x1e	; 30
    2356:	ef ae       	std	Y+63, r14	; 0x3f
    2358:	6e 97       	sbiw	r28, 0x1e	; 30
    235a:	8e 2d       	mov	r24, r14
    235c:	82 30       	cpi	r24, 0x02	; 2
    235e:	81 f0       	breq	.+32     	; 0x2380 <__stack+0x181>
    2360:	83 30       	cpi	r24, 0x03	; 3
					#ifndef LOGGING_ENABLE
					 printf("Clean mode started\r\n");
					#endif
					uint8_t wash_step = 0;
					for (wash_step = 1; wash_step <(NUMBER_OF_WASH_STEPS + 1) ; wash_step ++){
						switch(wash_step)
    2362:	d1 f0       	breq	.+52     	; 0x2398 <__stack+0x199>
    2364:	81 30       	cpi	r24, 0x01	; 1
    2366:	19 f5       	brne	.+70     	; 0x23ae <__stack+0x1af>
    2368:	1f 92       	push	r1
    236a:	91 e0       	ldi	r25, 0x01	; 1
    236c:	9f 93       	push	r25
						{
							case 1  :
							printf("Wash step %i  \r\n", wash_step);
    236e:	bf 92       	push	r11
    2370:	af 92       	push	r10
    2372:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
							break; /* optional */
    237c:	0f 90       	pop	r0
    237e:	17 c0       	rjmp	.+46     	; 0x23ae <__stack+0x1af>
    2380:	1f 92       	push	r1
    2382:	e2 e0       	ldi	r30, 0x02	; 2
    2384:	ef 93       	push	r30
							case 2  :
							printf("Wash step %i - Place inlet in   \r\n", wash_step);
    2386:	3f 92       	push	r3
    2388:	2f 92       	push	r2
    238a:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
							break; /* optional */
    2394:	0f 90       	pop	r0
    2396:	0b c0       	rjmp	.+22     	; 0x23ae <__stack+0x1af>
    2398:	1f 92       	push	r1
    239a:	f3 e0       	ldi	r31, 0x03	; 3
    239c:	ff 93       	push	r31
							case 3  :
							printf("Wash step %i  \r\n", wash_step);
    239e:	bf 92       	push	r11
    23a0:	af 92       	push	r10
    23a2:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
							break; /* optional */
    23ac:	0f 90       	pop	r0
    23ae:	0c d3       	rcall	.+1560   	; 0x29c8 <inlet_valve_energise>
    23b0:	4f ef       	ldi	r20, 0xFF	; 255
    23b2:	50 e0       	ldi	r21, 0x00	; 0
						}
						//Sample pump on
						inlet_valve_energise();  // open the 3 way inlet valve to the external environment to let sample/bleach water in
    23b4:	61 e0       	ldi	r22, 0x01	; 1
    23b6:	81 e0       	ldi	r24, 0x01	; 1
						MotordriverRun(SAMPLE_PUMP,COUNTER_CLOCKWISE,255);
    23b8:	58 d1       	rcall	.+688    	; 0x266a <MotordriverRun>
    23ba:	f2 01       	movw	r30, r4
    23bc:	80 81       	ld	r24, Z
    23be:	84 60       	ori	r24, 0x04	; 4
    23c0:	80 83       	st	Z, r24
    23c2:	f8 01       	movw	r30, r16
						TCCR1B |= (1 << CS12) ; // Set up timer at Fcpu /256
    23c4:	11 82       	std	Z+1, r1	; 0x01
    23c6:	10 82       	st	Z, r1
    23c8:	c1 2c       	mov	r12, r1
						TCNT1 = 0; // Reset timer value
    23ca:	d1 2c       	mov	r13, r1
    23cc:	1f c0       	rjmp	.+62     	; 0x240c <__stack+0x20d>
    23ce:	f8 01       	movw	r30, r16
						elapsed_seconds = 0;
    23d0:	80 81       	ld	r24, Z
    23d2:	91 81       	ldd	r25, Z+1	; 0x01
    23d4:	81 31       	cpi	r24, 0x11	; 17
						
						while (elapsed_seconds < WASH_RUNTHROUGH_TIMEOUT_SECONDS){ // while elapsed time is below cutoff time.
							if ( TCNT1 >= 31249){  // if the counter has reached 1 second worth of ticks
    23d6:	9a 47       	sbci	r25, 0x7A	; 122
    23d8:	d0 f3       	brcs	.-12     	; 0x23ce <__stack+0x1cf>
    23da:	f8 01       	movw	r30, r16
    23dc:	11 82       	std	Z+1, r1	; 0x01
    23de:	10 82       	st	Z, r1
    23e0:	ff ef       	ldi	r31, 0xFF	; 255
								TCNT1 = 0; // Reset timer value
    23e2:	cf 1a       	sub	r12, r31
    23e4:	df 0a       	sbc	r13, r31
    23e6:	1f 92       	push	r1
								elapsed_seconds ++;  // increment the seconds
    23e8:	2f e0       	ldi	r18, 0x0F	; 15
    23ea:	2f 93       	push	r18
    23ec:	df 92       	push	r13
								printf("elapsed_seconds %i of %i\r\n", elapsed_seconds, WASH_RUNTHROUGH_TIMEOUT_SECONDS);
    23ee:	cf 92       	push	r12
    23f0:	7f 92       	push	r7
    23f2:	6f 92       	push	r6
    23f4:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
						MotordriverRun(SAMPLE_PUMP,COUNTER_CLOCKWISE,255);
						TCCR1B |= (1 << CS12) ; // Set up timer at Fcpu /256
						TCNT1 = 0; // Reset timer value
						elapsed_seconds = 0;
						
						while (elapsed_seconds < WASH_RUNTHROUGH_TIMEOUT_SECONDS){ // while elapsed time is below cutoff time.
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	8f e0       	ldi	r24, 0x0F	; 15
    2406:	c8 16       	cp	r12, r24
    2408:	d1 04       	cpc	r13, r1
    240a:	39 f0       	breq	.+14     	; 0x241a <__stack+0x21b>
    240c:	f8 01       	movw	r30, r16
    240e:	80 81       	ld	r24, Z
    2410:	91 81       	ldd	r25, Z+1	; 0x01
    2412:	81 31       	cpi	r24, 0x11	; 17
							if ( TCNT1 >= 31249){  // if the counter has reached 1 second worth of ticks
    2414:	9a 47       	sbci	r25, 0x7A	; 122
    2416:	08 f7       	brcc	.-62     	; 0x23da <__stack+0x1db>
    2418:	da cf       	rjmp	.-76     	; 0x23ce <__stack+0x1cf>
    241a:	cd d2       	rcall	.+1434   	; 0x29b6 <inlet_valve_denergise>
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	43 d1       	rcall	.+646    	; 0x26a6 <MotordriverStop>
    2420:	ff 92       	push	r15
								elapsed_seconds ++;  // increment the seconds
								printf("elapsed_seconds %i of %i\r\n", elapsed_seconds, WASH_RUNTHROUGH_TIMEOUT_SECONDS);
							}
						}
						//Sample and preservative pumps off
						inlet_valve_denergise();
    2422:	ef 92       	push	r14
    2424:	9f 92       	push	r9
						MotordriverStop(SAMPLE_PUMP);
    2426:	8f 92       	push	r8
    2428:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
						printf("Wash stage %i complete\r\n", wash_step);
    242c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    2430:	87 7f       	andi	r24, 0xF7	; 247
    2432:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
						modeFlags &= ~(0b00001000);// clear the run bit to await for next press to flush bleach out
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
						if (wash_step < NUMBER_OF_WASH_STEPS){
    243e:	6e 96       	adiw	r28, 0x1e	; 30
    2440:	2f ad       	ldd	r18, Y+63	; 0x3f
    2442:	6e 97       	sbiw	r28, 0x1e	; 30
    2444:	24 30       	cpi	r18, 0x04	; 4
    2446:	20 f4       	brcc	.+8      	; 0x2450 <__stack+0x251>
    2448:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    244c:	83 ff       	sbrs	r24, 3
    244e:	fc cf       	rjmp	.-8      	; 0x2448 <__stack+0x249>
							
							while ((modeFlags & 0b00001000) == 0b00000000){  // while in run bit is clear							
    2450:	8f ef       	ldi	r24, 0xFF	; 255
    2452:	e8 1a       	sub	r14, r24
    2454:	f8 0a       	sbc	r15, r24
    2456:	95 e0       	ldi	r25, 0x05	; 5
    2458:	e9 16       	cp	r14, r25
    245a:	f1 04       	cpc	r15, r1
    245c:	09 f0       	breq	.+2      	; 0x2460 <__stack+0x261>
					#endif
					#ifndef LOGGING_ENABLE
					 printf("Clean mode started\r\n");
					#endif
					uint8_t wash_step = 0;
					for (wash_step = 1; wash_step <(NUMBER_OF_WASH_STEPS + 1) ; wash_step ++){
    245e:	7a cf       	rjmp	.-268    	; 0x2354 <__stack+0x155>
    2460:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    2464:	80 7f       	andi	r24, 0xF0	; 240
    2466:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
							
							while ((modeFlags & 0b00001000) == 0b00000000){  // while in run bit is clear							
							}
						}
					}
					modeFlags &= ~(0b00001111);// clear the modeflags after interrupt back to default (sleep mode)
    246a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    246e:	87 70       	andi	r24, 0x07	; 7
    2470:	84 30       	cpi	r24, 0x04	; 4
			#endif
			
			
			LedControl(LED_CLEANING_MODE,1);
			uint16_t elapsed_seconds = 0; // Make a new counter variable and initialize to zero
			while ((modeFlags & 0b00000111) == 0b00000100){  // while in cleaning mode
    2472:	09 f4       	brne	.+2      	; 0x2476 <__stack+0x277>
    2474:	5c cf       	rjmp	.-328    	; 0x232e <__stack+0x12f>
    2476:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    247a:	87 70       	andi	r24, 0x07	; 7
    247c:	85 30       	cpi	r24, 0x05	; 5
						
		}
		

		// pre-run priming mode
		if ((modeFlags & 0b00000111) == 0b00000101){		// test 3LSB 100= cleaning mode
    247e:	09 f0       	breq	.+2      	; 0x2482 <__stack+0x283>
    2480:	55 c0       	rjmp	.+170    	; 0x252c <__stack+0x32d>
    2482:	fc dc       	rcall	.-1544   	; 0x1e7c <LedAllOFF>
    2484:	89 ec       	ldi	r24, 0xC9	; 201
    2486:	91 e1       	ldi	r25, 0x11	; 17
    2488:	9f 93       	push	r25
				lcd_clrscr();
				lcdGetModeAndUpdate(); //updates the LCD with the current mode
				lcdLine1Update("Press RUN button to");
				lcdLine2Update("start priming");
			#endif
			LedAllOFF();
    248a:	8f 93       	push	r24
    248c:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
			#ifdef LOGGING_ENABLE
				LogInfo("pre-run priming mode\r\n");
			#endif
			#ifndef LOGGING_ENABLE
				printf("\r\nPre-run priming mode ON");
    2490:	61 e0       	ldi	r22, 0x01	; 1
    2492:	84 e0       	ldi	r24, 0x04	; 4
    2494:	db db       	rcall	.-2122   	; 0x1c4c <LedControl>
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
			#endif
			LedControl(LED_PRIMING_MODE,1);   //  Turn on test mode LED
    249a:	0f 2e       	mov	r0, r31
    249c:	f2 e0       	ldi	r31, 0x02	; 2
    249e:	cf 2e       	mov	r12, r31
    24a0:	f2 e1       	ldi	r31, 0x12	; 18
			while ((modeFlags & 0b00000111) == 0b00000101){
    24a2:	df 2e       	mov	r13, r31
    24a4:	f0 2d       	mov	r31, r0
					LogInfo("pre run priming mode started\r\n");
					//printf("pre run priming mode started");
					// insert cleaning code here
					int a=0;
					for(a = 1; a <= 50; a ++){
						printf("iteration %i/20 of for loop...\r\n",a);
    24a6:	3c c0       	rjmp	.+120    	; 0x2520 <__stack+0x321>
    24a8:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    24ac:	8f 70       	andi	r24, 0x0F	; 15
    24ae:	8d 30       	cpi	r24, 0x0D	; 13
    24b0:	b9 f5       	brne	.+110    	; 0x2520 <__stack+0x321>
			#endif
			#ifndef LOGGING_ENABLE
				printf("\r\nPre-run priming mode ON");
			#endif
			LedControl(LED_PRIMING_MODE,1);   //  Turn on test mode LED
			while ((modeFlags & 0b00000111) == 0b00000101){
    24b2:	83 ee       	ldi	r24, 0xE3	; 227
				if ((modeFlags & 0b00001111) == 0b00001101){
    24b4:	91 e1       	ldi	r25, 0x11	; 17
    24b6:	0e 94 72 08 	call	0x10e4	; 0x10e4 <LogInfo>
    24ba:	ee 24       	eor	r14, r14
    24bc:	e3 94       	inc	r14
					LogInfo("pre run priming mode started\r\n");
    24be:	f1 2c       	mov	r15, r1
    24c0:	ff 92       	push	r15
    24c2:	ef 92       	push	r14
    24c4:	df 92       	push	r13
					//printf("pre run priming mode started");
					// insert cleaning code here
					int a=0;
					for(a = 1; a <= 50; a ++){
    24c6:	cf 92       	push	r12
    24c8:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
						printf("iteration %i/20 of for loop...\r\n",a);
    24cc:	83 e2       	ldi	r24, 0x23	; 35
    24ce:	92 e1       	ldi	r25, 0x12	; 18
    24d0:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
    24d4:	ef ef       	ldi	r30, 0xFF	; 255
    24d6:	f3 ed       	ldi	r31, 0xD3	; 211
						//PH6_pwm_set(0);
						//PB7_pwm_set(0);
						printf("ph6 pwm low...\r\n");
    24d8:	20 e3       	ldi	r18, 0x30	; 48
    24da:	e1 50       	subi	r30, 0x01	; 1
    24dc:	f0 40       	sbci	r31, 0x00	; 0
    24de:	20 40       	sbci	r18, 0x00	; 0
    24e0:	e1 f7       	brne	.-8      	; 0x24da <__stack+0x2db>
    24e2:	00 c0       	rjmp	.+0      	; 0x24e4 <__stack+0x2e5>
    24e4:	00 00       	nop
    24e6:	83 e3       	ldi	r24, 0x33	; 51
    24e8:	92 e1       	ldi	r25, 0x12	; 18
    24ea:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
						_delay_ms(2000);
						//PH6_pwm_set(255);
						//PB7_pwm_set(255);
						printf("ph6 pwm high...\r\n");
    24ee:	8f ef       	ldi	r24, 0xFF	; 255
    24f0:	93 ed       	ldi	r25, 0xD3	; 211
    24f2:	e0 e3       	ldi	r30, 0x30	; 48
    24f4:	81 50       	subi	r24, 0x01	; 1
    24f6:	90 40       	sbci	r25, 0x00	; 0
    24f8:	e0 40       	sbci	r30, 0x00	; 0
    24fa:	e1 f7       	brne	.-8      	; 0x24f4 <__stack+0x2f5>
    24fc:	00 c0       	rjmp	.+0      	; 0x24fe <__stack+0x2ff>
    24fe:	00 00       	nop
    2500:	ff ef       	ldi	r31, 0xFF	; 255
    2502:	ef 1a       	sub	r14, r31
    2504:	ff 0a       	sbc	r15, r31
    2506:	0f 90       	pop	r0
				if ((modeFlags & 0b00001111) == 0b00001101){
					LogInfo("pre run priming mode started\r\n");
					//printf("pre run priming mode started");
					// insert cleaning code here
					int a=0;
					for(a = 1; a <= 50; a ++){
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	23 e3       	ldi	r18, 0x33	; 51
    2510:	e2 16       	cp	r14, r18
    2512:	f1 04       	cpc	r15, r1
    2514:	a9 f6       	brne	.-86     	; 0x24c0 <__stack+0x2c1>
    2516:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    251a:	80 7f       	andi	r24, 0xF0	; 240
    251c:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
						//PH6_pwm_set(255);
						//PB7_pwm_set(255);
						printf("ph6 pwm high...\r\n");
						_delay_ms(2000);
					}
					modeFlags &= ~(0b00001111);// clear the modeflags after interrupt back to default (sleep mode)
    2520:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    2524:	87 70       	andi	r24, 0x07	; 7
			#endif
			#ifndef LOGGING_ENABLE
				printf("\r\nPre-run priming mode ON");
			#endif
			LedControl(LED_PRIMING_MODE,1);   //  Turn on test mode LED
			while ((modeFlags & 0b00000111) == 0b00000101){
    2526:	85 30       	cpi	r24, 0x05	; 5
    2528:	09 f4       	brne	.+2      	; 0x252c <__stack+0x32d>
    252a:	be cf       	rjmp	.-132    	; 0x24a8 <__stack+0x2a9>
    252c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    2530:	87 70       	andi	r24, 0x07	; 7
			}	
		}
		
		
				// FRAM Erase mode
				if ((modeFlags & 0b00000111) == 0b00000110){		// test 3LSB 100= cleaning mode
    2532:	86 30       	cpi	r24, 0x06	; 6
    2534:	f1 f4       	brne	.+60     	; 0x2572 <__stack+0x373>
    2536:	a2 dc       	rcall	.-1724   	; 0x1e7c <LedAllOFF>
    2538:	84 e4       	ldi	r24, 0x44	; 68
    253a:	92 e1       	ldi	r25, 0x12	; 18
					lcd_clrscr();
					lcdGetModeAndUpdate(); //updates the LCD with the current mode
					lcdLine1Update("Press RUN button erase FRAM");
					lcdLine2Update("start priming");
					#endif
					LedAllOFF();
    253c:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
					#ifdef LOGGING_ENABLE
						LogInfo("FRAM mode\r\n");
					#endif
					#ifndef LOGGING_ENABLE
						printf("%s","Press run button to erase FRAM\r\n");
    2540:	61 e0       	ldi	r22, 0x01	; 1
    2542:	84 e0       	ldi	r24, 0x04	; 4
    2544:	83 db       	rcall	.-2298   	; 0x1c4c <LedControl>
    2546:	10 c0       	rjmp	.+32     	; 0x2568 <__stack+0x369>
					#endif
					LedControl(LED_PRIMING_MODE,1);   //  Turn on test mode LED
    2548:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    254c:	8f 70       	andi	r24, 0x0F	; 15
    254e:	8e 30       	cpi	r24, 0x0E	; 14
					while ((modeFlags & 0b00000111) == 0b00000110){ //while in fram erase mode
    2550:	59 f4       	brne	.+22     	; 0x2568 <__stack+0x369>
						if ((modeFlags & 0b00001111) == 0b00001110){ //check for run button press
    2552:	84 e6       	ldi	r24, 0x64	; 100
    2554:	92 e1       	ldi	r25, 0x12	; 18
    2556:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
    255a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <fram_resetWriteAddress>
							#ifdef LOGGING_ENABLE
								LogDebug("fram ERASE selected \r\n");
							#endif
							#ifndef LOGGING_ENABLE
								printf("fram ERASE selected\r\n");
    255e:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
							#endif
							fram_resetWriteAddress();
    2562:	80 7f       	andi	r24, 0xF0	; 240
    2564:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
							modeFlags &= ~(0b00001111);// clear the modeflags after interrupt back to default (sleep mode)
    2568:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    256c:	87 70       	andi	r24, 0x07	; 7
    256e:	86 30       	cpi	r24, 0x06	; 6
					#endif
					#ifndef LOGGING_ENABLE
						printf("%s","Press run button to erase FRAM\r\n");
					#endif
					LedControl(LED_PRIMING_MODE,1);   //  Turn on test mode LED
					while ((modeFlags & 0b00000111) == 0b00000110){ //while in fram erase mode
    2570:	59 f3       	breq	.-42     	; 0x2548 <__stack+0x349>
    2572:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    2576:	87 70       	andi	r24, 0x07	; 7
    2578:	87 30       	cpi	r24, 0x07	; 7
					}
				}

		
		//UART input mode mode
		if ((modeFlags & 0b00000111) == 0b00000111){		// test 3LSB 110 = UART input mode
    257a:	51 f5       	brne	.+84     	; 0x25d0 <__stack+0x3d1>
    257c:	7f dc       	rcall	.-1794   	; 0x1e7c <LedAllOFF>
    257e:	89 e7       	ldi	r24, 0x79	; 121
    2580:	92 e1       	ldi	r25, 0x12	; 18
    2582:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
			lcd_clrscr();
			lcdGetModeAndUpdate(); //updates the LCD with the current mode
			lcdLine1Update("Enter text 1");
			lcdLine2Update("text 2");
			#endif
			LedAllOFF();
    2586:	1e c0       	rjmp	.+60     	; 0x25c4 <__stack+0x3c5>
			#ifdef LOGGING_ENABLE
				LogInfo("UART input mode ON\r\n");
			#endif
			#ifndef LOGGING_ENABLE
				printf("UART input mode ON\r\n");
    2588:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
    258c:	8f 70       	andi	r24, 0x0F	; 15
    258e:	8f 30       	cpi	r24, 0x0F	; 15
			#endif
			while ((modeFlags & 0b00000111) == 0b00000111){ //while in UART mode
    2590:	c9 f4       	brne	.+50     	; 0x25c4 <__stack+0x3c5>
				if ((modeFlags & 0b00001111) == 0b00001111){ // when run button pressed
    2592:	8d e8       	ldi	r24, 0x8D	; 141
    2594:	92 e1       	ldi	r25, 0x12	; 18
    2596:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
					// replace For loop by adding tasks here....
					printf("Exit UART input mode\r\n");
    259a:	8a e0       	ldi	r24, 0x0A	; 10
    259c:	ef e1       	ldi	r30, 0x1F	; 31
    259e:	fe e4       	ldi	r31, 0x4E	; 78
    25a0:	31 97       	sbiw	r30, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <__stack+0x3a1>
    25a4:	00 c0       	rjmp	.+0      	; 0x25a6 <__stack+0x3a7>
    25a6:	00 00       	nop
    25a8:	81 50       	subi	r24, 0x01	; 1
    25aa:	c1 f7       	brne	.-16     	; 0x259c <__stack+0x39d>
    25ac:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
					for (char i1=0; i1<10; i1++){
						// Exit UART input mode in 10 seconds
						_delay_ms(10);
					}
					modeFlags &= ~(0b00001111);// clear the modeflags after interrupt back to default (sleep mode)
    25b0:	80 7f       	andi	r24, 0xF0	; 240
    25b2:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
    25b6:	80 91 b4 15 	lds	r24, 0x15B4	; 0x8015b4 <__data_end>
					if (usart1Stop){
    25ba:	88 23       	and	r24, r24
    25bc:	19 f0       	breq	.+6      	; 0x25c4 <__stack+0x3c5>
    25be:	89 d5       	rcall	.+2834   	; 0x30d2 <USART1_disable>
						// Before AVR going back to sleep, disable UART1 and trigger INT2
						USART1_disable();		// Disable UART1 and trigger INT2
    25c0:	10 92 b4 15 	sts	0x15B4, r1	; 0x8015b4 <__data_end>
						usart1Stop = 0;			// Clear uart1 stop flag
    25c4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
				LogInfo("UART input mode ON\r\n");
			#endif
			#ifndef LOGGING_ENABLE
				printf("UART input mode ON\r\n");
			#endif
			while ((modeFlags & 0b00000111) == 0b00000111){ //while in UART mode
    25c8:	87 70       	andi	r24, 0x07	; 7
    25ca:	87 30       	cpi	r24, 0x07	; 7
    25cc:	e9 f2       	breq	.-70     	; 0x2588 <__stack+0x389>
    25ce:	92 cd       	rjmp	.-1244   	; 0x20f4 <main+0xfc>
    25d0:	83 ea       	ldi	r24, 0xA3	; 163
		}
		else{
			#ifdef LOGGING_ENABLE
				LogInfo("no valid operation mode selected\r\n");
			#else
				printf("no valid operation mode selected");
    25d2:	92 e1       	ldi	r25, 0x12	; 18
    25d4:	9f 93       	push	r25
    25d6:	8f 93       	push	r24
    25d8:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	89 cd       	rjmp	.-1262   	; 0x20f4 <main+0xfc>
    25e2:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
			
			uart_puts(0,"\r\nDo you want to run after mode settings? (y/n)\r\n");
			c = USART0_getchar();
			if (c == 'y' || c == 'Y')
			{
				modeFlags |= 0b00001000;
    25e6:	88 60       	ori	r24, 0x08	; 8
    25e8:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
    25ec:	66 e4       	ldi	r22, 0x46	; 70
				uart_puts(0,"Automatically run after mode settings\r\n");
    25ee:	70 e1       	ldi	r23, 0x10	; 16
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	82 d2       	rcall	.+1284   	; 0x2afa <uart_puts>
    25f6:	04 ce       	rjmp	.-1016   	; 0x2200 <__stack+0x1>
    25f8:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
			
			uart_puts(0,"\r\nDo you want to run after mode settings? (y/n)\r\n");
			c = USART0_getchar();
			if (c == 'y' || c == 'Y')
			{
				modeFlags |= 0b00001000;
    25fc:	88 60       	ori	r24, 0x08	; 8
    25fe:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
    2602:	66 e4       	ldi	r22, 0x46	; 70
    2604:	70 e1       	ldi	r23, 0x10	; 16
				uart_puts(0,"Automatically run after mode settings\r\n");
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	77 d2       	rcall	.+1262   	; 0x2afa <uart_puts>
    260c:	fe cd       	rjmp	.-1028   	; 0x220a <__stack+0xb>
    260e:	65 ee       	ldi	r22, 0xE5	; 229
    2610:	7f e0       	ldi	r23, 0x0F	; 15
    2612:	80 e0       	ldi	r24, 0x00	; 0
					goto getinput;
					break;
			}
			oldChar = c;
			
			uart_puts(0,"\r\nDo you want to run after mode settings? (y/n)\r\n");
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	71 d2       	rcall	.+1250   	; 0x2afa <uart_puts>
    2618:	2b d3       	rcall	.+1622   	; 0x2c70 <USART0_getchar>
    261a:	89 37       	cpi	r24, 0x79	; 121
    261c:	09 f0       	breq	.+2      	; 0x2620 <__stack+0x421>
    261e:	e1 cd       	rjmp	.-1086   	; 0x21e2 <main+0x1ea>
			c = USART0_getchar();
    2620:	eb cf       	rjmp	.-42     	; 0x25f8 <__stack+0x3f9>
    2622:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <modeFlags>
			if (c == 'y' || c == 'Y')
    2626:	88 60       	ori	r24, 0x08	; 8
    2628:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <modeFlags>
			{
				modeFlags |= 0b00001000;
    262c:	66 e4       	ldi	r22, 0x46	; 70
    262e:	70 e1       	ldi	r23, 0x10	; 16
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	62 d2       	rcall	.+1220   	; 0x2afa <uart_puts>
				uart_puts(0,"Automatically run after mode settings\r\n");
    2636:	e4 cd       	rjmp	.-1080   	; 0x2200 <__stack+0x1>
    2638:	89 35       	cpi	r24, 0x59	; 89
    263a:	09 f0       	breq	.+2      	; 0x263e <__stack+0x43f>
    263c:	e6 cd       	rjmp	.-1076   	; 0x220a <__stack+0xb>
    263e:	f1 cf       	rjmp	.-30     	; 0x2622 <__stack+0x423>

00002640 <MotordriverInit>:
	
	#ifdef LOGGING_ENABLE
	LogDebug("MotordriverInit() started\r\n");
	#endif
	#ifndef LOGGING_ENABLE
	printf("MotordriverInit() started\r\n");
    2640:	8a e0       	ldi	r24, 0x0A	; 10
    2642:	93 e1       	ldi	r25, 0x13	; 19
    2644:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
	#endif
	//motor driver 1, set data direction registers to make them output pins
	MOTORDRIVER_1_INPUT_1_DDR |= (1<<MOTORDRIVER_1_INPUT_1_PIN);// motor driver 1in1 Data direction register set to output
    2648:	9b 9a       	sbi	0x13, 3	; 19
	MOTORDRIVER_1_INPUT_2_DDR |= (1<<MOTORDRIVER_1_INPUT_2_PIN);
    264a:	e1 e0       	ldi	r30, 0x01	; 1
    264c:	f1 e0       	ldi	r31, 0x01	; 1
    264e:	80 81       	ld	r24, Z
    2650:	80 68       	ori	r24, 0x80	; 128
    2652:	80 83       	st	Z, r24
	MOTORDRIVER_1_INPUT_PWM_DDR	|= (1<<MOTORDRIVER_1_INPUT_PWM_PIN);
    2654:	ea e0       	ldi	r30, 0x0A	; 10
    2656:	f1 e0       	ldi	r31, 0x01	; 1
    2658:	80 81       	ld	r24, Z
    265a:	88 60       	ori	r24, 0x08	; 8
    265c:	80 83       	st	Z, r24
	MOTORDRIVER_1_INPUT_STBY_DDR	|= (1<<MOTORDRIVER_1_INPUT_STBY_PIN);
    265e:	27 9a       	sbi	0x04, 7	; 4
	//printf("MotordriverInit() Completed\r\n");
	#ifdef LOGGING_ENABLE
	LogDebug("MotordriverInit() complete\r\n");
	#endif
	#ifndef LOGGING_ENABLE
	printf("MotordriverInit() complete\r\n");
    2660:	85 e2       	ldi	r24, 0x25	; 37
    2662:	93 e1       	ldi	r25, 0x13	; 19
    2664:	0c 94 8f 21 	jmp	0x431e	; 0x431e <puts>
    2668:	08 95       	ret

0000266a <MotordriverRun>:
	LogDebug("MotordriverRun() called\r\n");
	#endif
	#ifdef LOGGING_ENABLE
	printf("MotordriverRun() called\r\n");
	#endif
	switch(motordriver_number)
    266a:	81 30       	cpi	r24, 0x01	; 1
    266c:	d9 f4       	brne	.+54     	; 0x26a4 <MotordriverRun+0x3a>
	{	// this switch statement determines which motor driver the code is acting upon
		case 1  :
		if (direction == 0)// direction 0 = CW on driver
    266e:	61 11       	cpse	r22, r1
    2670:	0c c0       	rjmp	.+24     	; 0x268a <MotordriverRun+0x20>
			LogDebug("MotordriverRun() - driver 1 forward (Clockwise) ON\r\n");
			#endif
			#ifdef LOGGING_ENABLE
			uart_puts(0,"MotordriverRun() - driver 1 forward (Clockwise) ON\r\n");
			#endif
			MOTORDRIVER_1_INPUT_1_PORT		|=	(1<<MOTORDRIVER_1_INPUT_1_PIN);  // set the motor 1 input 1 port to high
    2672:	a3 9a       	sbi	0x14, 3	; 20
			//MOTORDRIVER_1_INPUT_PWM_PORT	|=	(1<<MOTORDRIVER_1_INPUT_PWM_PIN); // set the motor 1 input pwm to high for on off operation, this has been replaced by pwm code below
			MOTORDRIVER_1_INPUT_PWM_OCR      = motor_speed_pwm; // assugn an 8-bit value to the pwm register to set the motor speed via pwm
    2674:	50 93 29 01 	sts	0x0129, r21	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    2678:	40 93 28 01 	sts	0x0128, r20	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			MOTORDRIVER_1_INPUT_STBY_PORT	|=	(1<< MOTORDRIVER_1_INPUT_STBY_PIN); // set the motor driver stby to high
    267c:	2f 9a       	sbi	0x05, 7	; 5
			MOTORDRIVER_1_INPUT_2_PORT		&=	~(1<<MOTORDRIVER_1_INPUT_2_PIN);  
    267e:	e2 e0       	ldi	r30, 0x02	; 2
    2680:	f1 e0       	ldi	r31, 0x01	; 1
    2682:	80 81       	ld	r24, Z
    2684:	8f 77       	andi	r24, 0x7F	; 127
    2686:	80 83       	st	Z, r24
    2688:	08 95       	ret
		}
		else if (direction == 1)
    268a:	61 30       	cpi	r22, 0x01	; 1
    268c:	59 f4       	brne	.+22     	; 0x26a4 <MotordriverRun+0x3a>
			LogDebug("MotordriverRun() - driver 1 reverse (Counter Clockwise) ON\r\n");
			#endif
			#ifdef LOGGING_ENABLE
			uart_puts(0,"MotordriverRun() - driver 1 reverse (Counter Clockwise) ON\r\n");
			#endif
			MOTORDRIVER_1_INPUT_1_PORT		&=	~(1<<MOTORDRIVER_1_INPUT_1_PIN);  // set the motor 1 input 1 port to low
    268e:	a3 98       	cbi	0x14, 3	; 20
			//MOTORDRIVER_1_INPUT_PWM_PORT	|=	(1<<MOTORDRIVER_1_INPUT_PWM_PIN); // set the motor 1 input pwm to high,this has been replaced by pwm code below
			MOTORDRIVER_1_INPUT_PWM_OCR      = motor_speed_pwm; // assugn an 8-bit value to the pwm register to set the motor speed via pwm
    2690:	50 93 29 01 	sts	0x0129, r21	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    2694:	40 93 28 01 	sts	0x0128, r20	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			MOTORDRIVER_1_INPUT_STBY_PORT	|=	(1<< MOTORDRIVER_1_INPUT_STBY_PIN); // set the motor driver stby to high
    2698:	2f 9a       	sbi	0x05, 7	; 5
			MOTORDRIVER_1_INPUT_2_PORT		|=	(1<<MOTORDRIVER_1_INPUT_2_PIN);  // set the motor driver input 2 to high
    269a:	e2 e0       	ldi	r30, 0x02	; 2
    269c:	f1 e0       	ldi	r31, 0x01	; 1
    269e:	80 81       	ld	r24, Z
    26a0:	80 68       	ori	r24, 0x80	; 128
    26a2:	80 83       	st	Z, r24
    26a4:	08 95       	ret

000026a6 <MotordriverStop>:
}

void MotordriverStop(uint8_t motordriver_number)
{
	//printf("MotordriverStop() called\r\n");
	switch(motordriver_number) // this switch statement determines which motor driver the code is acting upon
    26a6:	81 30       	cpi	r24, 0x01	; 1
    26a8:	19 f0       	breq	.+6      	; 0x26b0 <MotordriverStop+0xa>
    26aa:	82 30       	cpi	r24, 0x02	; 2
    26ac:	51 f0       	breq	.+20     	; 0x26c2 <MotordriverStop+0x1c>
    26ae:	08 95       	ret
		LogDebug("MotordriverStop() - driver 1 STOP \r\n");
		#endif
		#ifdef LOGGING_ENABLE
		uart_puts(0,"MotordriverStop() - driver 1 STOP \r\n");
		#endif
		MOTORDRIVER_1_INPUT_1_PORT	&= ~(1<<MOTORDRIVER_1_INPUT_1_PIN); // placing both inputs to the motor driver low will put the motor in stop  mode
    26b0:	a3 98       	cbi	0x14, 3	; 20
		MOTORDRIVER_1_INPUT_2_PORT &= ~(1<<MOTORDRIVER_1_INPUT_2_PIN);
    26b2:	e2 e0       	ldi	r30, 0x02	; 2
    26b4:	f1 e0       	ldi	r31, 0x01	; 1
    26b6:	80 81       	ld	r24, Z
    26b8:	8f 77       	andi	r24, 0x7F	; 127
    26ba:	80 83       	st	Z, r24
		MOTORDRIVER_1_INPUT_STBY_PORT= (uint8_t)~(1<<MOTORDRIVER_1_INPUT_STBY_PIN);		// placing STBY pin to low will put the motor driver into standby mode, regardl;ess of the state of the other pins
    26bc:	8f e7       	ldi	r24, 0x7F	; 127
    26be:	85 b9       	out	0x05, r24	; 5
		break;
    26c0:	08 95       	ret
		case 2  :
		LogDebug("MotordriverStop() - driver 2 STOP *** this code is incomplete** \r\n");
    26c2:	81 e4       	ldi	r24, 0x41	; 65
    26c4:	93 e1       	ldi	r25, 0x13	; 19
    26c6:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <LogDebug>
    26ca:	08 95       	ret

000026cc <PressureSensorInit>:
	
	#ifdef LOGGING_ENABLE
	LogDebug("PressureSensorInit() started\r\n");
	#endif
	#ifndef LOGGING_ENABLE
	printf("PressureSensorInit() started\r\n");
    26cc:	84 e8       	ldi	r24, 0x84	; 132
    26ce:	93 e1       	ldi	r25, 0x13	; 19
    26d0:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
	#endif
	// initialise pressure sensor power supply pins
	PRESSURE_SENSOR_SUPPLY_DDR |= (1<< PRESSURE_SENSOR_SUPPLY_PIN);		/* Power to the pressure sensors is via a GPIO - set these to output mode*/
    26d4:	20 9a       	sbi	0x04, 0	; 4
	//PRESSURE_SENSOR_SUPPLY_PORT |= (1<< PRESSURE_SENSOR_SUPPLY_PIN);	/* Power to the pressure sensors is turned on*/
	// initialise pressure sensor 1
	PRESSURE_SENSOR1_DDR |= (1<< PRESSURE_SENSOR1_PIN); /* Slave select pins for pressure sensors set to output */
    26d6:	a1 e0       	ldi	r26, 0x01	; 1
    26d8:	b1 e0       	ldi	r27, 0x01	; 1
    26da:	8c 91       	ld	r24, X
    26dc:	80 61       	ori	r24, 0x10	; 16
    26de:	8c 93       	st	X, r24
	PRESSURE_SENSOR1_PORT |= (1<< PRESSURE_SENSOR1_PIN); /* sturn slave select pin on to dessert this device until required*/
    26e0:	e2 e0       	ldi	r30, 0x02	; 2
    26e2:	f1 e0       	ldi	r31, 0x01	; 1
    26e4:	80 81       	ld	r24, Z
    26e6:	80 61       	ori	r24, 0x10	; 16
    26e8:	80 83       	st	Z, r24
	// initialise pressure sensor 2
	PRESSURE_SENSOR2_DDR |= (1<< PRESSURE_SENSOR2_PIN); /* Slave select pins for pressure sensors set to output */
    26ea:	8c 91       	ld	r24, X
    26ec:	80 62       	ori	r24, 0x20	; 32
    26ee:	8c 93       	st	X, r24
	PRESSURE_SENSOR2_PORT |= (1<< PRESSURE_SENSOR2_PIN); /* sturn slave select pin on to dessert this device until required*/
    26f0:	80 81       	ld	r24, Z
    26f2:	80 62       	ori	r24, 0x20	; 32
    26f4:	80 83       	st	Z, r24
	// // initialise pressure sensor 3
	PRESSURE_SENSOR3_DDR |= (1<< PRESSURE_SENSOR3_PIN); /* Slave select pins for pressure sensors set to output */
    26f6:	8c 91       	ld	r24, X
    26f8:	80 64       	ori	r24, 0x40	; 64
    26fa:	8c 93       	st	X, r24
	PRESSURE_SENSOR3_PORT |= (1<< PRESSURE_SENSOR3_PIN); /* sturn slave select pin on to dessert this device until required*/
    26fc:	80 81       	ld	r24, Z
    26fe:	80 64       	ori	r24, 0x40	; 64
    2700:	80 83       	st	Z, r24
	#ifdef LOGGING_ENABLE
	LogDebug("PressureSensorInit() complete\r\n");
	#endif
	#ifndef LOGGING_ENABLE
	printf("PressureSensorInit() complete\r\n");
    2702:	82 ea       	ldi	r24, 0xA2	; 162
    2704:	93 e1       	ldi	r25, 0x13	; 19
    2706:	0c 94 8f 21 	jmp	0x431e	; 0x431e <puts>
    270a:	08 95       	ret

0000270c <ReadPressure>:
	#endif
}

double ReadPressure(uint8_t sensor_id){
    270c:	cf 93       	push	r28
    270e:	df 93       	push	r29
	uint8_t pressure_byte1,pressure_byte2;
	uint16_t pressure_sensor_counts;
	double pressure_sensor_pressure=0;
	PRESSURE_SENSOR_SUPPLY_PORT |= (1<< PRESSURE_SENSOR_SUPPLY_PIN);	/* Power to the pressure sensors is turned on*/
    2710:	28 9a       	sbi	0x05, 0	; 5
    2712:	ef e1       	ldi	r30, 0x1F	; 31
    2714:	fe e4       	ldi	r31, 0x4E	; 78
    2716:	31 97       	sbiw	r30, 0x01	; 1
    2718:	f1 f7       	brne	.-4      	; 0x2716 <ReadPressure+0xa>
    271a:	00 c0       	rjmp	.+0      	; 0x271c <ReadPressure+0x10>
    271c:	00 00       	nop
	_delay_ms(10);	// pressure sensor startup time is 3ms from power to data ready,
	
	//find which pressure sensor has been selected , set the desired pressure sensors chip select line to high
	if (sensor_id == PRESSURE_SENSOR1){
    271e:	81 30       	cpi	r24, 0x01	; 1
    2720:	31 f4       	brne	.+12     	; 0x272e <ReadPressure+0x22>
		//printf(" pressure sensor1 selected\r\n");					//  ***TEST CODE comment out on deployment
		//PRESSURE_SENSOR1_DDR |= (1<<PRESSURE_SENSOR1_PIN);
		PRESSURE_SENSOR1_PORT &= ~(1<<PRESSURE_SENSOR1_PIN); // set chip select to low to activate SPI
    2722:	e2 e0       	ldi	r30, 0x02	; 2
    2724:	f1 e0       	ldi	r31, 0x01	; 1
    2726:	80 81       	ld	r24, Z
    2728:	8f 7e       	andi	r24, 0xEF	; 239
    272a:	80 83       	st	Z, r24
    272c:	14 c0       	rjmp	.+40     	; 0x2756 <ReadPressure+0x4a>
		//_delay_ms(3000); // this is just here for testing
	}
	else if (sensor_id == PRESSURE_SENSOR2){
    272e:	82 30       	cpi	r24, 0x02	; 2
    2730:	31 f4       	brne	.+12     	; 0x273e <ReadPressure+0x32>
		//printf("sensor2\r\n");					//  ***TEST CODE comment out on deployment
		PRESSURE_SENSOR2_PORT &= ~(1<<PRESSURE_SENSOR2_PIN); // set chip select to low to activate SPI
    2732:	e2 e0       	ldi	r30, 0x02	; 2
    2734:	f1 e0       	ldi	r31, 0x01	; 1
    2736:	80 81       	ld	r24, Z
    2738:	8f 7d       	andi	r24, 0xDF	; 223
    273a:	80 83       	st	Z, r24
    273c:	0c c0       	rjmp	.+24     	; 0x2756 <ReadPressure+0x4a>
	}
	else if (sensor_id == PRESSURE_SENSOR3){
    273e:	83 30       	cpi	r24, 0x03	; 3
    2740:	31 f4       	brne	.+12     	; 0x274e <ReadPressure+0x42>
		//printf("sensor3\r\n");					//  ***TEST CODE comment out on deployment
		PRESSURE_SENSOR3_PORT &= ~(1<<PRESSURE_SENSOR3_PIN); // set chip select to low to activate SPI
    2742:	e2 e0       	ldi	r30, 0x02	; 2
    2744:	f1 e0       	ldi	r31, 0x01	; 1
    2746:	80 81       	ld	r24, Z
    2748:	8f 7b       	andi	r24, 0xBF	; 191
    274a:	80 83       	st	Z, r24
    274c:	04 c0       	rjmp	.+8      	; 0x2756 <ReadPressure+0x4a>
	}
	else{
		printf("no valid pressure sensor number selected in ReadPressure()\r\n");					//  ***TEST CODE comment out on deployment
    274e:	81 ec       	ldi	r24, 0xC1	; 193
    2750:	93 e1       	ldi	r25, 0x13	; 19
    2752:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
	}


	//get first byte from pressure sensor
	pressure_byte1 = (SPI_tranceiver_byte (0xFF));
    2756:	8f ef       	ldi	r24, 0xFF	; 255
    2758:	ca d1       	rcall	.+916    	; 0x2aee <SPI_tranceiver_byte>
    275a:	c8 2f       	mov	r28, r24
	// 	printf("pressure_byte1 = ");                //  ***TEST CODE comment out on deployment
	// 	uart_printBinaryByte(0,pressure_byte1);		// Print the value from the SPI data register
	// 	printf("\r\n");	//get second byte from pressure sensor
	pressure_byte2 = (SPI_tranceiver_byte (0xFF));
    275c:	8f ef       	ldi	r24, 0xFF	; 255
    275e:	c7 d1       	rcall	.+910    	; 0x2aee <SPI_tranceiver_byte>
    2760:	d8 2f       	mov	r29, r24
	// 	printf("pressure_byte2 = ");                          //  ***TEST CODE comment out on deployment
	// 	uart_printBinaryByte(0,pressure_byte2);
	// 	printf("\r\n"
	
	//get third byte from pressure sensor
	SPI_tranceiver_byte (0xFF);
    2762:	8f ef       	ldi	r24, 0xFF	; 255
    2764:	c4 d1       	rcall	.+904    	; 0x2aee <SPI_tranceiver_byte>
	// 	printf("pressure_byte3 = ");                          //  ***TEST CODE comment out on deployment
	// 	uart_printBinaryByte(0,pressure_byte3);
	// 	printf("\r\n");
	//get fourth byte from pressure sensor
	SPI_tranceiver_byte (0xFF);
    2766:	8f ef       	ldi	r24, 0xFF	; 255
    2768:	c2 d1       	rcall	.+900    	; 0x2aee <SPI_tranceiver_byte>
    276a:	8c 2f       	mov	r24, r28
	// 	printf("pressure_byte4 = ");                          //  ***TEST CODE comment out on deployment
	// 	uart_printBinaryByte(0,pressure_byte4);
	// 	printf("\r\n");
	// read the status bits
	switch(pressure_byte1 & 0b11000000){
    276c:	80 7c       	andi	r24, 0xC0	; 192
    276e:	81 30       	cpi	r24, 0x01	; 1
    2770:	21 f1       	breq	.+72     	; 0x27ba <ReadPressure+0xae>
    2772:	28 f0       	brcs	.+10     	; 0x277e <ReadPressure+0x72>
    2774:	8a 30       	cpi	r24, 0x0A	; 10
    2776:	49 f1       	breq	.+82     	; 0x27ca <ReadPressure+0xbe>
    2778:	8b 30       	cpi	r24, 0x0B	; 11
    277a:	79 f1       	breq	.+94     	; 0x27da <ReadPressure+0xce>
    277c:	36 c0       	rjmp	.+108    	; 0x27ea <ReadPressure+0xde>
    277e:	cf 73       	andi	r28, 0x3F	; 63
		// get the pressure sensor counts by concatenating pressure_byte1 and pressure_byte2 and removing the status bits (2MSBs)
		pressure_sensor_counts = (((pressure_byte1 & 0b00111111)<< 8) + pressure_byte2);
		// 			printf("pressure data (counts) = 0x %x\r\n", pressure_sensor_counts);                      
		
		// calculate pressure from counts - to prevent overflow this formula had been divided to keep the data within the AVR float range. the formula is from the honneywell technical note"SPI communication with honeywell digital output pressure sensors"
		pressure_sensor_pressure= (((((pressure_sensor_counts - 0)/(163.83))*(PRESSURE_SENSOR_pressureMAX - PRESSURE_SENSOR_pressureMIN))/100)+ PRESSURE_SENSOR_pressureMIN);
    2780:	6c 2f       	mov	r22, r28
    2782:	70 e0       	ldi	r23, 0x00	; 0
    2784:	76 2f       	mov	r23, r22
    2786:	66 27       	eor	r22, r22
    2788:	6d 0f       	add	r22, r29
    278a:	71 1d       	adc	r23, r1
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	0a d6       	rcall	.+3092   	; 0x33a6 <__floatunsisf>
    2792:	2b e7       	ldi	r18, 0x7B	; 123
    2794:	34 ed       	ldi	r19, 0xD4	; 212
    2796:	43 e2       	ldi	r20, 0x23	; 35
    2798:	53 e4       	ldi	r21, 0x43	; 67
    279a:	9d d5       	rcall	.+2874   	; 0x32d6 <__divsf3>
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	46 e1       	ldi	r20, 0x16	; 22
    27a2:	53 e4       	ldi	r21, 0x43	; 67
    27a4:	b6 d6       	rcall	.+3436   	; 0x3512 <__mulsf3>
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	48 ec       	ldi	r20, 0xC8	; 200
    27ac:	52 e4       	ldi	r21, 0x42	; 66
    27ae:	93 d5       	rcall	.+2854   	; 0x32d6 <__divsf3>
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	a9 01       	movw	r20, r18
    27b6:	27 d5       	rcall	.+2638   	; 0x3206 <__addsf3>
    27b8:	1b c0       	rjmp	.+54     	; 0x27f0 <ReadPressure+0xe4>
		// print pressure
		//printf ("pressure in fuction: %3.2f psi\r\n", pressure_sensor_pressure);
		break;
    27ba:	8d ef       	ldi	r24, 0xFD	; 253
		case 01 :
		printf("Honeywell Pressure sensor: device in command mode\r\n");
    27bc:	93 e1       	ldi	r25, 0x13	; 19
    27be:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
    27c2:	60 e0       	ldi	r22, 0x00	; 0
}

double ReadPressure(uint8_t sensor_id){
	uint8_t pressure_byte1,pressure_byte2;
	uint16_t pressure_sensor_counts;
	double pressure_sensor_pressure=0;
    27c4:	70 e0       	ldi	r23, 0x00	; 0
    27c6:	cb 01       	movw	r24, r22
    27c8:	13 c0       	rjmp	.+38     	; 0x27f0 <ReadPressure+0xe4>
		// print pressure
		//printf ("pressure in fuction: %3.2f psi\r\n", pressure_sensor_pressure);
		break;
		case 01 :
		printf("Honeywell Pressure sensor: device in command mode\r\n");
		break;
    27ca:	80 e3       	ldi	r24, 0x30	; 48
		case 10 :
		printf("Honeywell Pressure sensor: stale data - data already fetched\r\n");
    27cc:	94 e1       	ldi	r25, 0x14	; 20
    27ce:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
    27d2:	60 e0       	ldi	r22, 0x00	; 0
}

double ReadPressure(uint8_t sensor_id){
	uint8_t pressure_byte1,pressure_byte2;
	uint16_t pressure_sensor_counts;
	double pressure_sensor_pressure=0;
    27d4:	70 e0       	ldi	r23, 0x00	; 0
    27d6:	cb 01       	movw	r24, r22
    27d8:	0b c0       	rjmp	.+22     	; 0x27f0 <ReadPressure+0xe4>
		case 01 :
		printf("Honeywell Pressure sensor: device in command mode\r\n");
		break;
		case 10 :
		printf("Honeywell Pressure sensor: stale data - data already fetched\r\n");
		break;
    27da:	8e e6       	ldi	r24, 0x6E	; 110
		case 11 :
		printf("Honeywell Pressure sensor: diagnostic condition\r\n");
    27dc:	94 e1       	ldi	r25, 0x14	; 20
    27de:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
    27e2:	60 e0       	ldi	r22, 0x00	; 0
}

double ReadPressure(uint8_t sensor_id){
	uint8_t pressure_byte1,pressure_byte2;
	uint16_t pressure_sensor_counts;
	double pressure_sensor_pressure=0;
    27e4:	70 e0       	ldi	r23, 0x00	; 0
    27e6:	cb 01       	movw	r24, r22
    27e8:	03 c0       	rjmp	.+6      	; 0x27f0 <ReadPressure+0xe4>
		case 10 :
		printf("Honeywell Pressure sensor: stale data - data already fetched\r\n");
		break;
		case 11 :
		printf("Honeywell Pressure sensor: diagnostic condition\r\n");
		break;
    27ea:	60 e0       	ldi	r22, 0x00	; 0
}

double ReadPressure(uint8_t sensor_id){
	uint8_t pressure_byte1,pressure_byte2;
	uint16_t pressure_sensor_counts;
	double pressure_sensor_pressure=0;
    27ec:	70 e0       	ldi	r23, 0x00	; 0
    27ee:	cb 01       	movw	r24, r22
    27f0:	e2 e0       	ldi	r30, 0x02	; 2
		break;
		case 11 :
		printf("Honeywell Pressure sensor: diagnostic condition\r\n");
		break;
	}
	PRESSURE_SENSOR1_PORT |= (1<<PRESSURE_SENSOR1_PIN); // deselects the chip select pin attached to the pressure sensors
    27f2:	f1 e0       	ldi	r31, 0x01	; 1
    27f4:	20 81       	ld	r18, Z
    27f6:	20 61       	ori	r18, 0x10	; 16
    27f8:	20 83       	st	Z, r18
    27fa:	20 81       	ld	r18, Z
	PRESSURE_SENSOR2_PORT |= (1<<PRESSURE_SENSOR2_PIN); // deselects the chip select pin attached to the pressure sensors
    27fc:	20 62       	ori	r18, 0x20	; 32
    27fe:	20 83       	st	Z, r18
    2800:	20 81       	ld	r18, Z
	PRESSURE_SENSOR3_PORT |= (1<<PRESSURE_SENSOR3_PIN); // deselects the chip select pin attached to the pressure sensors
    2802:	20 64       	ori	r18, 0x40	; 64
    2804:	20 83       	st	Z, r18
    2806:	28 98       	cbi	0x05, 0	; 5
	PRESSURE_SENSOR_SUPPLY_PORT &= ~(1<< PRESSURE_SENSOR_SUPPLY_PIN);	/* Power to the pressure sensors is turned off*/
    2808:	df 91       	pop	r29
	//printf("ReadPressure() complete: Pressure sensors deselected\r\n");
	return pressure_sensor_pressure;
}
    280a:	cf 91       	pop	r28
    280c:	08 95       	ret

0000280e <paddle_callback_1Hz>:
    280e:	cf 93       	push	r28
	if(val>255)
		val = 255;
	*avg = val;
}

void paddle_callback_1Hz(void){
    2810:	df 93       	push	r29
	cli();
    2812:	f8 94       	cli
	counter_11.pps_last = counter_11.pcint_counter;
    2814:	e7 e3       	ldi	r30, 0x37	; 55
    2816:	f6 e1       	ldi	r31, 0x16	; 22
    2818:	80 81       	ld	r24, Z
    281a:	91 81       	ldd	r25, Z+1	; 0x01
    281c:	91 87       	std	Z+9, r25	; 0x09
    281e:	80 87       	std	Z+8, r24	; 0x08
	counter_12.pps_last = counter_12.pcint_counter;
    2820:	c6 e4       	ldi	r28, 0x46	; 70
    2822:	d6 e1       	ldi	r29, 0x16	; 22
    2824:	88 81       	ld	r24, Y
    2826:	99 81       	ldd	r25, Y+1	; 0x01
    2828:	99 87       	std	Y+9, r25	; 0x09
    282a:	88 87       	std	Y+8, r24	; 0x08
	counter_13.pps_last = counter_13.pcint_counter;
    282c:	a4 e5       	ldi	r26, 0x54	; 84
    282e:	b6 e1       	ldi	r27, 0x16	; 22
    2830:	8d 91       	ld	r24, X+
    2832:	9c 91       	ld	r25, X
    2834:	11 97       	sbiw	r26, 0x01	; 1
    2836:	19 96       	adiw	r26, 0x09	; 9
    2838:	9c 93       	st	X, r25
    283a:	8e 93       	st	-X, r24
    283c:	18 97       	sbiw	r26, 0x08	; 8
	
	counter_11.pcint_counter = 0;
    283e:	11 82       	std	Z+1, r1	; 0x01
    2840:	10 82       	st	Z, r1
	counter_12.pcint_counter = 0;
    2842:	19 82       	std	Y+1, r1	; 0x01
    2844:	18 82       	st	Y, r1
	counter_13.pcint_counter = 0;
    2846:	11 96       	adiw	r26, 0x01	; 1
    2848:	1c 92       	st	X, r1
    284a:	1e 92       	st	-X, r1
	sei();
    284c:	78 94       	sei
uint16_t paddle_net_mL(void){
	return pulse_to_mL(counter_11.pcint_total) ;
}

inline void update_avg(volatile uint8_t* avg, uint16_t* new){
	uint16_t val = *new;
    284e:	80 85       	ldd	r24, Z+8	; 0x08
    2850:	91 85       	ldd	r25, Z+9	; 0x09
	if(val>32767)
    2852:	99 23       	and	r25, r25
    2854:	14 f4       	brge	.+4      	; 0x285a <paddle_callback_1Hz+0x4c>
		val = 32767;
    2856:	8f ef       	ldi	r24, 0xFF	; 255
    2858:	9f e7       	ldi	r25, 0x7F	; 127
	val += *avg;
    285a:	20 91 3e 16 	lds	r18, 0x163E	; 0x80163e <counter_11+0x7>
    285e:	82 0f       	add	r24, r18
    2860:	91 1d       	adc	r25, r1
	val /= 2;
    2862:	96 95       	lsr	r25
    2864:	87 95       	ror	r24
	if(val>255)
		val = 255;
	*avg = val;
    2866:	8f 3f       	cpi	r24, 0xFF	; 255
    2868:	91 05       	cpc	r25, r1
    286a:	19 f0       	breq	.+6      	; 0x2872 <paddle_callback_1Hz+0x64>
    286c:	10 f0       	brcs	.+4      	; 0x2872 <paddle_callback_1Hz+0x64>
    286e:	8f ef       	ldi	r24, 0xFF	; 255
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	80 93 3e 16 	sts	0x163E, r24	; 0x80163e <counter_11+0x7>
uint16_t paddle_net_mL(void){
	return pulse_to_mL(counter_11.pcint_total) ;
}

inline void update_avg(volatile uint8_t* avg, uint16_t* new){
	uint16_t val = *new;
    2876:	80 91 4e 16 	lds	r24, 0x164E	; 0x80164e <counter_12+0x8>
    287a:	90 91 4f 16 	lds	r25, 0x164F	; 0x80164f <counter_12+0x9>
	if(val>32767)
    287e:	99 23       	and	r25, r25
    2880:	14 f4       	brge	.+4      	; 0x2886 <paddle_callback_1Hz+0x78>
		val = 32767;
    2882:	8f ef       	ldi	r24, 0xFF	; 255
    2884:	9f e7       	ldi	r25, 0x7F	; 127
	val += *avg;
    2886:	20 91 4d 16 	lds	r18, 0x164D	; 0x80164d <counter_12+0x7>
    288a:	82 0f       	add	r24, r18
    288c:	91 1d       	adc	r25, r1
	val /= 2;
    288e:	96 95       	lsr	r25
    2890:	87 95       	ror	r24
	if(val>255)
		val = 255;
	*avg = val;
    2892:	8f 3f       	cpi	r24, 0xFF	; 255
    2894:	91 05       	cpc	r25, r1
    2896:	19 f0       	breq	.+6      	; 0x289e <paddle_callback_1Hz+0x90>
    2898:	10 f0       	brcs	.+4      	; 0x289e <paddle_callback_1Hz+0x90>
    289a:	8f ef       	ldi	r24, 0xFF	; 255
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	80 93 4d 16 	sts	0x164D, r24	; 0x80164d <counter_12+0x7>
uint16_t paddle_net_mL(void){
	return pulse_to_mL(counter_11.pcint_total) ;
}

inline void update_avg(volatile uint8_t* avg, uint16_t* new){
	uint16_t val = *new;
    28a2:	80 91 5c 16 	lds	r24, 0x165C	; 0x80165c <counter_13+0x8>
    28a6:	90 91 5d 16 	lds	r25, 0x165D	; 0x80165d <counter_13+0x9>
	if(val>32767)
    28aa:	99 23       	and	r25, r25
    28ac:	14 f4       	brge	.+4      	; 0x28b2 <paddle_callback_1Hz+0xa4>
		val = 32767;
    28ae:	8f ef       	ldi	r24, 0xFF	; 255
    28b0:	9f e7       	ldi	r25, 0x7F	; 127
	val += *avg;
    28b2:	20 91 5b 16 	lds	r18, 0x165B	; 0x80165b <counter_13+0x7>
    28b6:	82 0f       	add	r24, r18
    28b8:	91 1d       	adc	r25, r1
	val /= 2;
    28ba:	96 95       	lsr	r25
    28bc:	87 95       	ror	r24
	if(val>255)
		val = 255;
	*avg = val;
    28be:	8f 3f       	cpi	r24, 0xFF	; 255
    28c0:	91 05       	cpc	r25, r1
    28c2:	19 f0       	breq	.+6      	; 0x28ca <paddle_callback_1Hz+0xbc>
    28c4:	10 f0       	brcs	.+4      	; 0x28ca <paddle_callback_1Hz+0xbc>
    28c6:	8f ef       	ldi	r24, 0xFF	; 255
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	a4 e5       	ldi	r26, 0x54	; 84
    28cc:	b6 e1       	ldi	r27, 0x16	; 22
    28ce:	17 96       	adiw	r26, 0x07	; 7
    28d0:	8c 93       	st	X, r24
    28d2:	17 97       	sbiw	r26, 0x07	; 7
	
	update_avg(&(counter_11.pps_avg), (uint16_t*) &(counter_11.pps_last));
	update_avg(&(counter_12.pps_avg), (uint16_t*) &(counter_12.pps_last));
	update_avg(&(counter_13.pps_avg), (uint16_t*) &(counter_13.pps_last));
	
	counter_11.pcint_total += counter_11.pps_last;
    28d4:	e7 e3       	ldi	r30, 0x37	; 55
    28d6:	f6 e1       	ldi	r31, 0x16	; 22
    28d8:	80 85       	ldd	r24, Z+8	; 0x08
    28da:	91 85       	ldd	r25, Z+9	; 0x09
    28dc:	42 81       	ldd	r20, Z+2	; 0x02
    28de:	53 81       	ldd	r21, Z+3	; 0x03
    28e0:	64 81       	ldd	r22, Z+4	; 0x04
    28e2:	75 81       	ldd	r23, Z+5	; 0x05
    28e4:	48 0f       	add	r20, r24
    28e6:	59 1f       	adc	r21, r25
    28e8:	61 1d       	adc	r22, r1
    28ea:	71 1d       	adc	r23, r1
    28ec:	42 83       	std	Z+2, r20	; 0x02
    28ee:	53 83       	std	Z+3, r21	; 0x03
    28f0:	64 83       	std	Z+4, r22	; 0x04
    28f2:	75 83       	std	Z+5, r23	; 0x05
	counter_12.pcint_total += counter_12.pps_last;
    28f4:	c6 e4       	ldi	r28, 0x46	; 70
    28f6:	d6 e1       	ldi	r29, 0x16	; 22
    28f8:	88 85       	ldd	r24, Y+8	; 0x08
    28fa:	99 85       	ldd	r25, Y+9	; 0x09
    28fc:	4a 81       	ldd	r20, Y+2	; 0x02
    28fe:	5b 81       	ldd	r21, Y+3	; 0x03
    2900:	6c 81       	ldd	r22, Y+4	; 0x04
    2902:	7d 81       	ldd	r23, Y+5	; 0x05
    2904:	48 0f       	add	r20, r24
    2906:	59 1f       	adc	r21, r25
    2908:	61 1d       	adc	r22, r1
    290a:	71 1d       	adc	r23, r1
    290c:	4a 83       	std	Y+2, r20	; 0x02
    290e:	5b 83       	std	Y+3, r21	; 0x03
    2910:	6c 83       	std	Y+4, r22	; 0x04
    2912:	7d 83       	std	Y+5, r23	; 0x05
	counter_13.pcint_total += counter_13.pps_last;
    2914:	18 96       	adiw	r26, 0x08	; 8
    2916:	8d 91       	ld	r24, X+
    2918:	9c 91       	ld	r25, X
    291a:	19 97       	sbiw	r26, 0x09	; 9
    291c:	12 96       	adiw	r26, 0x02	; 2
    291e:	4d 91       	ld	r20, X+
    2920:	5d 91       	ld	r21, X+
    2922:	6d 91       	ld	r22, X+
    2924:	7c 91       	ld	r23, X
    2926:	15 97       	sbiw	r26, 0x05	; 5
    2928:	48 0f       	add	r20, r24
    292a:	59 1f       	adc	r21, r25
    292c:	61 1d       	adc	r22, r1
    292e:	71 1d       	adc	r23, r1
    2930:	12 96       	adiw	r26, 0x02	; 2
    2932:	4d 93       	st	X+, r20
    2934:	5d 93       	st	X+, r21
    2936:	6d 93       	st	X+, r22
    2938:	7c 93       	st	X, r23
    293a:	15 97       	sbiw	r26, 0x05	; 5
	//uart_puts(0,"hi Middy\r\n");
	uint16_t uL_last_second;
	if(counter_11.pps_last >0){
    293c:	80 85       	ldd	r24, Z+8	; 0x08
    293e:	91 85       	ldd	r25, Z+9	; 0x09
    2940:	89 2b       	or	r24, r25
    2942:	69 f0       	breq	.+26     	; 0x295e <paddle_callback_1Hz+0x150>
		uL_last_second = 134 * counter_11.pps_last + 638;
    2944:	80 91 3f 16 	lds	r24, 0x163F	; 0x80163f <counter_11+0x8>
    2948:	90 91 40 16 	lds	r25, 0x1640	; 0x801640 <counter_11+0x9>
    294c:	46 e8       	ldi	r20, 0x86	; 134
    294e:	48 9f       	mul	r20, r24
    2950:	90 01       	movw	r18, r0
    2952:	49 9f       	mul	r20, r25
    2954:	30 0d       	add	r19, r0
    2956:	11 24       	eor	r1, r1
    2958:	22 58       	subi	r18, 0x82	; 130
    295a:	3d 4f       	sbci	r19, 0xFD	; 253
    295c:	02 c0       	rjmp	.+4      	; 0x2962 <paddle_callback_1Hz+0x154>
	} else {
		uL_last_second = 0;
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
	}
	uL_total += uL_last_second;
    2962:	80 91 50 16 	lds	r24, 0x1650	; 0x801650 <uL_total>
    2966:	90 91 51 16 	lds	r25, 0x1651	; 0x801651 <uL_total+0x1>
    296a:	a0 91 52 16 	lds	r26, 0x1652	; 0x801652 <uL_total+0x2>
    296e:	b0 91 53 16 	lds	r27, 0x1653	; 0x801653 <uL_total+0x3>
    2972:	82 0f       	add	r24, r18
    2974:	93 1f       	adc	r25, r19
    2976:	a1 1d       	adc	r26, r1
    2978:	b1 1d       	adc	r27, r1
    297a:	80 93 50 16 	sts	0x1650, r24	; 0x801650 <uL_total>
    297e:	90 93 51 16 	sts	0x1651, r25	; 0x801651 <uL_total+0x1>
    2982:	a0 93 52 16 	sts	0x1652, r26	; 0x801652 <uL_total+0x2>
    2986:	b0 93 53 16 	sts	0x1653, r27	; 0x801653 <uL_total+0x3>
	
	if(counter_11.pps_last == 0){
    298a:	80 91 3f 16 	lds	r24, 0x163F	; 0x80163f <counter_11+0x8>
    298e:	90 91 40 16 	lds	r25, 0x1640	; 0x801640 <counter_11+0x9>
    2992:	89 2b       	or	r24, r25
    2994:	31 f4       	brne	.+12     	; 0x29a2 <paddle_callback_1Hz+0x194>
		secondsLow ++; 
    2996:	80 91 36 16 	lds	r24, 0x1636	; 0x801636 <secondsLow>
    299a:	8f 5f       	subi	r24, 0xFF	; 255
    299c:	80 93 36 16 	sts	0x1636, r24	; 0x801636 <secondsLow>
    29a0:	07 c0       	rjmp	.+14     	; 0x29b0 <paddle_callback_1Hz+0x1a2>
	} else if (secondsLow>0) {
    29a2:	80 91 36 16 	lds	r24, 0x1636	; 0x801636 <secondsLow>
    29a6:	88 23       	and	r24, r24
    29a8:	19 f0       	breq	.+6      	; 0x29b0 <paddle_callback_1Hz+0x1a2>
		secondsLow --; 
    29aa:	81 50       	subi	r24, 0x01	; 1
    29ac:	80 93 36 16 	sts	0x1636, r24	; 0x801636 <secondsLow>
	}
}
    29b0:	df 91       	pop	r29
    29b2:	cf 91       	pop	r28
    29b4:	08 95       	ret

000029b6 <inlet_valve_denergise>:
void inlet_valve_denergise(void){
	#ifdef LOGGING_ENABLE
		LogDebug("inlet_valve_denergise() called\r\n");
	#endif
	#ifndef LOGGING_ENABLE
		printf("inlet_valve_denergise() called\r\n");
    29b6:	8c e5       	ldi	r24, 0x5C	; 92
    29b8:	9d e0       	ldi	r25, 0x0D	; 13
    29ba:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
	#endif
	/*set pwm pin PH6/OCR2B to 0 to deenergise the solenoid*/
	INLET_VALVE_PWM_PIN = 0; // set the 8-bit pwm value for the valve driver 0-255
    29be:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    29c2:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
    29c6:	08 95       	ret

000029c8 <inlet_valve_energise>:
void inlet_valve_energise(void){
	#ifdef LOGGING_ENABLE
		LogDebug("inlet_valve_energise() called\r\n");
	#endif
	#ifndef LOGGING_ENABLE
		printf("inlet_valve_energise() called\r\n");
    29c8:	8c e7       	ldi	r24, 0x7C	; 124
    29ca:	9d e0       	ldi	r25, 0x0D	; 13
    29cc:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
	#endif
	//printf("inlet_valve_energise() called\r\n");
	/*activate hit and hold for parker r9 valve set pwm pin PH6/OCR2B to full (255/255, 12V) for 30ms then to half (128/255, 6V) to hold*/
	INLET_VALVE_PWM_PIN = 255; // set the 8-bit pwm value for the valve driver 0-255
    29d0:	ec e2       	ldi	r30, 0x2C	; 44
    29d2:	f1 e0       	ldi	r31, 0x01	; 1
    29d4:	8f ef       	ldi	r24, 0xFF	; 255
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	91 83       	std	Z+1, r25	; 0x01
    29da:	80 83       	st	Z, r24
    29dc:	2f e7       	ldi	r18, 0x7F	; 127
    29de:	8a e1       	ldi	r24, 0x1A	; 26
    29e0:	96 e0       	ldi	r25, 0x06	; 6
    29e2:	21 50       	subi	r18, 0x01	; 1
    29e4:	80 40       	sbci	r24, 0x00	; 0
    29e6:	90 40       	sbci	r25, 0x00	; 0
    29e8:	e1 f7       	brne	.-8      	; 0x29e2 <inlet_valve_energise+0x1a>
    29ea:	00 c0       	rjmp	.+0      	; 0x29ec <inlet_valve_energise+0x24>
    29ec:	00 00       	nop
	_delay_ms(250);  //************* set at 250ms, lengthened for testingn
	INLET_VALVE_PWM_PIN = 140; // set the 8-bit pwm value for the valve driver 0-255
    29ee:	8c e8       	ldi	r24, 0x8C	; 140
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	91 83       	std	Z+1, r25	; 0x01
    29f4:	80 83       	st	Z, r24
    29f6:	08 95       	ret

000029f8 <settings_Load>:

#include <avr/eeprom.h>
#include "settings.h"

settings_Union settings_Load()
{
    29f8:	af 92       	push	r10
    29fa:	bf 92       	push	r11
    29fc:	cf 92       	push	r12
    29fe:	df 92       	push	r13
    2a00:	ef 92       	push	r14
    2a02:	ff 92       	push	r15
    2a04:	0f 93       	push	r16
    2a06:	1f 93       	push	r17
    2a08:	cf 93       	push	r28
    2a0a:	df 93       	push	r29
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
    2a10:	66 97       	sbiw	r28, 0x16	; 22
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	f8 94       	cli
    2a16:	de bf       	out	0x3e, r29	; 62
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	cd bf       	out	0x3d, r28	; 61
    2a1c:	5c 01       	movw	r10, r24
    2a1e:	ce 01       	movw	r24, r28
    2a20:	01 96       	adiw	r24, 0x01	; 1
    2a22:	7c 01       	movw	r14, r24
    2a24:	6e 01       	movw	r12, r28
    2a26:	95 e1       	ldi	r25, 0x15	; 21
    2a28:	c9 0e       	add	r12, r25
    2a2a:	d1 1c       	adc	r13, r1
    2a2c:	87 01       	movw	r16, r14
	settings_Union returnMe;
	for (unsigned int i = 0; i < SETTINGSIZE; i++)
	{
		returnMe.asArray[i] = eeprom_read_word((const uint16_t *)(i*2));
    2a2e:	c8 01       	movw	r24, r16
    2a30:	8e 19       	sub	r24, r14
    2a32:	9f 09       	sbc	r25, r15
    2a34:	0e 94 2e 24 	call	0x485c	; 0x485c <eeprom_read_word>
    2a38:	f8 01       	movw	r30, r16
    2a3a:	81 93       	st	Z+, r24
    2a3c:	91 93       	st	Z+, r25
    2a3e:	8f 01       	movw	r16, r30
#include "settings.h"

settings_Union settings_Load()
{
	settings_Union returnMe;
	for (unsigned int i = 0; i < SETTINGSIZE; i++)
    2a40:	ec 15       	cp	r30, r12
    2a42:	fd 05       	cpc	r31, r13
    2a44:	a1 f7       	brne	.-24     	; 0x2a2e <settings_Load+0x36>
	{
		returnMe.asArray[i] = eeprom_read_word((const uint16_t *)(i*2));
	}
	
	return returnMe;
    2a46:	86 e1       	ldi	r24, 0x16	; 22
    2a48:	fe 01       	movw	r30, r28
    2a4a:	31 96       	adiw	r30, 0x01	; 1
    2a4c:	d5 01       	movw	r26, r10
    2a4e:	01 90       	ld	r0, Z+
    2a50:	0d 92       	st	X+, r0
    2a52:	8a 95       	dec	r24
    2a54:	e1 f7       	brne	.-8      	; 0x2a4e <settings_Load+0x56>
}
    2a56:	c5 01       	movw	r24, r10
    2a58:	66 96       	adiw	r28, 0x16	; 22
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	de bf       	out	0x3e, r29	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	cd bf       	out	0x3d, r28	; 61
    2a64:	df 91       	pop	r29
    2a66:	cf 91       	pop	r28
    2a68:	1f 91       	pop	r17
    2a6a:	0f 91       	pop	r16
    2a6c:	ff 90       	pop	r15
    2a6e:	ef 90       	pop	r14
    2a70:	df 90       	pop	r13
    2a72:	cf 90       	pop	r12
    2a74:	bf 90       	pop	r11
    2a76:	af 90       	pop	r10
    2a78:	08 95       	ret

00002a7a <settings_Save>:

void settings_Save(settings_Union input)
{
    2a7a:	cf 92       	push	r12
    2a7c:	df 92       	push	r13
    2a7e:	ef 92       	push	r14
    2a80:	ff 92       	push	r15
    2a82:	0f 93       	push	r16
    2a84:	1f 93       	push	r17
    2a86:	cf 93       	push	r28
    2a88:	df 93       	push	r29
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
    2a8e:	6e 01       	movw	r12, r28
    2a90:	20 e2       	ldi	r18, 0x20	; 32
    2a92:	c2 0e       	add	r12, r18
    2a94:	d1 1c       	adc	r13, r1
    2a96:	8e 01       	movw	r16, r28
    2a98:	04 5f       	subi	r16, 0xF4	; 244
    2a9a:	1f 4f       	sbci	r17, 0xFF	; 255
	for (unsigned char i = 0; i < SETTINGSIZE; i++)
	{
		eeprom_update_word((uint16_t *)(i*2), input.asArray[i]);
    2a9c:	8e ef       	ldi	r24, 0xFE	; 254
    2a9e:	9f ef       	ldi	r25, 0xFF	; 255
    2aa0:	7c 01       	movw	r14, r24
    2aa2:	e0 1a       	sub	r14, r16
    2aa4:	f1 0a       	sbc	r15, r17
    2aa6:	f8 01       	movw	r30, r16
    2aa8:	61 91       	ld	r22, Z+
    2aaa:	71 91       	ld	r23, Z+
    2aac:	8f 01       	movw	r16, r30
    2aae:	c7 01       	movw	r24, r14
    2ab0:	8e 0f       	add	r24, r30
    2ab2:	9f 1f       	adc	r25, r31
    2ab4:	0e 94 33 24 	call	0x4866	; 0x4866 <eeprom_update_word>
	return returnMe;
}

void settings_Save(settings_Union input)
{
	for (unsigned char i = 0; i < SETTINGSIZE; i++)
    2ab8:	0c 15       	cp	r16, r12
    2aba:	1d 05       	cpc	r17, r13
    2abc:	a1 f7       	brne	.-24     	; 0x2aa6 <settings_Save+0x2c>
	{
		eeprom_update_word((uint16_t *)(i*2), input.asArray[i]);
	}
}
    2abe:	df 91       	pop	r29
    2ac0:	cf 91       	pop	r28
    2ac2:	1f 91       	pop	r17
    2ac4:	0f 91       	pop	r16
    2ac6:	ff 90       	pop	r15
    2ac8:	ef 90       	pop	r14
    2aca:	df 90       	pop	r13
    2acc:	cf 90       	pop	r12
    2ace:	08 95       	ret

00002ad0 <spi_init_master>:
{
	#ifdef LOGGING_ENABLE
	LogDebug("spi_init_master() started\r\n");
	#endif
	#ifndef LOGGING_ENABLE
	printf("spi_init_master() started\r\n");
    2ad0:	8f e9       	ldi	r24, 0x9F	; 159
    2ad2:	94 e1       	ldi	r25, 0x14	; 20
    2ad4:	0e 94 8f 21 	call	0x431e	; 0x431e <puts>
	#endif
	
	// Set MOSI, SCK, SS as Output SS must be output (or input held HIGH for SPI master to work)  
	SPI_DDR |= (1<<SPI_MOSI_PIN)|(1<<SPI_SCK_PIN)|(1<<SPI_SS_PIN);
    2ad8:	84 b1       	in	r24, 0x04	; 4
    2ada:	87 60       	ori	r24, 0x07	; 7
    2adc:	84 b9       	out	0x04, r24	; 4
	// Enable SPI, Set as Master, Prescaler: Fosc/16, Honeywell pressure sensor operates in SPI mode0 (SCLK low during idle and samples on leading clock edge)
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    2ade:	8c b5       	in	r24, 0x2c	; 44
    2ae0:	81 65       	ori	r24, 0x51	; 81
    2ae2:	8c bd       	out	0x2c, r24	; 44
	#ifdef LOGGING_ENABLE
	LogDebug("spi_init_master() complete\r\n");
	#endif
	#ifndef LOGGING_ENABLE
	printf("spi_init_master() complete\r\n");
    2ae4:	8a eb       	ldi	r24, 0xBA	; 186
    2ae6:	94 e1       	ldi	r25, 0x14	; 20
    2ae8:	0c 94 8f 21 	jmp	0x431e	; 0x431e <puts>
    2aec:	08 95       	ret

00002aee <SPI_tranceiver_byte>:
	#endif
}

uint8_t SPI_tranceiver_byte (uint8_t SPI_byte_to_send){		// sends and receives one byte from the SPI bus
	SPDR = SPI_byte_to_send; // Load data into the buffer
    2aee:	8e bd       	out	0x2e, r24	; 46
	//printf("SPI data register loaded with byte, waiting for transmission to complete\r\n");
	while(!(SPSR & (1<<SPIF) ));   //Wait until transmission complete
    2af0:	0d b4       	in	r0, 0x2d	; 45
    2af2:	07 fe       	sbrs	r0, 7
    2af4:	fd cf       	rjmp	.-6      	; 0x2af0 <SPI_tranceiver_byte+0x2>
	return SPDR; // read data from SPI register
    2af6:	8e b5       	in	r24, 0x2e	; 46
}
    2af8:	08 95       	ret

00002afa <uart_puts>:
void usart_pstr(char *s) {
	while (*s) {
		uart_putc(0,*s);
		s++;
	}
}
    2afa:	0f 93       	push	r16
    2afc:	1f 93       	push	r17
    2afe:	cf 93       	push	r28
    2b00:	df 93       	push	r29
    2b02:	eb 01       	movw	r28, r22
    2b04:	68 81       	ld	r22, Y
    2b06:	66 23       	and	r22, r22
    2b08:	39 f0       	breq	.+14     	; 0x2b18 <uart_puts+0x1e>
    2b0a:	8c 01       	movw	r16, r24
    2b0c:	21 96       	adiw	r28, 0x01	; 1
    2b0e:	c8 01       	movw	r24, r16
    2b10:	47 d0       	rcall	.+142    	; 0x2ba0 <uart_putc>
    2b12:	69 91       	ld	r22, Y+
    2b14:	61 11       	cpse	r22, r1
    2b16:	fb cf       	rjmp	.-10     	; 0x2b0e <uart_puts+0x14>
    2b18:	df 91       	pop	r29
    2b1a:	cf 91       	pop	r28
    2b1c:	1f 91       	pop	r17
    2b1e:	0f 91       	pop	r16
    2b20:	08 95       	ret

00002b22 <init_UART>:
    2b22:	00 97       	sbiw	r24, 0x00	; 0
    2b24:	19 f0       	breq	.+6      	; 0x2b2c <init_UART+0xa>
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	c1 f0       	breq	.+48     	; 0x2b5a <init_UART+0x38>
    2b2a:	2e c0       	rjmp	.+92     	; 0x2b88 <init_UART+0x66>
    2b2c:	f8 94       	cli
    2b2e:	e1 ec       	ldi	r30, 0xC1	; 193
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	88 61       	ori	r24, 0x18	; 24
    2b36:	80 83       	st	Z, r24
    2b38:	80 81       	ld	r24, Z
    2b3a:	80 68       	ori	r24, 0x80	; 128
    2b3c:	80 83       	st	Z, r24
    2b3e:	e2 ec       	ldi	r30, 0xC2	; 194
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	80 81       	ld	r24, Z
    2b44:	86 60       	ori	r24, 0x06	; 6
    2b46:	80 83       	st	Z, r24
    2b48:	86 e0       	ldi	r24, 0x06	; 6
    2b4a:	80 83       	st	Z, r24
    2b4c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    2b50:	83 e3       	ldi	r24, 0x33	; 51
    2b52:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    2b56:	78 94       	sei
    2b58:	1c c0       	rjmp	.+56     	; 0x2b92 <init_UART+0x70>
    2b5a:	f8 94       	cli
    2b5c:	e9 ec       	ldi	r30, 0xC9	; 201
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	88 61       	ori	r24, 0x18	; 24
    2b64:	80 83       	st	Z, r24
    2b66:	80 81       	ld	r24, Z
    2b68:	80 68       	ori	r24, 0x80	; 128
    2b6a:	80 83       	st	Z, r24
    2b6c:	ea ec       	ldi	r30, 0xCA	; 202
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	80 81       	ld	r24, Z
    2b72:	86 60       	ori	r24, 0x06	; 6
    2b74:	80 83       	st	Z, r24
    2b76:	86 e0       	ldi	r24, 0x06	; 6
    2b78:	80 83       	st	Z, r24
    2b7a:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    2b7e:	83 e3       	ldi	r24, 0x33	; 51
    2b80:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    2b84:	78 94       	sei
    2b86:	05 c0       	rjmp	.+10     	; 0x2b92 <init_UART+0x70>
    2b88:	66 ed       	ldi	r22, 0xD6	; 214
    2b8a:	74 e1       	ldi	r23, 0x14	; 20
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	b4 df       	rcall	.-152    	; 0x2afa <uart_puts>
    2b92:	8c e0       	ldi	r24, 0x0C	; 12
    2b94:	92 e0       	ldi	r25, 0x02	; 2
    2b96:	90 93 72 16 	sts	0x1672, r25	; 0x801672 <__iob+0x3>
    2b9a:	80 93 71 16 	sts	0x1671, r24	; 0x801671 <__iob+0x2>
    2b9e:	08 95       	ret

00002ba0 <uart_putc>:
    2ba0:	00 97       	sbiw	r24, 0x00	; 0
    2ba2:	19 f0       	breq	.+6      	; 0x2baa <uart_putc+0xa>
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	49 f0       	breq	.+18     	; 0x2bba <uart_putc+0x1a>
    2ba8:	10 c0       	rjmp	.+32     	; 0x2bca <uart_putc+0x2a>
    2baa:	e0 ec       	ldi	r30, 0xC0	; 192
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	85 ff       	sbrs	r24, 5
    2bb2:	fd cf       	rjmp	.-6      	; 0x2bae <uart_putc+0xe>
    2bb4:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2bb8:	08 95       	ret
    2bba:	e8 ec       	ldi	r30, 0xC8	; 200
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	80 81       	ld	r24, Z
    2bc0:	85 ff       	sbrs	r24, 5
    2bc2:	fd cf       	rjmp	.-6      	; 0x2bbe <uart_putc+0x1e>
    2bc4:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2bc8:	08 95       	ret
    2bca:	6c e2       	ldi	r22, 0x2C	; 44
    2bcc:	75 e1       	ldi	r23, 0x15	; 21
    2bce:	80 e0       	ldi	r24, 0x00	; 0
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	93 cf       	rjmp	.-218    	; 0x2afa <uart_puts>
    2bd4:	08 95       	ret

00002bd6 <usart_putchar_printf>:

int usart_putchar_printf(char var, FILE *stream) {   // part of the printf stream
    2bd6:	cf 93       	push	r28
    2bd8:	c8 2f       	mov	r28, r24

	if (var == '\n')
    2bda:	8a 30       	cpi	r24, 0x0A	; 10
    2bdc:	21 f4       	brne	.+8      	; 0x2be6 <usart_putchar_printf+0x10>
	uart_putc(0,'\r');
    2bde:	6d e0       	ldi	r22, 0x0D	; 13
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	dd df       	rcall	.-70     	; 0x2ba0 <uart_putc>
	uart_putc(0,var);
    2be6:	6c 2f       	mov	r22, r28
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	d9 df       	rcall	.-78     	; 0x2ba0 <uart_putc>
	return 0;
}
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	cf 91       	pop	r28
    2bf4:	08 95       	ret

00002bf6 <uart_transmitByte>:
}


void uart_transmitByte(int uart_port,uint8_t data)
{
	switch (uart_port)
    2bf6:	00 97       	sbiw	r24, 0x00	; 0
    2bf8:	19 f0       	breq	.+6      	; 0x2c00 <uart_transmitByte+0xa>
    2bfa:	01 97       	sbiw	r24, 0x01	; 1
    2bfc:	49 f0       	breq	.+18     	; 0x2c10 <uart_transmitByte+0x1a>
    2bfe:	10 c0       	rjmp	.+32     	; 0x2c20 <uart_transmitByte+0x2a>
	{
		case 0 :
		/* Wait for empty transmit buffer */
		loop_until_bit_is_set(UCSR0A, UDRE0);
    2c00:	e0 ec       	ldi	r30, 0xC0	; 192
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	85 ff       	sbrs	r24, 5
    2c08:	fd cf       	rjmp	.-6      	; 0x2c04 <uart_transmitByte+0xe>
		UDR0 = data;// send data
    2c0a:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		break;
    2c0e:	08 95       	ret
		case 1 :
		/* Wait for empty transmit buffer */
		loop_until_bit_is_set(UCSR1A, UDRE1);
    2c10:	e8 ec       	ldi	r30, 0xC8	; 200
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	80 81       	ld	r24, Z
    2c16:	85 ff       	sbrs	r24, 5
    2c18:	fd cf       	rjmp	.-6      	; 0x2c14 <uart_transmitByte+0x1e>
		UDR1 = data;// send data
    2c1a:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
		break;
    2c1e:	08 95       	ret
		default:
		uart_puts(0,"invalid uart_port\r\n");
    2c20:	6c e2       	ldi	r22, 0x2C	; 44
    2c22:	75 e1       	ldi	r23, 0x15	; 21
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	68 cf       	rjmp	.-304    	; 0x2afa <uart_puts>
    2c2a:	08 95       	ret

00002c2c <uart_printBinaryByte>:
	}
}

void uart_printBinaryByte(int uart_port,uint8_t byte)
{
    2c2c:	1f 93       	push	r17
    2c2e:	cf 93       	push	r28
    2c30:	df 93       	push	r29
    2c32:	1f 92       	push	r1
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
    2c38:	69 83       	std	Y+1, r22	; 0x01
	/* Prints out a byte as a series of 1's and 0's */
	uint8_t bit;
	for (bit = 7; bit < 255; bit--)
    2c3a:	17 e0       	ldi	r17, 0x07	; 7
	{
		if (bit_is_set(byte, bit))
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	01 2e       	mov	r0, r17
    2c42:	02 c0       	rjmp	.+4      	; 0x2c48 <uart_printBinaryByte+0x1c>
    2c44:	95 95       	asr	r25
    2c46:	87 95       	ror	r24
    2c48:	0a 94       	dec	r0
    2c4a:	e2 f7       	brpl	.-8      	; 0x2c44 <uart_printBinaryByte+0x18>
    2c4c:	80 ff       	sbrs	r24, 0
    2c4e:	05 c0       	rjmp	.+10     	; 0x2c5a <uart_printBinaryByte+0x2e>
		uart_transmitByte(0,'1');
    2c50:	61 e3       	ldi	r22, 0x31	; 49
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	cf df       	rcall	.-98     	; 0x2bf6 <uart_transmitByte>
    2c58:	04 c0       	rjmp	.+8      	; 0x2c62 <uart_printBinaryByte+0x36>
		else
		uart_transmitByte(0,'0');
    2c5a:	60 e3       	ldi	r22, 0x30	; 48
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	ca df       	rcall	.-108    	; 0x2bf6 <uart_transmitByte>

void uart_printBinaryByte(int uart_port,uint8_t byte)
{
	/* Prints out a byte as a series of 1's and 0's */
	uint8_t bit;
	for (bit = 7; bit < 255; bit--)
    2c62:	11 50       	subi	r17, 0x01	; 1
    2c64:	58 f7       	brcc	.-42     	; 0x2c3c <uart_printBinaryByte+0x10>
		if (bit_is_set(byte, bit))
		uart_transmitByte(0,'1');
		else
		uart_transmitByte(0,'0');
	}
}
    2c66:	0f 90       	pop	r0
    2c68:	df 91       	pop	r29
    2c6a:	cf 91       	pop	r28
    2c6c:	1f 91       	pop	r17
    2c6e:	08 95       	ret

00002c70 <USART0_getchar>:


// ---- Middy's code ----
char USART0_getchar(void){
	cli();
    2c70:	f8 94       	cli
	while(!(UCSR0A & (1<<RXC0)));
    2c72:	e0 ec       	ldi	r30, 0xC0	; 192
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	80 81       	ld	r24, Z
    2c78:	88 23       	and	r24, r24
    2c7a:	ec f7       	brge	.-6      	; 0x2c76 <USART0_getchar+0x6>
	return UDR0;
    2c7c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	sei();
}
    2c80:	08 95       	ret

00002c82 <USART0_send>:

void USART0_send( unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)));
    2c82:	e0 ec       	ldi	r30, 0xC0	; 192
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	90 81       	ld	r25, Z
    2c88:	95 ff       	sbrs	r25, 5
    2c8a:	fd cf       	rjmp	.-6      	; 0x2c86 <USART0_send+0x4>
	UDR0 = data;
    2c8c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2c90:	08 95       	ret

00002c92 <UART0_getStr>:
	
}

void UART0_getStr(char string0[], uint8_t len){
    2c92:	ef 92       	push	r14
    2c94:	ff 92       	push	r15
    2c96:	0f 93       	push	r16
    2c98:	1f 93       	push	r17
    2c9a:	cf 93       	push	r28
    2c9c:	df 93       	push	r29
	uint8_t i = 0;
	
	while (i<len){
    2c9e:	66 23       	and	r22, r22
    2ca0:	a1 f0       	breq	.+40     	; 0x2cca <UART0_getStr+0x38>
    2ca2:	8c 01       	movw	r16, r24
    2ca4:	ec 01       	movw	r28, r24
    2ca6:	61 50       	subi	r22, 0x01	; 1
    2ca8:	26 2f       	mov	r18, r22
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	2f 5f       	subi	r18, 0xFF	; 255
    2cae:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb0:	02 0f       	add	r16, r18
    2cb2:	13 1f       	adc	r17, r19
		string0[i] = USART0_getchar();
    2cb4:	7e 01       	movw	r14, r28
    2cb6:	dc df       	rcall	.-72     	; 0x2c70 <USART0_getchar>
    2cb8:	89 93       	st	Y+, r24
		if(string0[i] == '\r'){
    2cba:	8d 30       	cpi	r24, 0x0D	; 13
    2cbc:	19 f4       	brne	.+6      	; 0x2cc4 <UART0_getStr+0x32>
			string0[i] = 0;
    2cbe:	f7 01       	movw	r30, r14
    2cc0:	10 82       	st	Z, r1
			break;
    2cc2:	03 c0       	rjmp	.+6      	; 0x2cca <UART0_getStr+0x38>
}

void UART0_getStr(char string0[], uint8_t len){
	uint8_t i = 0;
	
	while (i<len){
    2cc4:	c0 17       	cp	r28, r16
    2cc6:	d1 07       	cpc	r29, r17
    2cc8:	a9 f7       	brne	.-22     	; 0x2cb4 <UART0_getStr+0x22>
			string0[i] = 0;
			break;
		}
		i++;
	}
}
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	1f 91       	pop	r17
    2cd0:	0f 91       	pop	r16
    2cd2:	ff 90       	pop	r15
    2cd4:	ef 90       	pop	r14
    2cd6:	08 95       	ret

00002cd8 <flowrate_mean>:
}


float flowrate_to_volume(uint16_t q, uint8_t i, uint8_t n){
	return q*i/(float)60/(float)n/(float)10;
}
    2cd8:	0f 93       	push	r16
    2cda:	1f 93       	push	r17
    2cdc:	06 2f       	mov	r16, r22
    2cde:	66 23       	and	r22, r22
    2ce0:	81 f0       	breq	.+32     	; 0x2d02 <flowrate_mean+0x2a>
    2ce2:	e8 2f       	mov	r30, r24
    2ce4:	f9 2f       	mov	r31, r25
    2ce6:	40 e0       	ldi	r20, 0x00	; 0
    2ce8:	50 e0       	ldi	r21, 0x00	; 0
    2cea:	ba 01       	movw	r22, r20
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	a1 91       	ld	r26, Z+
    2cf0:	b1 91       	ld	r27, Z+
    2cf2:	4a 0f       	add	r20, r26
    2cf4:	5b 1f       	adc	r21, r27
    2cf6:	61 1d       	adc	r22, r1
    2cf8:	71 1d       	adc	r23, r1
    2cfa:	8f 5f       	subi	r24, 0xFF	; 255
    2cfc:	08 13       	cpse	r16, r24
    2cfe:	f7 cf       	rjmp	.-18     	; 0x2cee <flowrate_mean+0x16>
    2d00:	03 c0       	rjmp	.+6      	; 0x2d08 <flowrate_mean+0x30>
    2d02:	40 e0       	ldi	r20, 0x00	; 0
    2d04:	50 e0       	ldi	r21, 0x00	; 0
    2d06:	ba 01       	movw	r22, r20
    2d08:	10 e0       	ldi	r17, 0x00	; 0
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	cb 01       	movw	r24, r22
    2d10:	ba 01       	movw	r22, r20
    2d12:	a9 01       	movw	r20, r18
    2d14:	98 01       	movw	r18, r16
    2d16:	fc d7       	rcall	.+4088   	; 0x3d10 <__udivmodsi4>
    2d18:	c9 01       	movw	r24, r18
    2d1a:	1f 91       	pop	r17
    2d1c:	0f 91       	pop	r16
    2d1e:	08 95       	ret

00002d20 <set_sample_volume>:

void set_sample_volume(uint8_t loLimit, uint16_t hiLimit){
    2d20:	8f 92       	push	r8
    2d22:	9f 92       	push	r9
    2d24:	af 92       	push	r10
    2d26:	bf 92       	push	r11
    2d28:	cf 92       	push	r12
    2d2a:	df 92       	push	r13
    2d2c:	ef 92       	push	r14
    2d2e:	ff 92       	push	r15
    2d30:	0f 93       	push	r16
    2d32:	1f 93       	push	r17
    2d34:	cf 93       	push	r28
    2d36:	df 93       	push	r29
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
    2d3c:	2a 97       	sbiw	r28, 0x0a	; 10
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	f8 94       	cli
    2d42:	de bf       	out	0x3e, r29	; 62
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	cd bf       	out	0x3d, r28	; 61
    2d48:	4b 01       	movw	r8, r22
	uint8_t maxChar = 10;
	char strVol[maxChar];
	uint16_t intVol = 0;
	
	do{
		printf("Enter sample volume (ml): ");
    2d4a:	0f 2e       	mov	r0, r31
    2d4c:	f0 e4       	ldi	r31, 0x40	; 64
    2d4e:	cf 2e       	mov	r12, r31
    2d50:	f5 e1       	ldi	r31, 0x15	; 21
    2d52:	df 2e       	mov	r13, r31
    2d54:	f0 2d       	mov	r31, r0
		UART0_getStr(strVol, maxChar);
		intVol = atoi(strVol);
		printf("\r\nEntry = %u ml\r\n", intVol);
    2d56:	0f 2e       	mov	r0, r31
    2d58:	fb e5       	ldi	r31, 0x5B	; 91
    2d5a:	ef 2e       	mov	r14, r31
    2d5c:	f5 e1       	ldi	r31, 0x15	; 21
    2d5e:	ff 2e       	mov	r15, r31
    2d60:	f0 2d       	mov	r31, r0
	} while (intVol<loLimit || intVol>hiLimit);
    2d62:	a8 2e       	mov	r10, r24
    2d64:	b1 2c       	mov	r11, r1
	uint8_t maxChar = 10;
	char strVol[maxChar];
	uint16_t intVol = 0;
	
	do{
		printf("Enter sample volume (ml): ");
    2d66:	df 92       	push	r13
    2d68:	cf 92       	push	r12
    2d6a:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
		UART0_getStr(strVol, maxChar);
    2d6e:	6a e0       	ldi	r22, 0x0A	; 10
    2d70:	ce 01       	movw	r24, r28
    2d72:	01 96       	adiw	r24, 0x01	; 1
    2d74:	8e df       	rcall	.-228    	; 0x2c92 <UART0_getStr>
		intVol = atoi(strVol);
    2d76:	ce 01       	movw	r24, r28
    2d78:	01 96       	adiw	r24, 0x01	; 1
    2d7a:	0e 94 15 20 	call	0x402a	; 0x402a <atoi>
    2d7e:	8c 01       	movw	r16, r24
		printf("\r\nEntry = %u ml\r\n", intVol);
    2d80:	1f 93       	push	r17
    2d82:	8f 93       	push	r24
    2d84:	ff 92       	push	r15
    2d86:	ef 92       	push	r14
    2d88:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <printf>
	} while (intVol<loLimit || intVol>hiLimit);
    2d8c:	0f 90       	pop	r0
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	0a 15       	cp	r16, r10
    2d9a:	1b 05       	cpc	r17, r11
    2d9c:	20 f3       	brcs	.-56     	; 0x2d66 <set_sample_volume+0x46>
    2d9e:	80 16       	cp	r8, r16
    2da0:	91 06       	cpc	r9, r17
    2da2:	08 f3       	brcs	.-62     	; 0x2d66 <set_sample_volume+0x46>
	
	settings.volumeSample = intVol;
    2da4:	10 93 c2 15 	sts	0x15C2, r17	; 0x8015c2 <settings+0x1>
    2da8:	00 93 c1 15 	sts	0x15C1, r16	; 0x8015c1 <settings>
	settings_Save(settings);
    2dac:	8d b7       	in	r24, 0x3d	; 61
    2dae:	9e b7       	in	r25, 0x3e	; 62
    2db0:	46 97       	sbiw	r24, 0x16	; 22
    2db2:	0f b6       	in	r0, 0x3f	; 63
    2db4:	f8 94       	cli
    2db6:	9e bf       	out	0x3e, r25	; 62
    2db8:	0f be       	out	0x3f, r0	; 63
    2dba:	8d bf       	out	0x3d, r24	; 61
    2dbc:	ad b7       	in	r26, 0x3d	; 61
    2dbe:	be b7       	in	r27, 0x3e	; 62
    2dc0:	11 96       	adiw	r26, 0x01	; 1
    2dc2:	86 e1       	ldi	r24, 0x16	; 22
    2dc4:	e1 ec       	ldi	r30, 0xC1	; 193
    2dc6:	f5 e1       	ldi	r31, 0x15	; 21
    2dc8:	01 90       	ld	r0, Z+
    2dca:	0d 92       	st	X+, r0
    2dcc:	8a 95       	dec	r24
    2dce:	e1 f7       	brne	.-8      	; 0x2dc8 <set_sample_volume+0xa8>
    2dd0:	54 de       	rcall	.-856    	; 0x2a7a <settings_Save>
}
    2dd2:	0f b6       	in	r0, 0x3f	; 63
    2dd4:	f8 94       	cli
    2dd6:	de bf       	out	0x3e, r29	; 62
    2dd8:	0f be       	out	0x3f, r0	; 63
    2dda:	cd bf       	out	0x3d, r28	; 61
    2ddc:	2a 96       	adiw	r28, 0x0a	; 10
    2dde:	0f b6       	in	r0, 0x3f	; 63
    2de0:	f8 94       	cli
    2de2:	de bf       	out	0x3e, r29	; 62
    2de4:	0f be       	out	0x3f, r0	; 63
    2de6:	cd bf       	out	0x3d, r28	; 61
    2de8:	df 91       	pop	r29
    2dea:	cf 91       	pop	r28
    2dec:	1f 91       	pop	r17
    2dee:	0f 91       	pop	r16
    2df0:	ff 90       	pop	r15
    2df2:	ef 90       	pop	r14
    2df4:	df 90       	pop	r13
    2df6:	cf 90       	pop	r12
    2df8:	bf 90       	pop	r11
    2dfa:	af 90       	pop	r10
    2dfc:	9f 90       	pop	r9
    2dfe:	8f 90       	pop	r8
    2e00:	08 95       	ret

00002e02 <volume_instants>:

struct vol volume_instants(struct vol v){
    2e02:	4f 92       	push	r4
    2e04:	5f 92       	push	r5
    2e06:	6f 92       	push	r6
    2e08:	7f 92       	push	r7
    2e0a:	9f 92       	push	r9
    2e0c:	af 92       	push	r10
    2e0e:	bf 92       	push	r11
    2e10:	cf 92       	push	r12
    2e12:	df 92       	push	r13
    2e14:	ef 92       	push	r14
    2e16:	ff 92       	push	r15
    2e18:	0f 93       	push	r16
    2e1a:	1f 93       	push	r17
    2e1c:	cf 93       	push	r28
    2e1e:	df 93       	push	r29
    2e20:	00 d0       	rcall	.+0      	; 0x2e22 <volume_instants+0x20>
    2e22:	1f 92       	push	r1
    2e24:	cd b7       	in	r28, 0x3d	; 61
    2e26:	de b7       	in	r29, 0x3e	; 62
    2e28:	7c 01       	movw	r14, r24
    2e2a:	65 96       	adiw	r28, 0x15	; 21
    2e2c:	4c ac       	ldd	r4, Y+60	; 0x3c
    2e2e:	5d ac       	ldd	r5, Y+61	; 0x3d
    2e30:	6e ac       	ldd	r6, Y+62	; 0x3e
    2e32:	7f ac       	ldd	r7, Y+63	; 0x3f
    2e34:	65 97       	sbiw	r28, 0x15	; 21
    2e36:	6a 96       	adiw	r28, 0x1a	; 26
    2e38:	1f ad       	ldd	r17, Y+63	; 0x3f
    2e3a:	6a 97       	sbiw	r28, 0x1a	; 26
    2e3c:	6c 96       	adiw	r28, 0x1c	; 28
    2e3e:	9f ac       	ldd	r9, Y+63	; 0x3f
    2e40:	6c 97       	sbiw	r28, 0x1c	; 28
	
	if (TCNT1 > v.i1*v.sample_interval && v.i1<v.n_meas)
    2e42:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    2e46:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    2e4a:	2f 96       	adiw	r28, 0x0f	; 15
    2e4c:	4e ad       	ldd	r20, Y+62	; 0x3e
    2e4e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2e50:	2f 97       	sbiw	r28, 0x0f	; 15
    2e52:	14 9f       	mul	r17, r20
    2e54:	c0 01       	movw	r24, r0
    2e56:	15 9f       	mul	r17, r21
    2e58:	90 0d       	add	r25, r0
    2e5a:	11 24       	eor	r1, r1
    2e5c:	82 17       	cp	r24, r18
    2e5e:	93 07       	cpc	r25, r19
    2e60:	08 f0       	brcs	.+2      	; 0x2e64 <volume_instants+0x62>
    2e62:	56 c0       	rjmp	.+172    	; 0x2f10 <volume_instants+0x10e>
    2e64:	09 8d       	ldd	r16, Y+25	; 0x19
    2e66:	10 17       	cp	r17, r16
    2e68:	08 f0       	brcs	.+2      	; 0x2e6c <volume_instants+0x6a>
    2e6a:	52 c0       	rjmp	.+164    	; 0x2f10 <volume_instants+0x10e>
	{
		
		v.flowrates[v.i1] = fs2012_sample();
    2e6c:	a1 2e       	mov	r10, r17
    2e6e:	b1 2c       	mov	r11, r1
    2e70:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <fs2012_sample>
    2e74:	6c 01       	movw	r12, r24
    2e76:	f5 01       	movw	r30, r10
    2e78:	32 96       	adiw	r30, 0x02	; 2
    2e7a:	ee 0f       	add	r30, r30
    2e7c:	ff 1f       	adc	r31, r31
    2e7e:	87 e1       	ldi	r24, 0x17	; 23
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	8c 0f       	add	r24, r28
    2e84:	9d 1f       	adc	r25, r29
    2e86:	e8 0f       	add	r30, r24
    2e88:	f9 1f       	adc	r31, r25
    2e8a:	d1 82       	std	Z+1, r13	; 0x01
    2e8c:	c0 82       	st	Z, r12
		v.volume_instant += flowrate_to_volume(v.flowrates[v.i1], v.i_meas, v.n_meas);
    2e8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e90:	8c 9d       	mul	r24, r12
    2e92:	b0 01       	movw	r22, r0
    2e94:	8d 9d       	mul	r24, r13
    2e96:	70 0d       	add	r23, r0
    2e98:	11 24       	eor	r1, r1
    2e9a:	80 e0       	ldi	r24, 0x00	; 0
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	83 d2       	rcall	.+1286   	; 0x33a6 <__floatunsisf>
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	40 e7       	ldi	r20, 0x70	; 112
    2ea6:	52 e4       	ldi	r21, 0x42	; 66
    2ea8:	16 d2       	rcall	.+1068   	; 0x32d6 <__divsf3>
    2eaa:	69 83       	std	Y+1, r22	; 0x01
    2eac:	7a 83       	std	Y+2, r23	; 0x02
    2eae:	8b 83       	std	Y+3, r24	; 0x03
    2eb0:	9c 83       	std	Y+4, r25	; 0x04
    2eb2:	60 2f       	mov	r22, r16
    2eb4:	70 e0       	ldi	r23, 0x00	; 0
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	75 d2       	rcall	.+1258   	; 0x33a6 <__floatunsisf>
    2ebc:	9b 01       	movw	r18, r22
    2ebe:	ac 01       	movw	r20, r24
    2ec0:	69 81       	ldd	r22, Y+1	; 0x01
    2ec2:	7a 81       	ldd	r23, Y+2	; 0x02
    2ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec8:	06 d2       	rcall	.+1036   	; 0x32d6 <__divsf3>
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	40 e2       	ldi	r20, 0x20	; 32
    2ed0:	51 e4       	ldi	r21, 0x41	; 65
    2ed2:	01 d2       	rcall	.+1026   	; 0x32d6 <__divsf3>
    2ed4:	9b 01       	movw	r18, r22
    2ed6:	ac 01       	movw	r20, r24
    2ed8:	c3 01       	movw	r24, r6
    2eda:	b2 01       	movw	r22, r4
    2edc:	94 d1       	rcall	.+808    	; 0x3206 <__addsf3>
    2ede:	2b 01       	movw	r4, r22
    2ee0:	3c 01       	movw	r6, r24
		if (v.i1 > v.n_meas-v.n_ovlp)
    2ee2:	80 2f       	mov	r24, r16
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2ee8:	82 1b       	sub	r24, r18
    2eea:	91 09       	sbc	r25, r1
    2eec:	8a 15       	cp	r24, r10
    2eee:	9b 05       	cpc	r25, r11
    2ef0:	74 f4       	brge	.+28     	; 0x2f0e <volume_instants+0x10c>
		{
			v.flowrates_ol[v.i3] = v.flowrates[v.i1];
    2ef2:	e9 2d       	mov	r30, r9
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	71 96       	adiw	r30, 0x11	; 17
    2ef8:	ee 0f       	add	r30, r30
    2efa:	ff 1f       	adc	r31, r31
    2efc:	87 e1       	ldi	r24, 0x17	; 23
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	8c 0f       	add	r24, r28
    2f02:	9d 1f       	adc	r25, r29
    2f04:	e8 0f       	add	r30, r24
    2f06:	f9 1f       	adc	r31, r25
    2f08:	d1 82       	std	Z+1, r13	; 0x01
    2f0a:	c0 82       	st	Z, r12
			v.i3++;
    2f0c:	93 94       	inc	r9
		}
	
		v.i1++;
    2f0e:	1f 5f       	subi	r17, 0xFF	; 255
	}
	
	return v;	
    2f10:	65 96       	adiw	r28, 0x15	; 21
    2f12:	4c ae       	std	Y+60, r4	; 0x3c
    2f14:	5d ae       	std	Y+61, r5	; 0x3d
    2f16:	6e ae       	std	Y+62, r6	; 0x3e
    2f18:	7f ae       	std	Y+63, r7	; 0x3f
    2f1a:	65 97       	sbiw	r28, 0x15	; 21
    2f1c:	6a 96       	adiw	r28, 0x1a	; 26
    2f1e:	1f af       	std	Y+63, r17	; 0x3f
    2f20:	6a 97       	sbiw	r28, 0x1a	; 26
    2f22:	6c 96       	adiw	r28, 0x1c	; 28
    2f24:	9f ae       	std	Y+63, r9	; 0x3f
    2f26:	6c 97       	sbiw	r28, 0x1c	; 28
    2f28:	86 e4       	ldi	r24, 0x46	; 70
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	77 96       	adiw	r30, 0x17	; 23
    2f2e:	d7 01       	movw	r26, r14
    2f30:	01 90       	ld	r0, Z+
    2f32:	0d 92       	st	X+, r0
    2f34:	8a 95       	dec	r24
    2f36:	e1 f7       	brne	.-8      	; 0x2f30 <volume_instants+0x12e>
}
    2f38:	c7 01       	movw	r24, r14
    2f3a:	0f 90       	pop	r0
    2f3c:	0f 90       	pop	r0
    2f3e:	0f 90       	pop	r0
    2f40:	0f 90       	pop	r0
    2f42:	df 91       	pop	r29
    2f44:	cf 91       	pop	r28
    2f46:	1f 91       	pop	r17
    2f48:	0f 91       	pop	r16
    2f4a:	ff 90       	pop	r15
    2f4c:	ef 90       	pop	r14
    2f4e:	df 90       	pop	r13
    2f50:	cf 90       	pop	r12
    2f52:	bf 90       	pop	r11
    2f54:	af 90       	pop	r10
    2f56:	9f 90       	pop	r9
    2f58:	7f 90       	pop	r7
    2f5a:	6f 90       	pop	r6
    2f5c:	5f 90       	pop	r5
    2f5e:	4f 90       	pop	r4
    2f60:	08 95       	ret

00002f62 <volume_means>:

struct vol volume_means(struct vol v){
    2f62:	ff 92       	push	r15
    2f64:	0f 93       	push	r16
    2f66:	1f 93       	push	r17
    2f68:	cf 93       	push	r28
    2f6a:	df 93       	push	r29
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
    2f70:	8c 01       	movw	r16, r24
	
	if (v.i2 >= v.i_meas - v.i_ovlp)
    2f72:	f9 84       	ldd	r15, Y+9	; 0x09
    2f74:	2d 96       	adiw	r28, 0x0d	; 13
    2f76:	2f ad       	ldd	r18, Y+63	; 0x3f
    2f78:	2d 97       	sbiw	r28, 0x0d	; 13
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	8f 2d       	mov	r24, r15
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	4a 85       	ldd	r20, Y+10	; 0x0a
    2f82:	84 1b       	sub	r24, r20
    2f84:	91 09       	sbc	r25, r1
    2f86:	28 17       	cp	r18, r24
    2f88:	39 07       	cpc	r19, r25
    2f8a:	0c f4       	brge	.+2      	; 0x2f8e <volume_means+0x2c>
    2f8c:	4c c0       	rjmp	.+152    	; 0x3026 <volume_means+0xc4>
	{
		v.flr_mean = flowrate_mean(v.flowrates, v.n_meas);
    2f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f90:	ce 01       	movw	r24, r28
    2f92:	0d 96       	adiw	r24, 0x0d	; 13
    2f94:	a1 de       	rcall	.-702    	; 0x2cd8 <flowrate_mean>
    2f96:	23 96       	adiw	r28, 0x03	; 3
    2f98:	9f af       	std	Y+63, r25	; 0x3f
    2f9a:	8e af       	std	Y+62, r24	; 0x3e
    2f9c:	23 97       	sbiw	r28, 0x03	; 3
		v.volume_mean += flowrate_to_volume(v.flr_mean, v.i_meas, 1);
    2f9e:	f8 9e       	mul	r15, r24
    2fa0:	b0 01       	movw	r22, r0
    2fa2:	f9 9e       	mul	r15, r25
    2fa4:	70 0d       	add	r23, r0
    2fa6:	11 24       	eor	r1, r1
    2fa8:	80 e0       	ldi	r24, 0x00	; 0
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	fc d1       	rcall	.+1016   	; 0x33a6 <__floatunsisf>
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	40 e7       	ldi	r20, 0x70	; 112
    2fb4:	52 e4       	ldi	r21, 0x42	; 66
    2fb6:	8f d1       	rcall	.+798    	; 0x32d6 <__divsf3>
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	40 e2       	ldi	r20, 0x20	; 32
    2fbe:	51 e4       	ldi	r21, 0x41	; 65
    2fc0:	8a d1       	rcall	.+788    	; 0x32d6 <__divsf3>
    2fc2:	2b 96       	adiw	r28, 0x0b	; 11
    2fc4:	2c ad       	ldd	r18, Y+60	; 0x3c
    2fc6:	3d ad       	ldd	r19, Y+61	; 0x3d
    2fc8:	4e ad       	ldd	r20, Y+62	; 0x3e
    2fca:	5f ad       	ldd	r21, Y+63	; 0x3f
    2fcc:	2b 97       	sbiw	r28, 0x0b	; 11
    2fce:	1b d1       	rcall	.+566    	; 0x3206 <__addsf3>
    2fd0:	2b 96       	adiw	r28, 0x0b	; 11
    2fd2:	6c af       	std	Y+60, r22	; 0x3c
    2fd4:	7d af       	std	Y+61, r23	; 0x3d
    2fd6:	8e af       	std	Y+62, r24	; 0x3e
    2fd8:	9f af       	std	Y+63, r25	; 0x3f
    2fda:	2b 97       	sbiw	r28, 0x0b	; 11

		for (v.i1 = 0; v.i1<v.n_ovlp; v.i1++){
    2fdc:	2c 96       	adiw	r28, 0x0c	; 12
    2fde:	1f ae       	std	Y+63, r1	; 0x3f
    2fe0:	2c 97       	sbiw	r28, 0x0c	; 12
    2fe2:	4c 85       	ldd	r20, Y+12	; 0x0c
    2fe4:	44 23       	and	r20, r20
    2fe6:	c9 f0       	breq	.+50     	; 0x301a <volume_means+0xb8>
    2fe8:	fe 01       	movw	r30, r28
    2fea:	3d 96       	adiw	r30, 0x0d	; 13
    2fec:	2f ef       	ldi	r18, 0xFF	; 255
    2fee:	24 0f       	add	r18, r20
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	2d 5f       	subi	r18, 0xFD	; 253
    2ff4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff6:	22 0f       	add	r18, r18
    2ff8:	33 1f       	adc	r19, r19
    2ffa:	89 e0       	ldi	r24, 0x09	; 9
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	8c 0f       	add	r24, r28
    3000:	9d 1f       	adc	r25, r29
    3002:	28 0f       	add	r18, r24
    3004:	39 1f       	adc	r19, r25
			v.flowrates[v.i1] = v.flowrates_ol[v.i1];
    3006:	86 8d       	ldd	r24, Z+30	; 0x1e
    3008:	97 8d       	ldd	r25, Z+31	; 0x1f
    300a:	81 93       	st	Z+, r24
    300c:	91 93       	st	Z+, r25
	if (v.i2 >= v.i_meas - v.i_ovlp)
	{
		v.flr_mean = flowrate_mean(v.flowrates, v.n_meas);
		v.volume_mean += flowrate_to_volume(v.flr_mean, v.i_meas, 1);

		for (v.i1 = 0; v.i1<v.n_ovlp; v.i1++){
    300e:	e2 17       	cp	r30, r18
    3010:	f3 07       	cpc	r31, r19
    3012:	c9 f7       	brne	.-14     	; 0x3006 <volume_means+0xa4>
    3014:	2c 96       	adiw	r28, 0x0c	; 12
    3016:	4f af       	std	Y+63, r20	; 0x3f
    3018:	2c 97       	sbiw	r28, 0x0c	; 12
			v.flowrates[v.i1] = v.flowrates_ol[v.i1];
		}
				
		v.i2 = 0;
    301a:	2d 96       	adiw	r28, 0x0d	; 13
    301c:	1f ae       	std	Y+63, r1	; 0x3f
    301e:	2d 97       	sbiw	r28, 0x0d	; 13
		v.i3 = 0;
    3020:	2e 96       	adiw	r28, 0x0e	; 14
    3022:	1f ae       	std	Y+63, r1	; 0x3f
    3024:	2e 97       	sbiw	r28, 0x0e	; 14
	}
		
	return v;	
    3026:	86 e4       	ldi	r24, 0x46	; 70
    3028:	fe 01       	movw	r30, r28
    302a:	39 96       	adiw	r30, 0x09	; 9
    302c:	d8 01       	movw	r26, r16
    302e:	01 90       	ld	r0, Z+
    3030:	0d 92       	st	X+, r0
    3032:	8a 95       	dec	r24
    3034:	e1 f7       	brne	.-8      	; 0x302e <volume_means+0xcc>
}
    3036:	c8 01       	movw	r24, r16
    3038:	df 91       	pop	r29
    303a:	cf 91       	pop	r28
    303c:	1f 91       	pop	r17
    303e:	0f 91       	pop	r16
    3040:	ff 90       	pop	r15
    3042:	08 95       	ret

00003044 <volume_init>:

struct vol volume_init(struct vol v){
    3044:	cf 93       	push	r28
    3046:	df 93       	push	r29
    3048:	cd b7       	in	r28, 0x3d	; 61
    304a:	de b7       	in	r29, 0x3e	; 62
	v.volume_mean = 0;	
	v.i1 = 0;	
	v.i2 = 0;
	v.i3 = 0;
	v.i5 = 0;	
	return v;
    304c:	3f e0       	ldi	r19, 0x0F	; 15
    304e:	3e 83       	std	Y+6, r19	; 0x06
    3050:	22 e0       	ldi	r18, 0x02	; 2
    3052:	2f 83       	std	Y+7, r18	; 0x07
    3054:	38 87       	std	Y+8, r19	; 0x08
    3056:	29 87       	std	Y+9, r18	; 0x09
    3058:	19 a6       	std	Y+41, r1	; 0x29
    305a:	18 a6       	std	Y+40, r1	; 0x28
    305c:	1d a6       	std	Y+45, r1	; 0x2d
    305e:	1c a6       	std	Y+44, r1	; 0x2c
    3060:	2a e9       	ldi	r18, 0x9A	; 154
    3062:	32 e0       	ldi	r19, 0x02	; 2
    3064:	3d af       	std	Y+61, r19	; 0x3d
    3066:	2c af       	std	Y+60, r18	; 0x3c
    3068:	1f ae       	std	Y+63, r1	; 0x3f
    306a:	1e ae       	std	Y+62, r1	; 0x3e
    306c:	24 96       	adiw	r28, 0x04	; 4
    306e:	1c ae       	std	Y+60, r1	; 0x3c
    3070:	1d ae       	std	Y+61, r1	; 0x3d
    3072:	1e ae       	std	Y+62, r1	; 0x3e
    3074:	1f ae       	std	Y+63, r1	; 0x3f
    3076:	24 97       	sbiw	r28, 0x04	; 4
    3078:	28 96       	adiw	r28, 0x08	; 8
    307a:	1c ae       	std	Y+60, r1	; 0x3c
    307c:	1d ae       	std	Y+61, r1	; 0x3d
    307e:	1e ae       	std	Y+62, r1	; 0x3e
    3080:	1f ae       	std	Y+63, r1	; 0x3f
    3082:	28 97       	sbiw	r28, 0x08	; 8
    3084:	29 96       	adiw	r28, 0x09	; 9
    3086:	1f ae       	std	Y+63, r1	; 0x3f
    3088:	29 97       	sbiw	r28, 0x09	; 9
    308a:	2a 96       	adiw	r28, 0x0a	; 10
    308c:	1f ae       	std	Y+63, r1	; 0x3f
    308e:	2a 97       	sbiw	r28, 0x0a	; 10
    3090:	2b 96       	adiw	r28, 0x0b	; 11
    3092:	1f ae       	std	Y+63, r1	; 0x3f
    3094:	2b 97       	sbiw	r28, 0x0b	; 11
    3096:	2c 96       	adiw	r28, 0x0c	; 12
    3098:	1f ae       	std	Y+63, r1	; 0x3f
    309a:	2c 97       	sbiw	r28, 0x0c	; 12
    309c:	26 e4       	ldi	r18, 0x46	; 70
    309e:	fe 01       	movw	r30, r28
    30a0:	36 96       	adiw	r30, 0x06	; 6
    30a2:	dc 01       	movw	r26, r24
    30a4:	01 90       	ld	r0, Z+
    30a6:	0d 92       	st	X+, r0
    30a8:	2a 95       	dec	r18
    30aa:	e1 f7       	brne	.-8      	; 0x30a4 <volume_init+0x60>
}
    30ac:	df 91       	pop	r29
    30ae:	cf 91       	pop	r28
    30b0:	08 95       	ret

000030b2 <INT2_init>:

bool PCINT8flag = false;

void INT2_init(void)
{
	cli();							// Disable global interrupts
    30b2:	f8 94       	cli
	
	DDRD &= ~(1 << PD2);			// Set PD2 (INT2) as input
    30b4:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1 << PD2);			// Prevent input floating by a pull-up resistor
    30b6:	5a 9a       	sbi	0x0b, 2	; 11
	
	EICRA |= (1<<ISC21);
    30b8:	e9 e6       	ldi	r30, 0x69	; 105
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	80 81       	ld	r24, Z
    30be:	80 62       	ori	r24, 0x20	; 32
    30c0:	80 83       	st	Z, r24
	EICRA |= (1<<ISC20);			// This 2 lines set rising edge interrupt
    30c2:	80 81       	ld	r24, Z
    30c4:	80 61       	ori	r24, 0x10	; 16
    30c6:	80 83       	st	Z, r24
	
	EIMSK &= ~(1 << INT2);			// Disable INT2
    30c8:	ea 98       	cbi	0x1d, 2	; 29
	EIFR |= (1 << INT2);			// Clear any interrupt waiting on INT2
    30ca:	e2 9a       	sbi	0x1c, 2	; 28
	EIMSK |= (1 << INT2);			// Enable interrupt 2 (INT2)
    30cc:	ea 9a       	sbi	0x1d, 2	; 29
	
	sei();							// Enable global interrupt
    30ce:	78 94       	sei
    30d0:	08 95       	ret

000030d2 <USART1_disable>:
}

void USART1_disable(void){	
	uart_puts(0,"USART1 disabled. INT2 triggered.\r\n");
    30d2:	6d e6       	ldi	r22, 0x6D	; 109
    30d4:	75 e1       	ldi	r23, 0x15	; 21
    30d6:	80 e0       	ldi	r24, 0x00	; 0
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	0f dd       	rcall	.-1506   	; 0x2afa <uart_puts>
	// Disable USART1
	UCSR1B &= ~(1<<RXEN1);
    30dc:	e9 ec       	ldi	r30, 0xC9	; 201
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	80 81       	ld	r24, Z
    30e2:	8f 7e       	andi	r24, 0xEF	; 239
    30e4:	80 83       	st	Z, r24
	UCSR1B &= ~(1<<TXEN1);
    30e6:	80 81       	ld	r24, Z
    30e8:	87 7f       	andi	r24, 0xF7	; 247
    30ea:	80 83       	st	Z, r24
	UCSR1B &= ~(1<<RXCIE1);
    30ec:	80 81       	ld	r24, Z
    30ee:	8f 77       	andi	r24, 0x7F	; 127
    30f0:	80 83       	st	Z, r24
    30f2:	2f ef       	ldi	r18, 0xFF	; 255
    30f4:	89 e6       	ldi	r24, 0x69	; 105
    30f6:	98 e1       	ldi	r25, 0x18	; 24
    30f8:	21 50       	subi	r18, 0x01	; 1
    30fa:	80 40       	sbci	r24, 0x00	; 0
    30fc:	90 40       	sbci	r25, 0x00	; 0
    30fe:	e1 f7       	brne	.-8      	; 0x30f8 <USART1_disable+0x26>
    3100:	00 c0       	rjmp	.+0      	; 0x3102 <USART1_disable+0x30>
	
	_delay_ms(1000);
	INT2_init();						// Enable interrupt 2 (INT2)
    3102:	00 00       	nop
    3104:	d6 cf       	rjmp	.-84     	; 0x30b2 <INT2_init>
    3106:	08 95       	ret

00003108 <USART1_re_enable>:
}

void USART1_re_enable(void){
	//-----Turn off INT2 interrupt
	EIMSK &= ~(1<<INT2);			// Disable interrupt 2 (INT2)
    3108:	ea 98       	cbi	0x1d, 2	; 29
		
	//-----Turn on UART1
	init_UART(1);		//USART1 init, this is used for SoundTrap commuication via TX1/RX1
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	09 dd       	rcall	.-1518   	; 0x2b22 <init_UART>
	uart_puts(0,"USART1 triggered. INT2 disabled.\r\n"); 
    3110:	60 e9       	ldi	r22, 0x90	; 144
    3112:	75 e1       	ldi	r23, 0x15	; 21
    3114:	80 e0       	ldi	r24, 0x00	; 0
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	f0 cc       	rjmp	.-1568   	; 0x2afa <uart_puts>
    311a:	08 95       	ret

0000311c <pin_change_1_init>:
extern counter_t counter_13;

// Pin change interrupt PCINT8 and PCINT11..12 to wakeup AVR from PC terminal through RX0 and count edges on PJ2 and PJ3
void pin_change_1_init(void)
{
	cli();							// Disable global interrupts
    311c:	f8 94       	cli
	PCMSK1 &= ~((1 << PCINT8) | (1 << PCINT11) | (1 << PCINT12)); // Disable PCINT interrupts
    311e:	ec e6       	ldi	r30, 0x6C	; 108
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	80 81       	ld	r24, Z
    3124:	86 7e       	andi	r24, 0xE6	; 230
    3126:	80 83       	st	Z, r24
	
	// set PORT E...
	DDRE &= ~(1 << PE0);			// Set PE0 (INT8) as input
    3128:	68 98       	cbi	0x0d, 0	; 13
	PORTE |= (1 << PE0);			// Prevent input floating by a pull-up resistor
    312a:	70 9a       	sbi	0x0e, 0	; 14
	
	// set PORT J...
	DDRJ &= ~((1 << PJ2) | (1 << PJ3)); // Set PJ2..3 (PCINT11..12) as inputs (for use as edge counters)
    312c:	a4 e0       	ldi	r26, 0x04	; 4
    312e:	b1 e0       	ldi	r27, 0x01	; 1
    3130:	8c 91       	ld	r24, X
    3132:	83 7f       	andi	r24, 0xF3	; 243
    3134:	8c 93       	st	X, r24
	PORTJ |=  (1 << PJ2) | (1 << PJ3);  // Set pull-ups
    3136:	a5 e0       	ldi	r26, 0x05	; 5
    3138:	b1 e0       	ldi	r27, 0x01	; 1
    313a:	8c 91       	ld	r24, X
    313c:	8c 60       	ori	r24, 0x0C	; 12
    313e:	8c 93       	st	X, r24
	
	PCIFR |= (1 << PCIF1);			// Pin change interrupt flag: Clear any interrupt waiting on PCINT15:8
    3140:	d9 9a       	sbi	0x1b, 1	; 27
	PCICR |= (1 << PCIE1);			// Pin change interrupt control: Enable a range of PCINT15:8 interrupt
    3142:	a8 e6       	ldi	r26, 0x68	; 104
    3144:	b0 e0       	ldi	r27, 0x00	; 0
    3146:	8c 91       	ld	r24, X
    3148:	82 60       	ori	r24, 0x02	; 2
    314a:	8c 93       	st	X, r24
	PCMSK1 = (1 << PCINT8) | (1 << PCINT11) | (1 << PCINT12) ; // Enable individual interrupts
    314c:	89 e1       	ldi	r24, 0x19	; 25
    314e:	80 83       	st	Z, r24
	
	porte_prev = PINE & (0x01);
    3150:	8c b1       	in	r24, 0x0c	; 12
    3152:	81 70       	andi	r24, 0x01	; 1
    3154:	80 93 69 16 	sts	0x1669, r24	; 0x801669 <porte_prev>
	portj_prev = PINJ & (0x3F);
    3158:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
    315c:	8f 73       	andi	r24, 0x3F	; 63
    315e:	80 93 6a 16 	sts	0x166A, r24	; 0x80166a <portj_prev>
	sei();							// Enable global interrupt
    3162:	78 94       	sei
    3164:	08 95       	ret

00003166 <__vector_10>:

/**
 *	Interrupt on pin change on PCINT pins 8..15. 
 */
ISR(PCINT1_vect) 
 {
    3166:	1f 92       	push	r1
    3168:	0f 92       	push	r0
    316a:	0f b6       	in	r0, 0x3f	; 63
    316c:	0f 92       	push	r0
    316e:	11 24       	eor	r1, r1
    3170:	0b b6       	in	r0, 0x3b	; 59
    3172:	0f 92       	push	r0
    3174:	2f 93       	push	r18
    3176:	3f 93       	push	r19
    3178:	8f 93       	push	r24
    317a:	9f 93       	push	r25
    317c:	ef 93       	push	r30
    317e:	ff 93       	push	r31
	// check for pins that have toggled since last PCINT1 ISR execution
	uint8_t porte = PINE & (0x01);		// mask of all PCINT1 pins in PORT E
    3180:	9c b1       	in	r25, 0x0c	; 12
    3182:	91 70       	andi	r25, 0x01	; 1
	uint8_t portj = PINJ & (0x3F);		// mask of all PCINT1 pins in PORT J
    3184:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
    3188:	2f 73       	andi	r18, 0x3F	; 63
	
	uint8_t tog_e = porte ^ porte_prev;
    318a:	30 91 69 16 	lds	r19, 0x1669	; 0x801669 <porte_prev>
	porte_prev = porte;
    318e:	90 93 69 16 	sts	0x1669, r25	; 0x801669 <porte_prev>
	
	uint8_t tog_j = portj ^ portj_prev;
    3192:	80 91 6a 16 	lds	r24, 0x166A	; 0x80166a <portj_prev>
    3196:	82 27       	eor	r24, r18
	portj_prev = portj;
    3198:	20 93 6a 16 	sts	0x166A, r18	; 0x80166a <portj_prev>
	
	if(tog_e){
    319c:	93 17       	cp	r25, r19
    319e:	41 f0       	breq	.+16     	; 0x31b0 <__vector_10+0x4a>
		// This interrupt wakes up the ATmega2560 on RX0
		PCMSK1 &= ~(1 << PCINT8);		// Disable PCINT8 to prevent it from trapping into interrupt
    31a0:	ec e6       	ldi	r30, 0x6C	; 108
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	90 81       	ld	r25, Z
    31a6:	9e 7f       	andi	r25, 0xFE	; 254
    31a8:	90 83       	st	Z, r25
		PCINT8flag = true;				// Set flag for synchronous code
    31aa:	91 e0       	ldi	r25, 0x01	; 1
    31ac:	90 93 b6 15 	sts	0x15B6, r25	; 0x8015b6 <PCINT8flag>
	}
	if(tog_j & (1<<PJ2)){
    31b0:	82 ff       	sbrs	r24, 2
    31b2:	08 c0       	rjmp	.+16     	; 0x31c4 <__vector_10+0x5e>
		// count changes on PCINT11
		counter_11.pcint_counter++;
    31b4:	e7 e3       	ldi	r30, 0x37	; 55
    31b6:	f6 e1       	ldi	r31, 0x16	; 22
    31b8:	20 81       	ld	r18, Z
    31ba:	31 81       	ldd	r19, Z+1	; 0x01
    31bc:	2f 5f       	subi	r18, 0xFF	; 255
    31be:	3f 4f       	sbci	r19, 0xFF	; 255
    31c0:	31 83       	std	Z+1, r19	; 0x01
    31c2:	20 83       	st	Z, r18
	}
	if(tog_j & (1<<PJ3)){
    31c4:	83 ff       	sbrs	r24, 3
    31c6:	08 c0       	rjmp	.+16     	; 0x31d8 <__vector_10+0x72>
		// count changes on PCINT12
		counter_12.pcint_counter++;
    31c8:	e6 e4       	ldi	r30, 0x46	; 70
    31ca:	f6 e1       	ldi	r31, 0x16	; 22
    31cc:	20 81       	ld	r18, Z
    31ce:	31 81       	ldd	r19, Z+1	; 0x01
    31d0:	2f 5f       	subi	r18, 0xFF	; 255
    31d2:	3f 4f       	sbci	r19, 0xFF	; 255
    31d4:	31 83       	std	Z+1, r19	; 0x01
    31d6:	20 83       	st	Z, r18
	}
	if(tog_j & (1<<PJ4)){
    31d8:	84 ff       	sbrs	r24, 4
    31da:	07 c0       	rjmp	.+14     	; 0x31ea <__vector_10+0x84>
		counter_13.pcint_counter++;
    31dc:	e4 e5       	ldi	r30, 0x54	; 84
    31de:	f6 e1       	ldi	r31, 0x16	; 22
    31e0:	80 81       	ld	r24, Z
    31e2:	91 81       	ldd	r25, Z+1	; 0x01
    31e4:	01 96       	adiw	r24, 0x01	; 1
    31e6:	91 83       	std	Z+1, r25	; 0x01
    31e8:	80 83       	st	Z, r24
	}
}
    31ea:	ff 91       	pop	r31
    31ec:	ef 91       	pop	r30
    31ee:	9f 91       	pop	r25
    31f0:	8f 91       	pop	r24
    31f2:	3f 91       	pop	r19
    31f4:	2f 91       	pop	r18
    31f6:	0f 90       	pop	r0
    31f8:	0b be       	out	0x3b, r0	; 59
    31fa:	0f 90       	pop	r0
    31fc:	0f be       	out	0x3f, r0	; 63
    31fe:	0f 90       	pop	r0
    3200:	1f 90       	pop	r1
    3202:	18 95       	reti

00003204 <__subsf3>:
    3204:	50 58       	subi	r21, 0x80	; 128

00003206 <__addsf3>:
    3206:	bb 27       	eor	r27, r27
    3208:	aa 27       	eor	r26, r26
    320a:	0e d0       	rcall	.+28     	; 0x3228 <__addsf3x>
    320c:	44 c1       	rjmp	.+648    	; 0x3496 <__fp_round>
    320e:	35 d1       	rcall	.+618    	; 0x347a <__fp_pscA>
    3210:	30 f0       	brcs	.+12     	; 0x321e <__addsf3+0x18>
    3212:	3a d1       	rcall	.+628    	; 0x3488 <__fp_pscB>
    3214:	20 f0       	brcs	.+8      	; 0x321e <__addsf3+0x18>
    3216:	31 f4       	brne	.+12     	; 0x3224 <__addsf3+0x1e>
    3218:	9f 3f       	cpi	r25, 0xFF	; 255
    321a:	11 f4       	brne	.+4      	; 0x3220 <__addsf3+0x1a>
    321c:	1e f4       	brtc	.+6      	; 0x3224 <__addsf3+0x1e>
    321e:	2a c1       	rjmp	.+596    	; 0x3474 <__fp_nan>
    3220:	0e f4       	brtc	.+2      	; 0x3224 <__addsf3+0x1e>
    3222:	e0 95       	com	r30
    3224:	e7 fb       	bst	r30, 7
    3226:	20 c1       	rjmp	.+576    	; 0x3468 <__fp_inf>

00003228 <__addsf3x>:
    3228:	e9 2f       	mov	r30, r25
    322a:	46 d1       	rcall	.+652    	; 0x34b8 <__fp_split3>
    322c:	80 f3       	brcs	.-32     	; 0x320e <__addsf3+0x8>
    322e:	ba 17       	cp	r27, r26
    3230:	62 07       	cpc	r22, r18
    3232:	73 07       	cpc	r23, r19
    3234:	84 07       	cpc	r24, r20
    3236:	95 07       	cpc	r25, r21
    3238:	18 f0       	brcs	.+6      	; 0x3240 <__addsf3x+0x18>
    323a:	71 f4       	brne	.+28     	; 0x3258 <__addsf3x+0x30>
    323c:	9e f5       	brtc	.+102    	; 0x32a4 <__addsf3x+0x7c>
    323e:	5e c1       	rjmp	.+700    	; 0x34fc <__fp_zero>
    3240:	0e f4       	brtc	.+2      	; 0x3244 <__addsf3x+0x1c>
    3242:	e0 95       	com	r30
    3244:	0b 2e       	mov	r0, r27
    3246:	ba 2f       	mov	r27, r26
    3248:	a0 2d       	mov	r26, r0
    324a:	0b 01       	movw	r0, r22
    324c:	b9 01       	movw	r22, r18
    324e:	90 01       	movw	r18, r0
    3250:	0c 01       	movw	r0, r24
    3252:	ca 01       	movw	r24, r20
    3254:	a0 01       	movw	r20, r0
    3256:	11 24       	eor	r1, r1
    3258:	ff 27       	eor	r31, r31
    325a:	59 1b       	sub	r21, r25
    325c:	99 f0       	breq	.+38     	; 0x3284 <__addsf3x+0x5c>
    325e:	59 3f       	cpi	r21, 0xF9	; 249
    3260:	50 f4       	brcc	.+20     	; 0x3276 <__addsf3x+0x4e>
    3262:	50 3e       	cpi	r21, 0xE0	; 224
    3264:	68 f1       	brcs	.+90     	; 0x32c0 <__addsf3x+0x98>
    3266:	1a 16       	cp	r1, r26
    3268:	f0 40       	sbci	r31, 0x00	; 0
    326a:	a2 2f       	mov	r26, r18
    326c:	23 2f       	mov	r18, r19
    326e:	34 2f       	mov	r19, r20
    3270:	44 27       	eor	r20, r20
    3272:	58 5f       	subi	r21, 0xF8	; 248
    3274:	f3 cf       	rjmp	.-26     	; 0x325c <__addsf3x+0x34>
    3276:	46 95       	lsr	r20
    3278:	37 95       	ror	r19
    327a:	27 95       	ror	r18
    327c:	a7 95       	ror	r26
    327e:	f0 40       	sbci	r31, 0x00	; 0
    3280:	53 95       	inc	r21
    3282:	c9 f7       	brne	.-14     	; 0x3276 <__addsf3x+0x4e>
    3284:	7e f4       	brtc	.+30     	; 0x32a4 <__addsf3x+0x7c>
    3286:	1f 16       	cp	r1, r31
    3288:	ba 0b       	sbc	r27, r26
    328a:	62 0b       	sbc	r22, r18
    328c:	73 0b       	sbc	r23, r19
    328e:	84 0b       	sbc	r24, r20
    3290:	ba f0       	brmi	.+46     	; 0x32c0 <__addsf3x+0x98>
    3292:	91 50       	subi	r25, 0x01	; 1
    3294:	a1 f0       	breq	.+40     	; 0x32be <__addsf3x+0x96>
    3296:	ff 0f       	add	r31, r31
    3298:	bb 1f       	adc	r27, r27
    329a:	66 1f       	adc	r22, r22
    329c:	77 1f       	adc	r23, r23
    329e:	88 1f       	adc	r24, r24
    32a0:	c2 f7       	brpl	.-16     	; 0x3292 <__addsf3x+0x6a>
    32a2:	0e c0       	rjmp	.+28     	; 0x32c0 <__addsf3x+0x98>
    32a4:	ba 0f       	add	r27, r26
    32a6:	62 1f       	adc	r22, r18
    32a8:	73 1f       	adc	r23, r19
    32aa:	84 1f       	adc	r24, r20
    32ac:	48 f4       	brcc	.+18     	; 0x32c0 <__addsf3x+0x98>
    32ae:	87 95       	ror	r24
    32b0:	77 95       	ror	r23
    32b2:	67 95       	ror	r22
    32b4:	b7 95       	ror	r27
    32b6:	f7 95       	ror	r31
    32b8:	9e 3f       	cpi	r25, 0xFE	; 254
    32ba:	08 f0       	brcs	.+2      	; 0x32be <__addsf3x+0x96>
    32bc:	b3 cf       	rjmp	.-154    	; 0x3224 <__addsf3+0x1e>
    32be:	93 95       	inc	r25
    32c0:	88 0f       	add	r24, r24
    32c2:	08 f0       	brcs	.+2      	; 0x32c6 <__addsf3x+0x9e>
    32c4:	99 27       	eor	r25, r25
    32c6:	ee 0f       	add	r30, r30
    32c8:	97 95       	ror	r25
    32ca:	87 95       	ror	r24
    32cc:	08 95       	ret

000032ce <__cmpsf2>:
    32ce:	a8 d0       	rcall	.+336    	; 0x3420 <__fp_cmp>
    32d0:	08 f4       	brcc	.+2      	; 0x32d4 <__cmpsf2+0x6>
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	08 95       	ret

000032d6 <__divsf3>:
    32d6:	0c d0       	rcall	.+24     	; 0x32f0 <__divsf3x>
    32d8:	de c0       	rjmp	.+444    	; 0x3496 <__fp_round>
    32da:	d6 d0       	rcall	.+428    	; 0x3488 <__fp_pscB>
    32dc:	40 f0       	brcs	.+16     	; 0x32ee <__divsf3+0x18>
    32de:	cd d0       	rcall	.+410    	; 0x347a <__fp_pscA>
    32e0:	30 f0       	brcs	.+12     	; 0x32ee <__divsf3+0x18>
    32e2:	21 f4       	brne	.+8      	; 0x32ec <__divsf3+0x16>
    32e4:	5f 3f       	cpi	r21, 0xFF	; 255
    32e6:	19 f0       	breq	.+6      	; 0x32ee <__divsf3+0x18>
    32e8:	bf c0       	rjmp	.+382    	; 0x3468 <__fp_inf>
    32ea:	51 11       	cpse	r21, r1
    32ec:	08 c1       	rjmp	.+528    	; 0x34fe <__fp_szero>
    32ee:	c2 c0       	rjmp	.+388    	; 0x3474 <__fp_nan>

000032f0 <__divsf3x>:
    32f0:	e3 d0       	rcall	.+454    	; 0x34b8 <__fp_split3>
    32f2:	98 f3       	brcs	.-26     	; 0x32da <__divsf3+0x4>

000032f4 <__divsf3_pse>:
    32f4:	99 23       	and	r25, r25
    32f6:	c9 f3       	breq	.-14     	; 0x32ea <__divsf3+0x14>
    32f8:	55 23       	and	r21, r21
    32fa:	b1 f3       	breq	.-20     	; 0x32e8 <__divsf3+0x12>
    32fc:	95 1b       	sub	r25, r21
    32fe:	55 0b       	sbc	r21, r21
    3300:	bb 27       	eor	r27, r27
    3302:	aa 27       	eor	r26, r26
    3304:	62 17       	cp	r22, r18
    3306:	73 07       	cpc	r23, r19
    3308:	84 07       	cpc	r24, r20
    330a:	38 f0       	brcs	.+14     	; 0x331a <__divsf3_pse+0x26>
    330c:	9f 5f       	subi	r25, 0xFF	; 255
    330e:	5f 4f       	sbci	r21, 0xFF	; 255
    3310:	22 0f       	add	r18, r18
    3312:	33 1f       	adc	r19, r19
    3314:	44 1f       	adc	r20, r20
    3316:	aa 1f       	adc	r26, r26
    3318:	a9 f3       	breq	.-22     	; 0x3304 <__divsf3_pse+0x10>
    331a:	33 d0       	rcall	.+102    	; 0x3382 <__divsf3_pse+0x8e>
    331c:	0e 2e       	mov	r0, r30
    331e:	3a f0       	brmi	.+14     	; 0x332e <__divsf3_pse+0x3a>
    3320:	e0 e8       	ldi	r30, 0x80	; 128
    3322:	30 d0       	rcall	.+96     	; 0x3384 <__divsf3_pse+0x90>
    3324:	91 50       	subi	r25, 0x01	; 1
    3326:	50 40       	sbci	r21, 0x00	; 0
    3328:	e6 95       	lsr	r30
    332a:	00 1c       	adc	r0, r0
    332c:	ca f7       	brpl	.-14     	; 0x3320 <__divsf3_pse+0x2c>
    332e:	29 d0       	rcall	.+82     	; 0x3382 <__divsf3_pse+0x8e>
    3330:	fe 2f       	mov	r31, r30
    3332:	27 d0       	rcall	.+78     	; 0x3382 <__divsf3_pse+0x8e>
    3334:	66 0f       	add	r22, r22
    3336:	77 1f       	adc	r23, r23
    3338:	88 1f       	adc	r24, r24
    333a:	bb 1f       	adc	r27, r27
    333c:	26 17       	cp	r18, r22
    333e:	37 07       	cpc	r19, r23
    3340:	48 07       	cpc	r20, r24
    3342:	ab 07       	cpc	r26, r27
    3344:	b0 e8       	ldi	r27, 0x80	; 128
    3346:	09 f0       	breq	.+2      	; 0x334a <__divsf3_pse+0x56>
    3348:	bb 0b       	sbc	r27, r27
    334a:	80 2d       	mov	r24, r0
    334c:	bf 01       	movw	r22, r30
    334e:	ff 27       	eor	r31, r31
    3350:	93 58       	subi	r25, 0x83	; 131
    3352:	5f 4f       	sbci	r21, 0xFF	; 255
    3354:	2a f0       	brmi	.+10     	; 0x3360 <__divsf3_pse+0x6c>
    3356:	9e 3f       	cpi	r25, 0xFE	; 254
    3358:	51 05       	cpc	r21, r1
    335a:	68 f0       	brcs	.+26     	; 0x3376 <__divsf3_pse+0x82>
    335c:	85 c0       	rjmp	.+266    	; 0x3468 <__fp_inf>
    335e:	cf c0       	rjmp	.+414    	; 0x34fe <__fp_szero>
    3360:	5f 3f       	cpi	r21, 0xFF	; 255
    3362:	ec f3       	brlt	.-6      	; 0x335e <__divsf3_pse+0x6a>
    3364:	98 3e       	cpi	r25, 0xE8	; 232
    3366:	dc f3       	brlt	.-10     	; 0x335e <__divsf3_pse+0x6a>
    3368:	86 95       	lsr	r24
    336a:	77 95       	ror	r23
    336c:	67 95       	ror	r22
    336e:	b7 95       	ror	r27
    3370:	f7 95       	ror	r31
    3372:	9f 5f       	subi	r25, 0xFF	; 255
    3374:	c9 f7       	brne	.-14     	; 0x3368 <__divsf3_pse+0x74>
    3376:	88 0f       	add	r24, r24
    3378:	91 1d       	adc	r25, r1
    337a:	96 95       	lsr	r25
    337c:	87 95       	ror	r24
    337e:	97 f9       	bld	r25, 7
    3380:	08 95       	ret
    3382:	e1 e0       	ldi	r30, 0x01	; 1
    3384:	66 0f       	add	r22, r22
    3386:	77 1f       	adc	r23, r23
    3388:	88 1f       	adc	r24, r24
    338a:	bb 1f       	adc	r27, r27
    338c:	62 17       	cp	r22, r18
    338e:	73 07       	cpc	r23, r19
    3390:	84 07       	cpc	r24, r20
    3392:	ba 07       	cpc	r27, r26
    3394:	20 f0       	brcs	.+8      	; 0x339e <__divsf3_pse+0xaa>
    3396:	62 1b       	sub	r22, r18
    3398:	73 0b       	sbc	r23, r19
    339a:	84 0b       	sbc	r24, r20
    339c:	ba 0b       	sbc	r27, r26
    339e:	ee 1f       	adc	r30, r30
    33a0:	88 f7       	brcc	.-30     	; 0x3384 <__divsf3_pse+0x90>
    33a2:	e0 95       	com	r30
    33a4:	08 95       	ret

000033a6 <__floatunsisf>:
    33a6:	e8 94       	clt
    33a8:	09 c0       	rjmp	.+18     	; 0x33bc <__floatsisf+0x12>

000033aa <__floatsisf>:
    33aa:	97 fb       	bst	r25, 7
    33ac:	3e f4       	brtc	.+14     	; 0x33bc <__floatsisf+0x12>
    33ae:	90 95       	com	r25
    33b0:	80 95       	com	r24
    33b2:	70 95       	com	r23
    33b4:	61 95       	neg	r22
    33b6:	7f 4f       	sbci	r23, 0xFF	; 255
    33b8:	8f 4f       	sbci	r24, 0xFF	; 255
    33ba:	9f 4f       	sbci	r25, 0xFF	; 255
    33bc:	99 23       	and	r25, r25
    33be:	a9 f0       	breq	.+42     	; 0x33ea <__floatsisf+0x40>
    33c0:	f9 2f       	mov	r31, r25
    33c2:	96 e9       	ldi	r25, 0x96	; 150
    33c4:	bb 27       	eor	r27, r27
    33c6:	93 95       	inc	r25
    33c8:	f6 95       	lsr	r31
    33ca:	87 95       	ror	r24
    33cc:	77 95       	ror	r23
    33ce:	67 95       	ror	r22
    33d0:	b7 95       	ror	r27
    33d2:	f1 11       	cpse	r31, r1
    33d4:	f8 cf       	rjmp	.-16     	; 0x33c6 <__floatsisf+0x1c>
    33d6:	fa f4       	brpl	.+62     	; 0x3416 <__floatsisf+0x6c>
    33d8:	bb 0f       	add	r27, r27
    33da:	11 f4       	brne	.+4      	; 0x33e0 <__floatsisf+0x36>
    33dc:	60 ff       	sbrs	r22, 0
    33de:	1b c0       	rjmp	.+54     	; 0x3416 <__floatsisf+0x6c>
    33e0:	6f 5f       	subi	r22, 0xFF	; 255
    33e2:	7f 4f       	sbci	r23, 0xFF	; 255
    33e4:	8f 4f       	sbci	r24, 0xFF	; 255
    33e6:	9f 4f       	sbci	r25, 0xFF	; 255
    33e8:	16 c0       	rjmp	.+44     	; 0x3416 <__floatsisf+0x6c>
    33ea:	88 23       	and	r24, r24
    33ec:	11 f0       	breq	.+4      	; 0x33f2 <__floatsisf+0x48>
    33ee:	96 e9       	ldi	r25, 0x96	; 150
    33f0:	11 c0       	rjmp	.+34     	; 0x3414 <__floatsisf+0x6a>
    33f2:	77 23       	and	r23, r23
    33f4:	21 f0       	breq	.+8      	; 0x33fe <__floatsisf+0x54>
    33f6:	9e e8       	ldi	r25, 0x8E	; 142
    33f8:	87 2f       	mov	r24, r23
    33fa:	76 2f       	mov	r23, r22
    33fc:	05 c0       	rjmp	.+10     	; 0x3408 <__floatsisf+0x5e>
    33fe:	66 23       	and	r22, r22
    3400:	71 f0       	breq	.+28     	; 0x341e <__floatsisf+0x74>
    3402:	96 e8       	ldi	r25, 0x86	; 134
    3404:	86 2f       	mov	r24, r22
    3406:	70 e0       	ldi	r23, 0x00	; 0
    3408:	60 e0       	ldi	r22, 0x00	; 0
    340a:	2a f0       	brmi	.+10     	; 0x3416 <__floatsisf+0x6c>
    340c:	9a 95       	dec	r25
    340e:	66 0f       	add	r22, r22
    3410:	77 1f       	adc	r23, r23
    3412:	88 1f       	adc	r24, r24
    3414:	da f7       	brpl	.-10     	; 0x340c <__floatsisf+0x62>
    3416:	88 0f       	add	r24, r24
    3418:	96 95       	lsr	r25
    341a:	87 95       	ror	r24
    341c:	97 f9       	bld	r25, 7
    341e:	08 95       	ret

00003420 <__fp_cmp>:
    3420:	99 0f       	add	r25, r25
    3422:	00 08       	sbc	r0, r0
    3424:	55 0f       	add	r21, r21
    3426:	aa 0b       	sbc	r26, r26
    3428:	e0 e8       	ldi	r30, 0x80	; 128
    342a:	fe ef       	ldi	r31, 0xFE	; 254
    342c:	16 16       	cp	r1, r22
    342e:	17 06       	cpc	r1, r23
    3430:	e8 07       	cpc	r30, r24
    3432:	f9 07       	cpc	r31, r25
    3434:	c0 f0       	brcs	.+48     	; 0x3466 <__fp_cmp+0x46>
    3436:	12 16       	cp	r1, r18
    3438:	13 06       	cpc	r1, r19
    343a:	e4 07       	cpc	r30, r20
    343c:	f5 07       	cpc	r31, r21
    343e:	98 f0       	brcs	.+38     	; 0x3466 <__fp_cmp+0x46>
    3440:	62 1b       	sub	r22, r18
    3442:	73 0b       	sbc	r23, r19
    3444:	84 0b       	sbc	r24, r20
    3446:	95 0b       	sbc	r25, r21
    3448:	39 f4       	brne	.+14     	; 0x3458 <__fp_cmp+0x38>
    344a:	0a 26       	eor	r0, r26
    344c:	61 f0       	breq	.+24     	; 0x3466 <__fp_cmp+0x46>
    344e:	23 2b       	or	r18, r19
    3450:	24 2b       	or	r18, r20
    3452:	25 2b       	or	r18, r21
    3454:	21 f4       	brne	.+8      	; 0x345e <__fp_cmp+0x3e>
    3456:	08 95       	ret
    3458:	0a 26       	eor	r0, r26
    345a:	09 f4       	brne	.+2      	; 0x345e <__fp_cmp+0x3e>
    345c:	a1 40       	sbci	r26, 0x01	; 1
    345e:	a6 95       	lsr	r26
    3460:	8f ef       	ldi	r24, 0xFF	; 255
    3462:	81 1d       	adc	r24, r1
    3464:	81 1d       	adc	r24, r1
    3466:	08 95       	ret

00003468 <__fp_inf>:
    3468:	97 f9       	bld	r25, 7
    346a:	9f 67       	ori	r25, 0x7F	; 127
    346c:	80 e8       	ldi	r24, 0x80	; 128
    346e:	70 e0       	ldi	r23, 0x00	; 0
    3470:	60 e0       	ldi	r22, 0x00	; 0
    3472:	08 95       	ret

00003474 <__fp_nan>:
    3474:	9f ef       	ldi	r25, 0xFF	; 255
    3476:	80 ec       	ldi	r24, 0xC0	; 192
    3478:	08 95       	ret

0000347a <__fp_pscA>:
    347a:	00 24       	eor	r0, r0
    347c:	0a 94       	dec	r0
    347e:	16 16       	cp	r1, r22
    3480:	17 06       	cpc	r1, r23
    3482:	18 06       	cpc	r1, r24
    3484:	09 06       	cpc	r0, r25
    3486:	08 95       	ret

00003488 <__fp_pscB>:
    3488:	00 24       	eor	r0, r0
    348a:	0a 94       	dec	r0
    348c:	12 16       	cp	r1, r18
    348e:	13 06       	cpc	r1, r19
    3490:	14 06       	cpc	r1, r20
    3492:	05 06       	cpc	r0, r21
    3494:	08 95       	ret

00003496 <__fp_round>:
    3496:	09 2e       	mov	r0, r25
    3498:	03 94       	inc	r0
    349a:	00 0c       	add	r0, r0
    349c:	11 f4       	brne	.+4      	; 0x34a2 <__fp_round+0xc>
    349e:	88 23       	and	r24, r24
    34a0:	52 f0       	brmi	.+20     	; 0x34b6 <__fp_round+0x20>
    34a2:	bb 0f       	add	r27, r27
    34a4:	40 f4       	brcc	.+16     	; 0x34b6 <__fp_round+0x20>
    34a6:	bf 2b       	or	r27, r31
    34a8:	11 f4       	brne	.+4      	; 0x34ae <__fp_round+0x18>
    34aa:	60 ff       	sbrs	r22, 0
    34ac:	04 c0       	rjmp	.+8      	; 0x34b6 <__fp_round+0x20>
    34ae:	6f 5f       	subi	r22, 0xFF	; 255
    34b0:	7f 4f       	sbci	r23, 0xFF	; 255
    34b2:	8f 4f       	sbci	r24, 0xFF	; 255
    34b4:	9f 4f       	sbci	r25, 0xFF	; 255
    34b6:	08 95       	ret

000034b8 <__fp_split3>:
    34b8:	57 fd       	sbrc	r21, 7
    34ba:	90 58       	subi	r25, 0x80	; 128
    34bc:	44 0f       	add	r20, r20
    34be:	55 1f       	adc	r21, r21
    34c0:	59 f0       	breq	.+22     	; 0x34d8 <__fp_splitA+0x10>
    34c2:	5f 3f       	cpi	r21, 0xFF	; 255
    34c4:	71 f0       	breq	.+28     	; 0x34e2 <__fp_splitA+0x1a>
    34c6:	47 95       	ror	r20

000034c8 <__fp_splitA>:
    34c8:	88 0f       	add	r24, r24
    34ca:	97 fb       	bst	r25, 7
    34cc:	99 1f       	adc	r25, r25
    34ce:	61 f0       	breq	.+24     	; 0x34e8 <__fp_splitA+0x20>
    34d0:	9f 3f       	cpi	r25, 0xFF	; 255
    34d2:	79 f0       	breq	.+30     	; 0x34f2 <__fp_splitA+0x2a>
    34d4:	87 95       	ror	r24
    34d6:	08 95       	ret
    34d8:	12 16       	cp	r1, r18
    34da:	13 06       	cpc	r1, r19
    34dc:	14 06       	cpc	r1, r20
    34de:	55 1f       	adc	r21, r21
    34e0:	f2 cf       	rjmp	.-28     	; 0x34c6 <__fp_split3+0xe>
    34e2:	46 95       	lsr	r20
    34e4:	f1 df       	rcall	.-30     	; 0x34c8 <__fp_splitA>
    34e6:	08 c0       	rjmp	.+16     	; 0x34f8 <__fp_splitA+0x30>
    34e8:	16 16       	cp	r1, r22
    34ea:	17 06       	cpc	r1, r23
    34ec:	18 06       	cpc	r1, r24
    34ee:	99 1f       	adc	r25, r25
    34f0:	f1 cf       	rjmp	.-30     	; 0x34d4 <__fp_splitA+0xc>
    34f2:	86 95       	lsr	r24
    34f4:	71 05       	cpc	r23, r1
    34f6:	61 05       	cpc	r22, r1
    34f8:	08 94       	sec
    34fa:	08 95       	ret

000034fc <__fp_zero>:
    34fc:	e8 94       	clt

000034fe <__fp_szero>:
    34fe:	bb 27       	eor	r27, r27
    3500:	66 27       	eor	r22, r22
    3502:	77 27       	eor	r23, r23
    3504:	cb 01       	movw	r24, r22
    3506:	97 f9       	bld	r25, 7
    3508:	08 95       	ret

0000350a <__gesf2>:
    350a:	8a df       	rcall	.-236    	; 0x3420 <__fp_cmp>
    350c:	08 f4       	brcc	.+2      	; 0x3510 <__gesf2+0x6>
    350e:	8f ef       	ldi	r24, 0xFF	; 255
    3510:	08 95       	ret

00003512 <__mulsf3>:
    3512:	0b d0       	rcall	.+22     	; 0x352a <__mulsf3x>
    3514:	c0 cf       	rjmp	.-128    	; 0x3496 <__fp_round>
    3516:	b1 df       	rcall	.-158    	; 0x347a <__fp_pscA>
    3518:	28 f0       	brcs	.+10     	; 0x3524 <__mulsf3+0x12>
    351a:	b6 df       	rcall	.-148    	; 0x3488 <__fp_pscB>
    351c:	18 f0       	brcs	.+6      	; 0x3524 <__mulsf3+0x12>
    351e:	95 23       	and	r25, r21
    3520:	09 f0       	breq	.+2      	; 0x3524 <__mulsf3+0x12>
    3522:	a2 cf       	rjmp	.-188    	; 0x3468 <__fp_inf>
    3524:	a7 cf       	rjmp	.-178    	; 0x3474 <__fp_nan>
    3526:	11 24       	eor	r1, r1
    3528:	ea cf       	rjmp	.-44     	; 0x34fe <__fp_szero>

0000352a <__mulsf3x>:
    352a:	c6 df       	rcall	.-116    	; 0x34b8 <__fp_split3>
    352c:	a0 f3       	brcs	.-24     	; 0x3516 <__mulsf3+0x4>

0000352e <__mulsf3_pse>:
    352e:	95 9f       	mul	r25, r21
    3530:	d1 f3       	breq	.-12     	; 0x3526 <__mulsf3+0x14>
    3532:	95 0f       	add	r25, r21
    3534:	50 e0       	ldi	r21, 0x00	; 0
    3536:	55 1f       	adc	r21, r21
    3538:	62 9f       	mul	r22, r18
    353a:	f0 01       	movw	r30, r0
    353c:	72 9f       	mul	r23, r18
    353e:	bb 27       	eor	r27, r27
    3540:	f0 0d       	add	r31, r0
    3542:	b1 1d       	adc	r27, r1
    3544:	63 9f       	mul	r22, r19
    3546:	aa 27       	eor	r26, r26
    3548:	f0 0d       	add	r31, r0
    354a:	b1 1d       	adc	r27, r1
    354c:	aa 1f       	adc	r26, r26
    354e:	64 9f       	mul	r22, r20
    3550:	66 27       	eor	r22, r22
    3552:	b0 0d       	add	r27, r0
    3554:	a1 1d       	adc	r26, r1
    3556:	66 1f       	adc	r22, r22
    3558:	82 9f       	mul	r24, r18
    355a:	22 27       	eor	r18, r18
    355c:	b0 0d       	add	r27, r0
    355e:	a1 1d       	adc	r26, r1
    3560:	62 1f       	adc	r22, r18
    3562:	73 9f       	mul	r23, r19
    3564:	b0 0d       	add	r27, r0
    3566:	a1 1d       	adc	r26, r1
    3568:	62 1f       	adc	r22, r18
    356a:	83 9f       	mul	r24, r19
    356c:	a0 0d       	add	r26, r0
    356e:	61 1d       	adc	r22, r1
    3570:	22 1f       	adc	r18, r18
    3572:	74 9f       	mul	r23, r20
    3574:	33 27       	eor	r19, r19
    3576:	a0 0d       	add	r26, r0
    3578:	61 1d       	adc	r22, r1
    357a:	23 1f       	adc	r18, r19
    357c:	84 9f       	mul	r24, r20
    357e:	60 0d       	add	r22, r0
    3580:	21 1d       	adc	r18, r1
    3582:	82 2f       	mov	r24, r18
    3584:	76 2f       	mov	r23, r22
    3586:	6a 2f       	mov	r22, r26
    3588:	11 24       	eor	r1, r1
    358a:	9f 57       	subi	r25, 0x7F	; 127
    358c:	50 40       	sbci	r21, 0x00	; 0
    358e:	8a f0       	brmi	.+34     	; 0x35b2 <__mulsf3_pse+0x84>
    3590:	e1 f0       	breq	.+56     	; 0x35ca <__mulsf3_pse+0x9c>
    3592:	88 23       	and	r24, r24
    3594:	4a f0       	brmi	.+18     	; 0x35a8 <__mulsf3_pse+0x7a>
    3596:	ee 0f       	add	r30, r30
    3598:	ff 1f       	adc	r31, r31
    359a:	bb 1f       	adc	r27, r27
    359c:	66 1f       	adc	r22, r22
    359e:	77 1f       	adc	r23, r23
    35a0:	88 1f       	adc	r24, r24
    35a2:	91 50       	subi	r25, 0x01	; 1
    35a4:	50 40       	sbci	r21, 0x00	; 0
    35a6:	a9 f7       	brne	.-22     	; 0x3592 <__mulsf3_pse+0x64>
    35a8:	9e 3f       	cpi	r25, 0xFE	; 254
    35aa:	51 05       	cpc	r21, r1
    35ac:	70 f0       	brcs	.+28     	; 0x35ca <__mulsf3_pse+0x9c>
    35ae:	5c cf       	rjmp	.-328    	; 0x3468 <__fp_inf>
    35b0:	a6 cf       	rjmp	.-180    	; 0x34fe <__fp_szero>
    35b2:	5f 3f       	cpi	r21, 0xFF	; 255
    35b4:	ec f3       	brlt	.-6      	; 0x35b0 <__mulsf3_pse+0x82>
    35b6:	98 3e       	cpi	r25, 0xE8	; 232
    35b8:	dc f3       	brlt	.-10     	; 0x35b0 <__mulsf3_pse+0x82>
    35ba:	86 95       	lsr	r24
    35bc:	77 95       	ror	r23
    35be:	67 95       	ror	r22
    35c0:	b7 95       	ror	r27
    35c2:	f7 95       	ror	r31
    35c4:	e7 95       	ror	r30
    35c6:	9f 5f       	subi	r25, 0xFF	; 255
    35c8:	c1 f7       	brne	.-16     	; 0x35ba <__mulsf3_pse+0x8c>
    35ca:	fe 2b       	or	r31, r30
    35cc:	88 0f       	add	r24, r24
    35ce:	91 1d       	adc	r25, r1
    35d0:	96 95       	lsr	r25
    35d2:	87 95       	ror	r24
    35d4:	97 f9       	bld	r25, 7
    35d6:	08 95       	ret

000035d8 <vfprintf>:
    35d8:	2f 92       	push	r2
    35da:	3f 92       	push	r3
    35dc:	4f 92       	push	r4
    35de:	5f 92       	push	r5
    35e0:	6f 92       	push	r6
    35e2:	7f 92       	push	r7
    35e4:	8f 92       	push	r8
    35e6:	9f 92       	push	r9
    35e8:	af 92       	push	r10
    35ea:	bf 92       	push	r11
    35ec:	cf 92       	push	r12
    35ee:	df 92       	push	r13
    35f0:	ef 92       	push	r14
    35f2:	ff 92       	push	r15
    35f4:	0f 93       	push	r16
    35f6:	1f 93       	push	r17
    35f8:	cf 93       	push	r28
    35fa:	df 93       	push	r29
    35fc:	cd b7       	in	r28, 0x3d	; 61
    35fe:	de b7       	in	r29, 0x3e	; 62
    3600:	60 97       	sbiw	r28, 0x10	; 16
    3602:	0f b6       	in	r0, 0x3f	; 63
    3604:	f8 94       	cli
    3606:	de bf       	out	0x3e, r29	; 62
    3608:	0f be       	out	0x3f, r0	; 63
    360a:	cd bf       	out	0x3d, r28	; 61
    360c:	7c 01       	movw	r14, r24
    360e:	1b 01       	movw	r2, r22
    3610:	6a 01       	movw	r12, r20
    3612:	fc 01       	movw	r30, r24
    3614:	17 82       	std	Z+7, r1	; 0x07
    3616:	16 82       	std	Z+6, r1	; 0x06
    3618:	83 81       	ldd	r24, Z+3	; 0x03
    361a:	81 ff       	sbrs	r24, 1
    361c:	2a c3       	rjmp	.+1620   	; 0x3c72 <vfprintf+0x69a>
    361e:	9e 01       	movw	r18, r28
    3620:	2f 5f       	subi	r18, 0xFF	; 255
    3622:	3f 4f       	sbci	r19, 0xFF	; 255
    3624:	39 01       	movw	r6, r18
    3626:	f7 01       	movw	r30, r14
    3628:	93 81       	ldd	r25, Z+3	; 0x03
    362a:	f1 01       	movw	r30, r2
    362c:	93 fd       	sbrc	r25, 3
    362e:	85 91       	lpm	r24, Z+
    3630:	93 ff       	sbrs	r25, 3
    3632:	81 91       	ld	r24, Z+
    3634:	1f 01       	movw	r2, r30
    3636:	88 23       	and	r24, r24
    3638:	09 f4       	brne	.+2      	; 0x363c <vfprintf+0x64>
    363a:	17 c3       	rjmp	.+1582   	; 0x3c6a <vfprintf+0x692>
    363c:	85 32       	cpi	r24, 0x25	; 37
    363e:	39 f4       	brne	.+14     	; 0x364e <vfprintf+0x76>
    3640:	93 fd       	sbrc	r25, 3
    3642:	85 91       	lpm	r24, Z+
    3644:	93 ff       	sbrs	r25, 3
    3646:	81 91       	ld	r24, Z+
    3648:	1f 01       	movw	r2, r30
    364a:	85 32       	cpi	r24, 0x25	; 37
    364c:	31 f4       	brne	.+12     	; 0x365a <vfprintf+0x82>
    364e:	b7 01       	movw	r22, r14
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	16 d6       	rcall	.+3116   	; 0x4280 <fputc>
    3654:	56 01       	movw	r10, r12
    3656:	65 01       	movw	r12, r10
    3658:	e6 cf       	rjmp	.-52     	; 0x3626 <vfprintf+0x4e>
    365a:	10 e0       	ldi	r17, 0x00	; 0
    365c:	51 2c       	mov	r5, r1
    365e:	91 2c       	mov	r9, r1
    3660:	ff e1       	ldi	r31, 0x1F	; 31
    3662:	f9 15       	cp	r31, r9
    3664:	d8 f0       	brcs	.+54     	; 0x369c <vfprintf+0xc4>
    3666:	8b 32       	cpi	r24, 0x2B	; 43
    3668:	79 f0       	breq	.+30     	; 0x3688 <vfprintf+0xb0>
    366a:	38 f4       	brcc	.+14     	; 0x367a <vfprintf+0xa2>
    366c:	80 32       	cpi	r24, 0x20	; 32
    366e:	79 f0       	breq	.+30     	; 0x368e <vfprintf+0xb6>
    3670:	83 32       	cpi	r24, 0x23	; 35
    3672:	a1 f4       	brne	.+40     	; 0x369c <vfprintf+0xc4>
    3674:	f9 2d       	mov	r31, r9
    3676:	f0 61       	ori	r31, 0x10	; 16
    3678:	2e c0       	rjmp	.+92     	; 0x36d6 <vfprintf+0xfe>
    367a:	8d 32       	cpi	r24, 0x2D	; 45
    367c:	61 f0       	breq	.+24     	; 0x3696 <vfprintf+0xbe>
    367e:	80 33       	cpi	r24, 0x30	; 48
    3680:	69 f4       	brne	.+26     	; 0x369c <vfprintf+0xc4>
    3682:	29 2d       	mov	r18, r9
    3684:	21 60       	ori	r18, 0x01	; 1
    3686:	2d c0       	rjmp	.+90     	; 0x36e2 <vfprintf+0x10a>
    3688:	39 2d       	mov	r19, r9
    368a:	32 60       	ori	r19, 0x02	; 2
    368c:	93 2e       	mov	r9, r19
    368e:	89 2d       	mov	r24, r9
    3690:	84 60       	ori	r24, 0x04	; 4
    3692:	98 2e       	mov	r9, r24
    3694:	2a c0       	rjmp	.+84     	; 0x36ea <vfprintf+0x112>
    3696:	e9 2d       	mov	r30, r9
    3698:	e8 60       	ori	r30, 0x08	; 8
    369a:	15 c0       	rjmp	.+42     	; 0x36c6 <vfprintf+0xee>
    369c:	97 fc       	sbrc	r9, 7
    369e:	2d c0       	rjmp	.+90     	; 0x36fa <vfprintf+0x122>
    36a0:	20 ed       	ldi	r18, 0xD0	; 208
    36a2:	28 0f       	add	r18, r24
    36a4:	2a 30       	cpi	r18, 0x0A	; 10
    36a6:	88 f4       	brcc	.+34     	; 0x36ca <vfprintf+0xf2>
    36a8:	96 fe       	sbrs	r9, 6
    36aa:	06 c0       	rjmp	.+12     	; 0x36b8 <vfprintf+0xe0>
    36ac:	3a e0       	ldi	r19, 0x0A	; 10
    36ae:	13 9f       	mul	r17, r19
    36b0:	20 0d       	add	r18, r0
    36b2:	11 24       	eor	r1, r1
    36b4:	12 2f       	mov	r17, r18
    36b6:	19 c0       	rjmp	.+50     	; 0x36ea <vfprintf+0x112>
    36b8:	8a e0       	ldi	r24, 0x0A	; 10
    36ba:	58 9e       	mul	r5, r24
    36bc:	20 0d       	add	r18, r0
    36be:	11 24       	eor	r1, r1
    36c0:	52 2e       	mov	r5, r18
    36c2:	e9 2d       	mov	r30, r9
    36c4:	e0 62       	ori	r30, 0x20	; 32
    36c6:	9e 2e       	mov	r9, r30
    36c8:	10 c0       	rjmp	.+32     	; 0x36ea <vfprintf+0x112>
    36ca:	8e 32       	cpi	r24, 0x2E	; 46
    36cc:	31 f4       	brne	.+12     	; 0x36da <vfprintf+0x102>
    36ce:	96 fc       	sbrc	r9, 6
    36d0:	cc c2       	rjmp	.+1432   	; 0x3c6a <vfprintf+0x692>
    36d2:	f9 2d       	mov	r31, r9
    36d4:	f0 64       	ori	r31, 0x40	; 64
    36d6:	9f 2e       	mov	r9, r31
    36d8:	08 c0       	rjmp	.+16     	; 0x36ea <vfprintf+0x112>
    36da:	8c 36       	cpi	r24, 0x6C	; 108
    36dc:	21 f4       	brne	.+8      	; 0x36e6 <vfprintf+0x10e>
    36de:	29 2d       	mov	r18, r9
    36e0:	20 68       	ori	r18, 0x80	; 128
    36e2:	92 2e       	mov	r9, r18
    36e4:	02 c0       	rjmp	.+4      	; 0x36ea <vfprintf+0x112>
    36e6:	88 36       	cpi	r24, 0x68	; 104
    36e8:	41 f4       	brne	.+16     	; 0x36fa <vfprintf+0x122>
    36ea:	f1 01       	movw	r30, r2
    36ec:	93 fd       	sbrc	r25, 3
    36ee:	85 91       	lpm	r24, Z+
    36f0:	93 ff       	sbrs	r25, 3
    36f2:	81 91       	ld	r24, Z+
    36f4:	1f 01       	movw	r2, r30
    36f6:	81 11       	cpse	r24, r1
    36f8:	b3 cf       	rjmp	.-154    	; 0x3660 <vfprintf+0x88>
    36fa:	9b eb       	ldi	r25, 0xBB	; 187
    36fc:	98 0f       	add	r25, r24
    36fe:	93 30       	cpi	r25, 0x03	; 3
    3700:	20 f4       	brcc	.+8      	; 0x370a <vfprintf+0x132>
    3702:	99 2d       	mov	r25, r9
    3704:	90 61       	ori	r25, 0x10	; 16
    3706:	80 5e       	subi	r24, 0xE0	; 224
    3708:	07 c0       	rjmp	.+14     	; 0x3718 <vfprintf+0x140>
    370a:	9b e9       	ldi	r25, 0x9B	; 155
    370c:	98 0f       	add	r25, r24
    370e:	93 30       	cpi	r25, 0x03	; 3
    3710:	08 f0       	brcs	.+2      	; 0x3714 <vfprintf+0x13c>
    3712:	59 c1       	rjmp	.+690    	; 0x39c6 <vfprintf+0x3ee>
    3714:	99 2d       	mov	r25, r9
    3716:	9f 7e       	andi	r25, 0xEF	; 239
    3718:	96 ff       	sbrs	r25, 6
    371a:	16 e0       	ldi	r17, 0x06	; 6
    371c:	9f 73       	andi	r25, 0x3F	; 63
    371e:	99 2e       	mov	r9, r25
    3720:	85 36       	cpi	r24, 0x65	; 101
    3722:	19 f4       	brne	.+6      	; 0x372a <vfprintf+0x152>
    3724:	90 64       	ori	r25, 0x40	; 64
    3726:	99 2e       	mov	r9, r25
    3728:	08 c0       	rjmp	.+16     	; 0x373a <vfprintf+0x162>
    372a:	86 36       	cpi	r24, 0x66	; 102
    372c:	21 f4       	brne	.+8      	; 0x3736 <vfprintf+0x15e>
    372e:	39 2f       	mov	r19, r25
    3730:	30 68       	ori	r19, 0x80	; 128
    3732:	93 2e       	mov	r9, r19
    3734:	02 c0       	rjmp	.+4      	; 0x373a <vfprintf+0x162>
    3736:	11 11       	cpse	r17, r1
    3738:	11 50       	subi	r17, 0x01	; 1
    373a:	97 fe       	sbrs	r9, 7
    373c:	07 c0       	rjmp	.+14     	; 0x374c <vfprintf+0x174>
    373e:	1c 33       	cpi	r17, 0x3C	; 60
    3740:	50 f4       	brcc	.+20     	; 0x3756 <vfprintf+0x17e>
    3742:	44 24       	eor	r4, r4
    3744:	43 94       	inc	r4
    3746:	41 0e       	add	r4, r17
    3748:	27 e0       	ldi	r18, 0x07	; 7
    374a:	0b c0       	rjmp	.+22     	; 0x3762 <vfprintf+0x18a>
    374c:	18 30       	cpi	r17, 0x08	; 8
    374e:	38 f0       	brcs	.+14     	; 0x375e <vfprintf+0x186>
    3750:	27 e0       	ldi	r18, 0x07	; 7
    3752:	17 e0       	ldi	r17, 0x07	; 7
    3754:	05 c0       	rjmp	.+10     	; 0x3760 <vfprintf+0x188>
    3756:	27 e0       	ldi	r18, 0x07	; 7
    3758:	9c e3       	ldi	r25, 0x3C	; 60
    375a:	49 2e       	mov	r4, r25
    375c:	02 c0       	rjmp	.+4      	; 0x3762 <vfprintf+0x18a>
    375e:	21 2f       	mov	r18, r17
    3760:	41 2c       	mov	r4, r1
    3762:	56 01       	movw	r10, r12
    3764:	84 e0       	ldi	r24, 0x04	; 4
    3766:	a8 0e       	add	r10, r24
    3768:	b1 1c       	adc	r11, r1
    376a:	f6 01       	movw	r30, r12
    376c:	60 81       	ld	r22, Z
    376e:	71 81       	ldd	r23, Z+1	; 0x01
    3770:	82 81       	ldd	r24, Z+2	; 0x02
    3772:	93 81       	ldd	r25, Z+3	; 0x03
    3774:	04 2d       	mov	r16, r4
    3776:	a3 01       	movw	r20, r6
    3778:	75 d4       	rcall	.+2282   	; 0x4064 <__ftoa_engine>
    377a:	6c 01       	movw	r12, r24
    377c:	f9 81       	ldd	r31, Y+1	; 0x01
    377e:	fc 87       	std	Y+12, r31	; 0x0c
    3780:	f0 ff       	sbrs	r31, 0
    3782:	02 c0       	rjmp	.+4      	; 0x3788 <vfprintf+0x1b0>
    3784:	f3 ff       	sbrs	r31, 3
    3786:	06 c0       	rjmp	.+12     	; 0x3794 <vfprintf+0x1bc>
    3788:	91 fc       	sbrc	r9, 1
    378a:	06 c0       	rjmp	.+12     	; 0x3798 <vfprintf+0x1c0>
    378c:	92 fe       	sbrs	r9, 2
    378e:	06 c0       	rjmp	.+12     	; 0x379c <vfprintf+0x1c4>
    3790:	00 e2       	ldi	r16, 0x20	; 32
    3792:	05 c0       	rjmp	.+10     	; 0x379e <vfprintf+0x1c6>
    3794:	0d e2       	ldi	r16, 0x2D	; 45
    3796:	03 c0       	rjmp	.+6      	; 0x379e <vfprintf+0x1c6>
    3798:	0b e2       	ldi	r16, 0x2B	; 43
    379a:	01 c0       	rjmp	.+2      	; 0x379e <vfprintf+0x1c6>
    379c:	00 e0       	ldi	r16, 0x00	; 0
    379e:	8c 85       	ldd	r24, Y+12	; 0x0c
    37a0:	8c 70       	andi	r24, 0x0C	; 12
    37a2:	19 f0       	breq	.+6      	; 0x37aa <vfprintf+0x1d2>
    37a4:	01 11       	cpse	r16, r1
    37a6:	43 c2       	rjmp	.+1158   	; 0x3c2e <vfprintf+0x656>
    37a8:	80 c2       	rjmp	.+1280   	; 0x3caa <vfprintf+0x6d2>
    37aa:	97 fe       	sbrs	r9, 7
    37ac:	10 c0       	rjmp	.+32     	; 0x37ce <vfprintf+0x1f6>
    37ae:	4c 0c       	add	r4, r12
    37b0:	fc 85       	ldd	r31, Y+12	; 0x0c
    37b2:	f4 ff       	sbrs	r31, 4
    37b4:	04 c0       	rjmp	.+8      	; 0x37be <vfprintf+0x1e6>
    37b6:	8a 81       	ldd	r24, Y+2	; 0x02
    37b8:	81 33       	cpi	r24, 0x31	; 49
    37ba:	09 f4       	brne	.+2      	; 0x37be <vfprintf+0x1e6>
    37bc:	4a 94       	dec	r4
    37be:	14 14       	cp	r1, r4
    37c0:	74 f5       	brge	.+92     	; 0x381e <vfprintf+0x246>
    37c2:	28 e0       	ldi	r18, 0x08	; 8
    37c4:	24 15       	cp	r18, r4
    37c6:	78 f5       	brcc	.+94     	; 0x3826 <vfprintf+0x24e>
    37c8:	88 e0       	ldi	r24, 0x08	; 8
    37ca:	48 2e       	mov	r4, r24
    37cc:	2c c0       	rjmp	.+88     	; 0x3826 <vfprintf+0x24e>
    37ce:	96 fc       	sbrc	r9, 6
    37d0:	2a c0       	rjmp	.+84     	; 0x3826 <vfprintf+0x24e>
    37d2:	81 2f       	mov	r24, r17
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	8c 15       	cp	r24, r12
    37d8:	9d 05       	cpc	r25, r13
    37da:	9c f0       	brlt	.+38     	; 0x3802 <vfprintf+0x22a>
    37dc:	3c ef       	ldi	r19, 0xFC	; 252
    37de:	c3 16       	cp	r12, r19
    37e0:	3f ef       	ldi	r19, 0xFF	; 255
    37e2:	d3 06       	cpc	r13, r19
    37e4:	74 f0       	brlt	.+28     	; 0x3802 <vfprintf+0x22a>
    37e6:	89 2d       	mov	r24, r9
    37e8:	80 68       	ori	r24, 0x80	; 128
    37ea:	98 2e       	mov	r9, r24
    37ec:	0a c0       	rjmp	.+20     	; 0x3802 <vfprintf+0x22a>
    37ee:	e2 e0       	ldi	r30, 0x02	; 2
    37f0:	f0 e0       	ldi	r31, 0x00	; 0
    37f2:	ec 0f       	add	r30, r28
    37f4:	fd 1f       	adc	r31, r29
    37f6:	e1 0f       	add	r30, r17
    37f8:	f1 1d       	adc	r31, r1
    37fa:	80 81       	ld	r24, Z
    37fc:	80 33       	cpi	r24, 0x30	; 48
    37fe:	19 f4       	brne	.+6      	; 0x3806 <vfprintf+0x22e>
    3800:	11 50       	subi	r17, 0x01	; 1
    3802:	11 11       	cpse	r17, r1
    3804:	f4 cf       	rjmp	.-24     	; 0x37ee <vfprintf+0x216>
    3806:	97 fe       	sbrs	r9, 7
    3808:	0e c0       	rjmp	.+28     	; 0x3826 <vfprintf+0x24e>
    380a:	44 24       	eor	r4, r4
    380c:	43 94       	inc	r4
    380e:	41 0e       	add	r4, r17
    3810:	81 2f       	mov	r24, r17
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	c8 16       	cp	r12, r24
    3816:	d9 06       	cpc	r13, r25
    3818:	2c f4       	brge	.+10     	; 0x3824 <vfprintf+0x24c>
    381a:	1c 19       	sub	r17, r12
    381c:	04 c0       	rjmp	.+8      	; 0x3826 <vfprintf+0x24e>
    381e:	44 24       	eor	r4, r4
    3820:	43 94       	inc	r4
    3822:	01 c0       	rjmp	.+2      	; 0x3826 <vfprintf+0x24e>
    3824:	10 e0       	ldi	r17, 0x00	; 0
    3826:	97 fe       	sbrs	r9, 7
    3828:	06 c0       	rjmp	.+12     	; 0x3836 <vfprintf+0x25e>
    382a:	1c 14       	cp	r1, r12
    382c:	1d 04       	cpc	r1, r13
    382e:	34 f4       	brge	.+12     	; 0x383c <vfprintf+0x264>
    3830:	c6 01       	movw	r24, r12
    3832:	01 96       	adiw	r24, 0x01	; 1
    3834:	05 c0       	rjmp	.+10     	; 0x3840 <vfprintf+0x268>
    3836:	85 e0       	ldi	r24, 0x05	; 5
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	02 c0       	rjmp	.+4      	; 0x3840 <vfprintf+0x268>
    383c:	81 e0       	ldi	r24, 0x01	; 1
    383e:	90 e0       	ldi	r25, 0x00	; 0
    3840:	01 11       	cpse	r16, r1
    3842:	01 96       	adiw	r24, 0x01	; 1
    3844:	11 23       	and	r17, r17
    3846:	31 f0       	breq	.+12     	; 0x3854 <vfprintf+0x27c>
    3848:	21 2f       	mov	r18, r17
    384a:	30 e0       	ldi	r19, 0x00	; 0
    384c:	2f 5f       	subi	r18, 0xFF	; 255
    384e:	3f 4f       	sbci	r19, 0xFF	; 255
    3850:	82 0f       	add	r24, r18
    3852:	93 1f       	adc	r25, r19
    3854:	25 2d       	mov	r18, r5
    3856:	30 e0       	ldi	r19, 0x00	; 0
    3858:	82 17       	cp	r24, r18
    385a:	93 07       	cpc	r25, r19
    385c:	14 f4       	brge	.+4      	; 0x3862 <vfprintf+0x28a>
    385e:	58 1a       	sub	r5, r24
    3860:	01 c0       	rjmp	.+2      	; 0x3864 <vfprintf+0x28c>
    3862:	51 2c       	mov	r5, r1
    3864:	89 2d       	mov	r24, r9
    3866:	89 70       	andi	r24, 0x09	; 9
    3868:	41 f4       	brne	.+16     	; 0x387a <vfprintf+0x2a2>
    386a:	55 20       	and	r5, r5
    386c:	31 f0       	breq	.+12     	; 0x387a <vfprintf+0x2a2>
    386e:	b7 01       	movw	r22, r14
    3870:	80 e2       	ldi	r24, 0x20	; 32
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	05 d5       	rcall	.+2570   	; 0x4280 <fputc>
    3876:	5a 94       	dec	r5
    3878:	f8 cf       	rjmp	.-16     	; 0x386a <vfprintf+0x292>
    387a:	00 23       	and	r16, r16
    387c:	21 f0       	breq	.+8      	; 0x3886 <vfprintf+0x2ae>
    387e:	b7 01       	movw	r22, r14
    3880:	80 2f       	mov	r24, r16
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	fd d4       	rcall	.+2554   	; 0x4280 <fputc>
    3886:	93 fc       	sbrc	r9, 3
    3888:	08 c0       	rjmp	.+16     	; 0x389a <vfprintf+0x2c2>
    388a:	55 20       	and	r5, r5
    388c:	31 f0       	breq	.+12     	; 0x389a <vfprintf+0x2c2>
    388e:	b7 01       	movw	r22, r14
    3890:	80 e3       	ldi	r24, 0x30	; 48
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	f5 d4       	rcall	.+2538   	; 0x4280 <fputc>
    3896:	5a 94       	dec	r5
    3898:	f8 cf       	rjmp	.-16     	; 0x388a <vfprintf+0x2b2>
    389a:	97 fe       	sbrs	r9, 7
    389c:	4a c0       	rjmp	.+148    	; 0x3932 <vfprintf+0x35a>
    389e:	46 01       	movw	r8, r12
    38a0:	d7 fe       	sbrs	r13, 7
    38a2:	02 c0       	rjmp	.+4      	; 0x38a8 <vfprintf+0x2d0>
    38a4:	81 2c       	mov	r8, r1
    38a6:	91 2c       	mov	r9, r1
    38a8:	c6 01       	movw	r24, r12
    38aa:	88 19       	sub	r24, r8
    38ac:	99 09       	sbc	r25, r9
    38ae:	f3 01       	movw	r30, r6
    38b0:	e8 0f       	add	r30, r24
    38b2:	f9 1f       	adc	r31, r25
    38b4:	fe 87       	std	Y+14, r31	; 0x0e
    38b6:	ed 87       	std	Y+13, r30	; 0x0d
    38b8:	96 01       	movw	r18, r12
    38ba:	24 19       	sub	r18, r4
    38bc:	31 09       	sbc	r19, r1
    38be:	38 8b       	std	Y+16, r19	; 0x10
    38c0:	2f 87       	std	Y+15, r18	; 0x0f
    38c2:	01 2f       	mov	r16, r17
    38c4:	10 e0       	ldi	r17, 0x00	; 0
    38c6:	11 95       	neg	r17
    38c8:	01 95       	neg	r16
    38ca:	11 09       	sbc	r17, r1
    38cc:	3f ef       	ldi	r19, 0xFF	; 255
    38ce:	83 16       	cp	r8, r19
    38d0:	93 06       	cpc	r9, r19
    38d2:	21 f4       	brne	.+8      	; 0x38dc <vfprintf+0x304>
    38d4:	b7 01       	movw	r22, r14
    38d6:	8e e2       	ldi	r24, 0x2E	; 46
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	d2 d4       	rcall	.+2468   	; 0x4280 <fputc>
    38dc:	c8 14       	cp	r12, r8
    38de:	d9 04       	cpc	r13, r9
    38e0:	4c f0       	brlt	.+18     	; 0x38f4 <vfprintf+0x31c>
    38e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    38e4:	98 89       	ldd	r25, Y+16	; 0x10
    38e6:	88 15       	cp	r24, r8
    38e8:	99 05       	cpc	r25, r9
    38ea:	24 f4       	brge	.+8      	; 0x38f4 <vfprintf+0x31c>
    38ec:	ed 85       	ldd	r30, Y+13	; 0x0d
    38ee:	fe 85       	ldd	r31, Y+14	; 0x0e
    38f0:	81 81       	ldd	r24, Z+1	; 0x01
    38f2:	01 c0       	rjmp	.+2      	; 0x38f6 <vfprintf+0x31e>
    38f4:	80 e3       	ldi	r24, 0x30	; 48
    38f6:	f1 e0       	ldi	r31, 0x01	; 1
    38f8:	8f 1a       	sub	r8, r31
    38fa:	91 08       	sbc	r9, r1
    38fc:	2d 85       	ldd	r18, Y+13	; 0x0d
    38fe:	3e 85       	ldd	r19, Y+14	; 0x0e
    3900:	2f 5f       	subi	r18, 0xFF	; 255
    3902:	3f 4f       	sbci	r19, 0xFF	; 255
    3904:	3e 87       	std	Y+14, r19	; 0x0e
    3906:	2d 87       	std	Y+13, r18	; 0x0d
    3908:	80 16       	cp	r8, r16
    390a:	91 06       	cpc	r9, r17
    390c:	24 f0       	brlt	.+8      	; 0x3916 <vfprintf+0x33e>
    390e:	b7 01       	movw	r22, r14
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	b6 d4       	rcall	.+2412   	; 0x4280 <fputc>
    3914:	db cf       	rjmp	.-74     	; 0x38cc <vfprintf+0x2f4>
    3916:	c8 14       	cp	r12, r8
    3918:	d9 04       	cpc	r13, r9
    391a:	41 f4       	brne	.+16     	; 0x392c <vfprintf+0x354>
    391c:	9a 81       	ldd	r25, Y+2	; 0x02
    391e:	96 33       	cpi	r25, 0x36	; 54
    3920:	20 f4       	brcc	.+8      	; 0x392a <vfprintf+0x352>
    3922:	95 33       	cpi	r25, 0x35	; 53
    3924:	19 f4       	brne	.+6      	; 0x392c <vfprintf+0x354>
    3926:	3c 85       	ldd	r19, Y+12	; 0x0c
    3928:	34 ff       	sbrs	r19, 4
    392a:	81 e3       	ldi	r24, 0x31	; 49
    392c:	b7 01       	movw	r22, r14
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	48 c0       	rjmp	.+144    	; 0x39c2 <vfprintf+0x3ea>
    3932:	8a 81       	ldd	r24, Y+2	; 0x02
    3934:	81 33       	cpi	r24, 0x31	; 49
    3936:	19 f0       	breq	.+6      	; 0x393e <vfprintf+0x366>
    3938:	9c 85       	ldd	r25, Y+12	; 0x0c
    393a:	9f 7e       	andi	r25, 0xEF	; 239
    393c:	9c 87       	std	Y+12, r25	; 0x0c
    393e:	b7 01       	movw	r22, r14
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	9e d4       	rcall	.+2364   	; 0x4280 <fputc>
    3944:	11 11       	cpse	r17, r1
    3946:	05 c0       	rjmp	.+10     	; 0x3952 <vfprintf+0x37a>
    3948:	94 fc       	sbrc	r9, 4
    394a:	16 c0       	rjmp	.+44     	; 0x3978 <vfprintf+0x3a0>
    394c:	85 e6       	ldi	r24, 0x65	; 101
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	15 c0       	rjmp	.+42     	; 0x397c <vfprintf+0x3a4>
    3952:	b7 01       	movw	r22, r14
    3954:	8e e2       	ldi	r24, 0x2E	; 46
    3956:	90 e0       	ldi	r25, 0x00	; 0
    3958:	93 d4       	rcall	.+2342   	; 0x4280 <fputc>
    395a:	1e 5f       	subi	r17, 0xFE	; 254
    395c:	82 e0       	ldi	r24, 0x02	; 2
    395e:	01 e0       	ldi	r16, 0x01	; 1
    3960:	08 0f       	add	r16, r24
    3962:	f3 01       	movw	r30, r6
    3964:	e8 0f       	add	r30, r24
    3966:	f1 1d       	adc	r31, r1
    3968:	80 81       	ld	r24, Z
    396a:	b7 01       	movw	r22, r14
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	88 d4       	rcall	.+2320   	; 0x4280 <fputc>
    3970:	80 2f       	mov	r24, r16
    3972:	01 13       	cpse	r16, r17
    3974:	f4 cf       	rjmp	.-24     	; 0x395e <vfprintf+0x386>
    3976:	e8 cf       	rjmp	.-48     	; 0x3948 <vfprintf+0x370>
    3978:	85 e4       	ldi	r24, 0x45	; 69
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	b7 01       	movw	r22, r14
    397e:	80 d4       	rcall	.+2304   	; 0x4280 <fputc>
    3980:	d7 fc       	sbrc	r13, 7
    3982:	06 c0       	rjmp	.+12     	; 0x3990 <vfprintf+0x3b8>
    3984:	c1 14       	cp	r12, r1
    3986:	d1 04       	cpc	r13, r1
    3988:	41 f4       	brne	.+16     	; 0x399a <vfprintf+0x3c2>
    398a:	ec 85       	ldd	r30, Y+12	; 0x0c
    398c:	e4 ff       	sbrs	r30, 4
    398e:	05 c0       	rjmp	.+10     	; 0x399a <vfprintf+0x3c2>
    3990:	d1 94       	neg	r13
    3992:	c1 94       	neg	r12
    3994:	d1 08       	sbc	r13, r1
    3996:	8d e2       	ldi	r24, 0x2D	; 45
    3998:	01 c0       	rjmp	.+2      	; 0x399c <vfprintf+0x3c4>
    399a:	8b e2       	ldi	r24, 0x2B	; 43
    399c:	b7 01       	movw	r22, r14
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	6f d4       	rcall	.+2270   	; 0x4280 <fputc>
    39a2:	80 e3       	ldi	r24, 0x30	; 48
    39a4:	2a e0       	ldi	r18, 0x0A	; 10
    39a6:	c2 16       	cp	r12, r18
    39a8:	d1 04       	cpc	r13, r1
    39aa:	2c f0       	brlt	.+10     	; 0x39b6 <vfprintf+0x3de>
    39ac:	8f 5f       	subi	r24, 0xFF	; 255
    39ae:	fa e0       	ldi	r31, 0x0A	; 10
    39b0:	cf 1a       	sub	r12, r31
    39b2:	d1 08       	sbc	r13, r1
    39b4:	f7 cf       	rjmp	.-18     	; 0x39a4 <vfprintf+0x3cc>
    39b6:	b7 01       	movw	r22, r14
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	62 d4       	rcall	.+2244   	; 0x4280 <fputc>
    39bc:	b7 01       	movw	r22, r14
    39be:	c6 01       	movw	r24, r12
    39c0:	c0 96       	adiw	r24, 0x30	; 48
    39c2:	5e d4       	rcall	.+2236   	; 0x4280 <fputc>
    39c4:	49 c1       	rjmp	.+658    	; 0x3c58 <vfprintf+0x680>
    39c6:	83 36       	cpi	r24, 0x63	; 99
    39c8:	31 f0       	breq	.+12     	; 0x39d6 <vfprintf+0x3fe>
    39ca:	83 37       	cpi	r24, 0x73	; 115
    39cc:	79 f0       	breq	.+30     	; 0x39ec <vfprintf+0x414>
    39ce:	83 35       	cpi	r24, 0x53	; 83
    39d0:	09 f0       	breq	.+2      	; 0x39d4 <vfprintf+0x3fc>
    39d2:	52 c0       	rjmp	.+164    	; 0x3a78 <vfprintf+0x4a0>
    39d4:	1f c0       	rjmp	.+62     	; 0x3a14 <vfprintf+0x43c>
    39d6:	56 01       	movw	r10, r12
    39d8:	32 e0       	ldi	r19, 0x02	; 2
    39da:	a3 0e       	add	r10, r19
    39dc:	b1 1c       	adc	r11, r1
    39de:	f6 01       	movw	r30, r12
    39e0:	80 81       	ld	r24, Z
    39e2:	89 83       	std	Y+1, r24	; 0x01
    39e4:	01 e0       	ldi	r16, 0x01	; 1
    39e6:	10 e0       	ldi	r17, 0x00	; 0
    39e8:	63 01       	movw	r12, r6
    39ea:	11 c0       	rjmp	.+34     	; 0x3a0e <vfprintf+0x436>
    39ec:	56 01       	movw	r10, r12
    39ee:	f2 e0       	ldi	r31, 0x02	; 2
    39f0:	af 0e       	add	r10, r31
    39f2:	b1 1c       	adc	r11, r1
    39f4:	f6 01       	movw	r30, r12
    39f6:	c0 80       	ld	r12, Z
    39f8:	d1 80       	ldd	r13, Z+1	; 0x01
    39fa:	96 fe       	sbrs	r9, 6
    39fc:	03 c0       	rjmp	.+6      	; 0x3a04 <vfprintf+0x42c>
    39fe:	61 2f       	mov	r22, r17
    3a00:	70 e0       	ldi	r23, 0x00	; 0
    3a02:	02 c0       	rjmp	.+4      	; 0x3a08 <vfprintf+0x430>
    3a04:	6f ef       	ldi	r22, 0xFF	; 255
    3a06:	7f ef       	ldi	r23, 0xFF	; 255
    3a08:	c6 01       	movw	r24, r12
    3a0a:	27 d4       	rcall	.+2126   	; 0x425a <strnlen>
    3a0c:	8c 01       	movw	r16, r24
    3a0e:	f9 2d       	mov	r31, r9
    3a10:	ff 77       	andi	r31, 0x7F	; 127
    3a12:	13 c0       	rjmp	.+38     	; 0x3a3a <vfprintf+0x462>
    3a14:	56 01       	movw	r10, r12
    3a16:	22 e0       	ldi	r18, 0x02	; 2
    3a18:	a2 0e       	add	r10, r18
    3a1a:	b1 1c       	adc	r11, r1
    3a1c:	f6 01       	movw	r30, r12
    3a1e:	c0 80       	ld	r12, Z
    3a20:	d1 80       	ldd	r13, Z+1	; 0x01
    3a22:	96 fe       	sbrs	r9, 6
    3a24:	03 c0       	rjmp	.+6      	; 0x3a2c <vfprintf+0x454>
    3a26:	61 2f       	mov	r22, r17
    3a28:	70 e0       	ldi	r23, 0x00	; 0
    3a2a:	02 c0       	rjmp	.+4      	; 0x3a30 <vfprintf+0x458>
    3a2c:	6f ef       	ldi	r22, 0xFF	; 255
    3a2e:	7f ef       	ldi	r23, 0xFF	; 255
    3a30:	c6 01       	movw	r24, r12
    3a32:	f0 d3       	rcall	.+2016   	; 0x4214 <strnlen_P>
    3a34:	8c 01       	movw	r16, r24
    3a36:	f9 2d       	mov	r31, r9
    3a38:	f0 68       	ori	r31, 0x80	; 128
    3a3a:	9f 2e       	mov	r9, r31
    3a3c:	f3 fd       	sbrc	r31, 3
    3a3e:	18 c0       	rjmp	.+48     	; 0x3a70 <vfprintf+0x498>
    3a40:	85 2d       	mov	r24, r5
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	08 17       	cp	r16, r24
    3a46:	19 07       	cpc	r17, r25
    3a48:	98 f4       	brcc	.+38     	; 0x3a70 <vfprintf+0x498>
    3a4a:	b7 01       	movw	r22, r14
    3a4c:	80 e2       	ldi	r24, 0x20	; 32
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	17 d4       	rcall	.+2094   	; 0x4280 <fputc>
    3a52:	5a 94       	dec	r5
    3a54:	f5 cf       	rjmp	.-22     	; 0x3a40 <vfprintf+0x468>
    3a56:	f6 01       	movw	r30, r12
    3a58:	97 fc       	sbrc	r9, 7
    3a5a:	85 91       	lpm	r24, Z+
    3a5c:	97 fe       	sbrs	r9, 7
    3a5e:	81 91       	ld	r24, Z+
    3a60:	6f 01       	movw	r12, r30
    3a62:	b7 01       	movw	r22, r14
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	0c d4       	rcall	.+2072   	; 0x4280 <fputc>
    3a68:	51 10       	cpse	r5, r1
    3a6a:	5a 94       	dec	r5
    3a6c:	01 50       	subi	r16, 0x01	; 1
    3a6e:	11 09       	sbc	r17, r1
    3a70:	01 15       	cp	r16, r1
    3a72:	11 05       	cpc	r17, r1
    3a74:	81 f7       	brne	.-32     	; 0x3a56 <vfprintf+0x47e>
    3a76:	f0 c0       	rjmp	.+480    	; 0x3c58 <vfprintf+0x680>
    3a78:	84 36       	cpi	r24, 0x64	; 100
    3a7a:	11 f0       	breq	.+4      	; 0x3a80 <vfprintf+0x4a8>
    3a7c:	89 36       	cpi	r24, 0x69	; 105
    3a7e:	59 f5       	brne	.+86     	; 0x3ad6 <vfprintf+0x4fe>
    3a80:	56 01       	movw	r10, r12
    3a82:	97 fe       	sbrs	r9, 7
    3a84:	09 c0       	rjmp	.+18     	; 0x3a98 <vfprintf+0x4c0>
    3a86:	24 e0       	ldi	r18, 0x04	; 4
    3a88:	a2 0e       	add	r10, r18
    3a8a:	b1 1c       	adc	r11, r1
    3a8c:	f6 01       	movw	r30, r12
    3a8e:	60 81       	ld	r22, Z
    3a90:	71 81       	ldd	r23, Z+1	; 0x01
    3a92:	82 81       	ldd	r24, Z+2	; 0x02
    3a94:	93 81       	ldd	r25, Z+3	; 0x03
    3a96:	0a c0       	rjmp	.+20     	; 0x3aac <vfprintf+0x4d4>
    3a98:	f2 e0       	ldi	r31, 0x02	; 2
    3a9a:	af 0e       	add	r10, r31
    3a9c:	b1 1c       	adc	r11, r1
    3a9e:	f6 01       	movw	r30, r12
    3aa0:	60 81       	ld	r22, Z
    3aa2:	71 81       	ldd	r23, Z+1	; 0x01
    3aa4:	07 2e       	mov	r0, r23
    3aa6:	00 0c       	add	r0, r0
    3aa8:	88 0b       	sbc	r24, r24
    3aaa:	99 0b       	sbc	r25, r25
    3aac:	f9 2d       	mov	r31, r9
    3aae:	ff 76       	andi	r31, 0x6F	; 111
    3ab0:	9f 2e       	mov	r9, r31
    3ab2:	97 ff       	sbrs	r25, 7
    3ab4:	09 c0       	rjmp	.+18     	; 0x3ac8 <vfprintf+0x4f0>
    3ab6:	90 95       	com	r25
    3ab8:	80 95       	com	r24
    3aba:	70 95       	com	r23
    3abc:	61 95       	neg	r22
    3abe:	7f 4f       	sbci	r23, 0xFF	; 255
    3ac0:	8f 4f       	sbci	r24, 0xFF	; 255
    3ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ac4:	f0 68       	ori	r31, 0x80	; 128
    3ac6:	9f 2e       	mov	r9, r31
    3ac8:	2a e0       	ldi	r18, 0x0A	; 10
    3aca:	30 e0       	ldi	r19, 0x00	; 0
    3acc:	a3 01       	movw	r20, r6
    3ace:	f2 d4       	rcall	.+2532   	; 0x44b4 <__ultoa_invert>
    3ad0:	c8 2e       	mov	r12, r24
    3ad2:	c6 18       	sub	r12, r6
    3ad4:	3e c0       	rjmp	.+124    	; 0x3b52 <vfprintf+0x57a>
    3ad6:	09 2d       	mov	r16, r9
    3ad8:	85 37       	cpi	r24, 0x75	; 117
    3ada:	21 f4       	brne	.+8      	; 0x3ae4 <vfprintf+0x50c>
    3adc:	0f 7e       	andi	r16, 0xEF	; 239
    3ade:	2a e0       	ldi	r18, 0x0A	; 10
    3ae0:	30 e0       	ldi	r19, 0x00	; 0
    3ae2:	1d c0       	rjmp	.+58     	; 0x3b1e <vfprintf+0x546>
    3ae4:	09 7f       	andi	r16, 0xF9	; 249
    3ae6:	8f 36       	cpi	r24, 0x6F	; 111
    3ae8:	91 f0       	breq	.+36     	; 0x3b0e <vfprintf+0x536>
    3aea:	18 f4       	brcc	.+6      	; 0x3af2 <vfprintf+0x51a>
    3aec:	88 35       	cpi	r24, 0x58	; 88
    3aee:	59 f0       	breq	.+22     	; 0x3b06 <vfprintf+0x52e>
    3af0:	bc c0       	rjmp	.+376    	; 0x3c6a <vfprintf+0x692>
    3af2:	80 37       	cpi	r24, 0x70	; 112
    3af4:	19 f0       	breq	.+6      	; 0x3afc <vfprintf+0x524>
    3af6:	88 37       	cpi	r24, 0x78	; 120
    3af8:	11 f0       	breq	.+4      	; 0x3afe <vfprintf+0x526>
    3afa:	b7 c0       	rjmp	.+366    	; 0x3c6a <vfprintf+0x692>
    3afc:	00 61       	ori	r16, 0x10	; 16
    3afe:	04 ff       	sbrs	r16, 4
    3b00:	09 c0       	rjmp	.+18     	; 0x3b14 <vfprintf+0x53c>
    3b02:	04 60       	ori	r16, 0x04	; 4
    3b04:	07 c0       	rjmp	.+14     	; 0x3b14 <vfprintf+0x53c>
    3b06:	94 fe       	sbrs	r9, 4
    3b08:	08 c0       	rjmp	.+16     	; 0x3b1a <vfprintf+0x542>
    3b0a:	06 60       	ori	r16, 0x06	; 6
    3b0c:	06 c0       	rjmp	.+12     	; 0x3b1a <vfprintf+0x542>
    3b0e:	28 e0       	ldi	r18, 0x08	; 8
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	05 c0       	rjmp	.+10     	; 0x3b1e <vfprintf+0x546>
    3b14:	20 e1       	ldi	r18, 0x10	; 16
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	02 c0       	rjmp	.+4      	; 0x3b1e <vfprintf+0x546>
    3b1a:	20 e1       	ldi	r18, 0x10	; 16
    3b1c:	32 e0       	ldi	r19, 0x02	; 2
    3b1e:	56 01       	movw	r10, r12
    3b20:	07 ff       	sbrs	r16, 7
    3b22:	09 c0       	rjmp	.+18     	; 0x3b36 <vfprintf+0x55e>
    3b24:	84 e0       	ldi	r24, 0x04	; 4
    3b26:	a8 0e       	add	r10, r24
    3b28:	b1 1c       	adc	r11, r1
    3b2a:	f6 01       	movw	r30, r12
    3b2c:	60 81       	ld	r22, Z
    3b2e:	71 81       	ldd	r23, Z+1	; 0x01
    3b30:	82 81       	ldd	r24, Z+2	; 0x02
    3b32:	93 81       	ldd	r25, Z+3	; 0x03
    3b34:	08 c0       	rjmp	.+16     	; 0x3b46 <vfprintf+0x56e>
    3b36:	f2 e0       	ldi	r31, 0x02	; 2
    3b38:	af 0e       	add	r10, r31
    3b3a:	b1 1c       	adc	r11, r1
    3b3c:	f6 01       	movw	r30, r12
    3b3e:	60 81       	ld	r22, Z
    3b40:	71 81       	ldd	r23, Z+1	; 0x01
    3b42:	80 e0       	ldi	r24, 0x00	; 0
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	a3 01       	movw	r20, r6
    3b48:	b5 d4       	rcall	.+2410   	; 0x44b4 <__ultoa_invert>
    3b4a:	c8 2e       	mov	r12, r24
    3b4c:	c6 18       	sub	r12, r6
    3b4e:	0f 77       	andi	r16, 0x7F	; 127
    3b50:	90 2e       	mov	r9, r16
    3b52:	96 fe       	sbrs	r9, 6
    3b54:	0b c0       	rjmp	.+22     	; 0x3b6c <vfprintf+0x594>
    3b56:	09 2d       	mov	r16, r9
    3b58:	0e 7f       	andi	r16, 0xFE	; 254
    3b5a:	c1 16       	cp	r12, r17
    3b5c:	50 f4       	brcc	.+20     	; 0x3b72 <vfprintf+0x59a>
    3b5e:	94 fe       	sbrs	r9, 4
    3b60:	0a c0       	rjmp	.+20     	; 0x3b76 <vfprintf+0x59e>
    3b62:	92 fc       	sbrc	r9, 2
    3b64:	08 c0       	rjmp	.+16     	; 0x3b76 <vfprintf+0x59e>
    3b66:	09 2d       	mov	r16, r9
    3b68:	0e 7e       	andi	r16, 0xEE	; 238
    3b6a:	05 c0       	rjmp	.+10     	; 0x3b76 <vfprintf+0x59e>
    3b6c:	dc 2c       	mov	r13, r12
    3b6e:	09 2d       	mov	r16, r9
    3b70:	03 c0       	rjmp	.+6      	; 0x3b78 <vfprintf+0x5a0>
    3b72:	dc 2c       	mov	r13, r12
    3b74:	01 c0       	rjmp	.+2      	; 0x3b78 <vfprintf+0x5a0>
    3b76:	d1 2e       	mov	r13, r17
    3b78:	04 ff       	sbrs	r16, 4
    3b7a:	0d c0       	rjmp	.+26     	; 0x3b96 <vfprintf+0x5be>
    3b7c:	fe 01       	movw	r30, r28
    3b7e:	ec 0d       	add	r30, r12
    3b80:	f1 1d       	adc	r31, r1
    3b82:	80 81       	ld	r24, Z
    3b84:	80 33       	cpi	r24, 0x30	; 48
    3b86:	11 f4       	brne	.+4      	; 0x3b8c <vfprintf+0x5b4>
    3b88:	09 7e       	andi	r16, 0xE9	; 233
    3b8a:	09 c0       	rjmp	.+18     	; 0x3b9e <vfprintf+0x5c6>
    3b8c:	02 ff       	sbrs	r16, 2
    3b8e:	06 c0       	rjmp	.+12     	; 0x3b9c <vfprintf+0x5c4>
    3b90:	d3 94       	inc	r13
    3b92:	d3 94       	inc	r13
    3b94:	04 c0       	rjmp	.+8      	; 0x3b9e <vfprintf+0x5c6>
    3b96:	80 2f       	mov	r24, r16
    3b98:	86 78       	andi	r24, 0x86	; 134
    3b9a:	09 f0       	breq	.+2      	; 0x3b9e <vfprintf+0x5c6>
    3b9c:	d3 94       	inc	r13
    3b9e:	03 fd       	sbrc	r16, 3
    3ba0:	10 c0       	rjmp	.+32     	; 0x3bc2 <vfprintf+0x5ea>
    3ba2:	00 ff       	sbrs	r16, 0
    3ba4:	06 c0       	rjmp	.+12     	; 0x3bb2 <vfprintf+0x5da>
    3ba6:	1c 2d       	mov	r17, r12
    3ba8:	d5 14       	cp	r13, r5
    3baa:	78 f4       	brcc	.+30     	; 0x3bca <vfprintf+0x5f2>
    3bac:	15 0d       	add	r17, r5
    3bae:	1d 19       	sub	r17, r13
    3bb0:	0c c0       	rjmp	.+24     	; 0x3bca <vfprintf+0x5f2>
    3bb2:	d5 14       	cp	r13, r5
    3bb4:	50 f4       	brcc	.+20     	; 0x3bca <vfprintf+0x5f2>
    3bb6:	b7 01       	movw	r22, r14
    3bb8:	80 e2       	ldi	r24, 0x20	; 32
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	61 d3       	rcall	.+1730   	; 0x4280 <fputc>
    3bbe:	d3 94       	inc	r13
    3bc0:	f8 cf       	rjmp	.-16     	; 0x3bb2 <vfprintf+0x5da>
    3bc2:	d5 14       	cp	r13, r5
    3bc4:	10 f4       	brcc	.+4      	; 0x3bca <vfprintf+0x5f2>
    3bc6:	5d 18       	sub	r5, r13
    3bc8:	01 c0       	rjmp	.+2      	; 0x3bcc <vfprintf+0x5f4>
    3bca:	51 2c       	mov	r5, r1
    3bcc:	04 ff       	sbrs	r16, 4
    3bce:	0f c0       	rjmp	.+30     	; 0x3bee <vfprintf+0x616>
    3bd0:	b7 01       	movw	r22, r14
    3bd2:	80 e3       	ldi	r24, 0x30	; 48
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	54 d3       	rcall	.+1704   	; 0x4280 <fputc>
    3bd8:	02 ff       	sbrs	r16, 2
    3bda:	16 c0       	rjmp	.+44     	; 0x3c08 <vfprintf+0x630>
    3bdc:	01 fd       	sbrc	r16, 1
    3bde:	03 c0       	rjmp	.+6      	; 0x3be6 <vfprintf+0x60e>
    3be0:	88 e7       	ldi	r24, 0x78	; 120
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	02 c0       	rjmp	.+4      	; 0x3bea <vfprintf+0x612>
    3be6:	88 e5       	ldi	r24, 0x58	; 88
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	b7 01       	movw	r22, r14
    3bec:	0c c0       	rjmp	.+24     	; 0x3c06 <vfprintf+0x62e>
    3bee:	80 2f       	mov	r24, r16
    3bf0:	86 78       	andi	r24, 0x86	; 134
    3bf2:	51 f0       	breq	.+20     	; 0x3c08 <vfprintf+0x630>
    3bf4:	01 ff       	sbrs	r16, 1
    3bf6:	02 c0       	rjmp	.+4      	; 0x3bfc <vfprintf+0x624>
    3bf8:	8b e2       	ldi	r24, 0x2B	; 43
    3bfa:	01 c0       	rjmp	.+2      	; 0x3bfe <vfprintf+0x626>
    3bfc:	80 e2       	ldi	r24, 0x20	; 32
    3bfe:	07 fd       	sbrc	r16, 7
    3c00:	8d e2       	ldi	r24, 0x2D	; 45
    3c02:	b7 01       	movw	r22, r14
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	3c d3       	rcall	.+1656   	; 0x4280 <fputc>
    3c08:	c1 16       	cp	r12, r17
    3c0a:	30 f4       	brcc	.+12     	; 0x3c18 <vfprintf+0x640>
    3c0c:	b7 01       	movw	r22, r14
    3c0e:	80 e3       	ldi	r24, 0x30	; 48
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	36 d3       	rcall	.+1644   	; 0x4280 <fputc>
    3c14:	11 50       	subi	r17, 0x01	; 1
    3c16:	f8 cf       	rjmp	.-16     	; 0x3c08 <vfprintf+0x630>
    3c18:	ca 94       	dec	r12
    3c1a:	f3 01       	movw	r30, r6
    3c1c:	ec 0d       	add	r30, r12
    3c1e:	f1 1d       	adc	r31, r1
    3c20:	80 81       	ld	r24, Z
    3c22:	b7 01       	movw	r22, r14
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	2c d3       	rcall	.+1624   	; 0x4280 <fputc>
    3c28:	c1 10       	cpse	r12, r1
    3c2a:	f6 cf       	rjmp	.-20     	; 0x3c18 <vfprintf+0x640>
    3c2c:	15 c0       	rjmp	.+42     	; 0x3c58 <vfprintf+0x680>
    3c2e:	f4 e0       	ldi	r31, 0x04	; 4
    3c30:	f5 15       	cp	r31, r5
    3c32:	50 f5       	brcc	.+84     	; 0x3c88 <vfprintf+0x6b0>
    3c34:	84 e0       	ldi	r24, 0x04	; 4
    3c36:	58 1a       	sub	r5, r24
    3c38:	93 fe       	sbrs	r9, 3
    3c3a:	1e c0       	rjmp	.+60     	; 0x3c78 <vfprintf+0x6a0>
    3c3c:	01 11       	cpse	r16, r1
    3c3e:	25 c0       	rjmp	.+74     	; 0x3c8a <vfprintf+0x6b2>
    3c40:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c42:	23 ff       	sbrs	r18, 3
    3c44:	27 c0       	rjmp	.+78     	; 0x3c94 <vfprintf+0x6bc>
    3c46:	04 e0       	ldi	r16, 0x04	; 4
    3c48:	11 e0       	ldi	r17, 0x01	; 1
    3c4a:	39 2d       	mov	r19, r9
    3c4c:	30 71       	andi	r19, 0x10	; 16
    3c4e:	93 2e       	mov	r9, r19
    3c50:	f8 01       	movw	r30, r16
    3c52:	84 91       	lpm	r24, Z
    3c54:	81 11       	cpse	r24, r1
    3c56:	21 c0       	rjmp	.+66     	; 0x3c9a <vfprintf+0x6c2>
    3c58:	55 20       	and	r5, r5
    3c5a:	09 f4       	brne	.+2      	; 0x3c5e <vfprintf+0x686>
    3c5c:	fc cc       	rjmp	.-1544   	; 0x3656 <vfprintf+0x7e>
    3c5e:	b7 01       	movw	r22, r14
    3c60:	80 e2       	ldi	r24, 0x20	; 32
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	0d d3       	rcall	.+1562   	; 0x4280 <fputc>
    3c66:	5a 94       	dec	r5
    3c68:	f7 cf       	rjmp	.-18     	; 0x3c58 <vfprintf+0x680>
    3c6a:	f7 01       	movw	r30, r14
    3c6c:	86 81       	ldd	r24, Z+6	; 0x06
    3c6e:	97 81       	ldd	r25, Z+7	; 0x07
    3c70:	23 c0       	rjmp	.+70     	; 0x3cb8 <vfprintf+0x6e0>
    3c72:	8f ef       	ldi	r24, 0xFF	; 255
    3c74:	9f ef       	ldi	r25, 0xFF	; 255
    3c76:	20 c0       	rjmp	.+64     	; 0x3cb8 <vfprintf+0x6e0>
    3c78:	b7 01       	movw	r22, r14
    3c7a:	80 e2       	ldi	r24, 0x20	; 32
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	00 d3       	rcall	.+1536   	; 0x4280 <fputc>
    3c80:	5a 94       	dec	r5
    3c82:	51 10       	cpse	r5, r1
    3c84:	f9 cf       	rjmp	.-14     	; 0x3c78 <vfprintf+0x6a0>
    3c86:	da cf       	rjmp	.-76     	; 0x3c3c <vfprintf+0x664>
    3c88:	51 2c       	mov	r5, r1
    3c8a:	b7 01       	movw	r22, r14
    3c8c:	80 2f       	mov	r24, r16
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	f7 d2       	rcall	.+1518   	; 0x4280 <fputc>
    3c92:	d6 cf       	rjmp	.-84     	; 0x3c40 <vfprintf+0x668>
    3c94:	08 e0       	ldi	r16, 0x08	; 8
    3c96:	11 e0       	ldi	r17, 0x01	; 1
    3c98:	d8 cf       	rjmp	.-80     	; 0x3c4a <vfprintf+0x672>
    3c9a:	91 10       	cpse	r9, r1
    3c9c:	80 52       	subi	r24, 0x20	; 32
    3c9e:	b7 01       	movw	r22, r14
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	ee d2       	rcall	.+1500   	; 0x4280 <fputc>
    3ca4:	0f 5f       	subi	r16, 0xFF	; 255
    3ca6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ca8:	d3 cf       	rjmp	.-90     	; 0x3c50 <vfprintf+0x678>
    3caa:	23 e0       	ldi	r18, 0x03	; 3
    3cac:	25 15       	cp	r18, r5
    3cae:	10 f4       	brcc	.+4      	; 0x3cb4 <vfprintf+0x6dc>
    3cb0:	83 e0       	ldi	r24, 0x03	; 3
    3cb2:	c1 cf       	rjmp	.-126    	; 0x3c36 <vfprintf+0x65e>
    3cb4:	51 2c       	mov	r5, r1
    3cb6:	c4 cf       	rjmp	.-120    	; 0x3c40 <vfprintf+0x668>
    3cb8:	60 96       	adiw	r28, 0x10	; 16
    3cba:	0f b6       	in	r0, 0x3f	; 63
    3cbc:	f8 94       	cli
    3cbe:	de bf       	out	0x3e, r29	; 62
    3cc0:	0f be       	out	0x3f, r0	; 63
    3cc2:	cd bf       	out	0x3d, r28	; 61
    3cc4:	df 91       	pop	r29
    3cc6:	cf 91       	pop	r28
    3cc8:	1f 91       	pop	r17
    3cca:	0f 91       	pop	r16
    3ccc:	ff 90       	pop	r15
    3cce:	ef 90       	pop	r14
    3cd0:	df 90       	pop	r13
    3cd2:	cf 90       	pop	r12
    3cd4:	bf 90       	pop	r11
    3cd6:	af 90       	pop	r10
    3cd8:	9f 90       	pop	r9
    3cda:	8f 90       	pop	r8
    3cdc:	7f 90       	pop	r7
    3cde:	6f 90       	pop	r6
    3ce0:	5f 90       	pop	r5
    3ce2:	4f 90       	pop	r4
    3ce4:	3f 90       	pop	r3
    3ce6:	2f 90       	pop	r2
    3ce8:	08 95       	ret

00003cea <__divmodhi4>:
    3cea:	97 fb       	bst	r25, 7
    3cec:	07 2e       	mov	r0, r23
    3cee:	16 f4       	brtc	.+4      	; 0x3cf4 <__divmodhi4+0xa>
    3cf0:	00 94       	com	r0
    3cf2:	06 d0       	rcall	.+12     	; 0x3d00 <__divmodhi4_neg1>
    3cf4:	77 fd       	sbrc	r23, 7
    3cf6:	08 d0       	rcall	.+16     	; 0x3d08 <__divmodhi4_neg2>
    3cf8:	44 d0       	rcall	.+136    	; 0x3d82 <__udivmodhi4>
    3cfa:	07 fc       	sbrc	r0, 7
    3cfc:	05 d0       	rcall	.+10     	; 0x3d08 <__divmodhi4_neg2>
    3cfe:	3e f4       	brtc	.+14     	; 0x3d0e <__divmodhi4_exit>

00003d00 <__divmodhi4_neg1>:
    3d00:	90 95       	com	r25
    3d02:	81 95       	neg	r24
    3d04:	9f 4f       	sbci	r25, 0xFF	; 255
    3d06:	08 95       	ret

00003d08 <__divmodhi4_neg2>:
    3d08:	70 95       	com	r23
    3d0a:	61 95       	neg	r22
    3d0c:	7f 4f       	sbci	r23, 0xFF	; 255

00003d0e <__divmodhi4_exit>:
    3d0e:	08 95       	ret

00003d10 <__udivmodsi4>:
    3d10:	a1 e2       	ldi	r26, 0x21	; 33
    3d12:	1a 2e       	mov	r1, r26
    3d14:	aa 1b       	sub	r26, r26
    3d16:	bb 1b       	sub	r27, r27
    3d18:	fd 01       	movw	r30, r26
    3d1a:	0d c0       	rjmp	.+26     	; 0x3d36 <__udivmodsi4_ep>

00003d1c <__udivmodsi4_loop>:
    3d1c:	aa 1f       	adc	r26, r26
    3d1e:	bb 1f       	adc	r27, r27
    3d20:	ee 1f       	adc	r30, r30
    3d22:	ff 1f       	adc	r31, r31
    3d24:	a2 17       	cp	r26, r18
    3d26:	b3 07       	cpc	r27, r19
    3d28:	e4 07       	cpc	r30, r20
    3d2a:	f5 07       	cpc	r31, r21
    3d2c:	20 f0       	brcs	.+8      	; 0x3d36 <__udivmodsi4_ep>
    3d2e:	a2 1b       	sub	r26, r18
    3d30:	b3 0b       	sbc	r27, r19
    3d32:	e4 0b       	sbc	r30, r20
    3d34:	f5 0b       	sbc	r31, r21

00003d36 <__udivmodsi4_ep>:
    3d36:	66 1f       	adc	r22, r22
    3d38:	77 1f       	adc	r23, r23
    3d3a:	88 1f       	adc	r24, r24
    3d3c:	99 1f       	adc	r25, r25
    3d3e:	1a 94       	dec	r1
    3d40:	69 f7       	brne	.-38     	; 0x3d1c <__udivmodsi4_loop>
    3d42:	60 95       	com	r22
    3d44:	70 95       	com	r23
    3d46:	80 95       	com	r24
    3d48:	90 95       	com	r25
    3d4a:	9b 01       	movw	r18, r22
    3d4c:	ac 01       	movw	r20, r24
    3d4e:	bd 01       	movw	r22, r26
    3d50:	cf 01       	movw	r24, r30
    3d52:	08 95       	ret

00003d54 <__tablejump2__>:
    3d54:	ee 0f       	add	r30, r30
    3d56:	ff 1f       	adc	r31, r31
    3d58:	88 1f       	adc	r24, r24
    3d5a:	8b bf       	out	0x3b, r24	; 59
    3d5c:	07 90       	elpm	r0, Z+
    3d5e:	f6 91       	elpm	r31, Z
    3d60:	e0 2d       	mov	r30, r0
    3d62:	19 94       	eijmp

00003d64 <__umulhisi3>:
    3d64:	a2 9f       	mul	r26, r18
    3d66:	b0 01       	movw	r22, r0
    3d68:	b3 9f       	mul	r27, r19
    3d6a:	c0 01       	movw	r24, r0
    3d6c:	a3 9f       	mul	r26, r19
    3d6e:	70 0d       	add	r23, r0
    3d70:	81 1d       	adc	r24, r1
    3d72:	11 24       	eor	r1, r1
    3d74:	91 1d       	adc	r25, r1
    3d76:	b2 9f       	mul	r27, r18
    3d78:	70 0d       	add	r23, r0
    3d7a:	81 1d       	adc	r24, r1
    3d7c:	11 24       	eor	r1, r1
    3d7e:	91 1d       	adc	r25, r1
    3d80:	08 95       	ret

00003d82 <__udivmodhi4>:
    3d82:	aa 1b       	sub	r26, r26
    3d84:	bb 1b       	sub	r27, r27
    3d86:	51 e1       	ldi	r21, 0x11	; 17
    3d88:	07 c0       	rjmp	.+14     	; 0x3d98 <__udivmodhi4_ep>

00003d8a <__udivmodhi4_loop>:
    3d8a:	aa 1f       	adc	r26, r26
    3d8c:	bb 1f       	adc	r27, r27
    3d8e:	a6 17       	cp	r26, r22
    3d90:	b7 07       	cpc	r27, r23
    3d92:	10 f0       	brcs	.+4      	; 0x3d98 <__udivmodhi4_ep>
    3d94:	a6 1b       	sub	r26, r22
    3d96:	b7 0b       	sbc	r27, r23

00003d98 <__udivmodhi4_ep>:
    3d98:	88 1f       	adc	r24, r24
    3d9a:	99 1f       	adc	r25, r25
    3d9c:	5a 95       	dec	r21
    3d9e:	a9 f7       	brne	.-22     	; 0x3d8a <__udivmodhi4_loop>
    3da0:	80 95       	com	r24
    3da2:	90 95       	com	r25
    3da4:	bc 01       	movw	r22, r24
    3da6:	cd 01       	movw	r24, r26
    3da8:	08 95       	ret

00003daa <dtostrf>:
    3daa:	ef 92       	push	r14
    3dac:	0f 93       	push	r16
    3dae:	1f 93       	push	r17
    3db0:	cf 93       	push	r28
    3db2:	df 93       	push	r29
    3db4:	e8 01       	movw	r28, r16
    3db6:	47 fd       	sbrc	r20, 7
    3db8:	02 c0       	rjmp	.+4      	; 0x3dbe <dtostrf+0x14>
    3dba:	34 e0       	ldi	r19, 0x04	; 4
    3dbc:	01 c0       	rjmp	.+2      	; 0x3dc0 <dtostrf+0x16>
    3dbe:	34 e1       	ldi	r19, 0x14	; 20
    3dc0:	04 2e       	mov	r0, r20
    3dc2:	00 0c       	add	r0, r0
    3dc4:	55 0b       	sbc	r21, r21
    3dc6:	57 ff       	sbrs	r21, 7
    3dc8:	03 c0       	rjmp	.+6      	; 0x3dd0 <dtostrf+0x26>
    3dca:	51 95       	neg	r21
    3dcc:	41 95       	neg	r20
    3dce:	51 09       	sbc	r21, r1
    3dd0:	e3 2e       	mov	r14, r19
    3dd2:	02 2f       	mov	r16, r18
    3dd4:	24 2f       	mov	r18, r20
    3dd6:	ae 01       	movw	r20, r28
    3dd8:	cb d3       	rcall	.+1942   	; 0x4570 <dtoa_prf>
    3dda:	ce 01       	movw	r24, r28
    3ddc:	df 91       	pop	r29
    3dde:	cf 91       	pop	r28
    3de0:	1f 91       	pop	r17
    3de2:	0f 91       	pop	r16
    3de4:	ef 90       	pop	r14
    3de6:	08 95       	ret

00003de8 <malloc>:
    3de8:	0f 93       	push	r16
    3dea:	1f 93       	push	r17
    3dec:	cf 93       	push	r28
    3dee:	df 93       	push	r29
    3df0:	82 30       	cpi	r24, 0x02	; 2
    3df2:	91 05       	cpc	r25, r1
    3df4:	10 f4       	brcc	.+4      	; 0x3dfa <malloc+0x12>
    3df6:	82 e0       	ldi	r24, 0x02	; 2
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	e0 91 6d 16 	lds	r30, 0x166D	; 0x80166d <__flp>
    3dfe:	f0 91 6e 16 	lds	r31, 0x166E	; 0x80166e <__flp+0x1>
    3e02:	20 e0       	ldi	r18, 0x00	; 0
    3e04:	30 e0       	ldi	r19, 0x00	; 0
    3e06:	a0 e0       	ldi	r26, 0x00	; 0
    3e08:	b0 e0       	ldi	r27, 0x00	; 0
    3e0a:	30 97       	sbiw	r30, 0x00	; 0
    3e0c:	19 f1       	breq	.+70     	; 0x3e54 <malloc+0x6c>
    3e0e:	40 81       	ld	r20, Z
    3e10:	51 81       	ldd	r21, Z+1	; 0x01
    3e12:	02 81       	ldd	r16, Z+2	; 0x02
    3e14:	13 81       	ldd	r17, Z+3	; 0x03
    3e16:	48 17       	cp	r20, r24
    3e18:	59 07       	cpc	r21, r25
    3e1a:	c8 f0       	brcs	.+50     	; 0x3e4e <malloc+0x66>
    3e1c:	84 17       	cp	r24, r20
    3e1e:	95 07       	cpc	r25, r21
    3e20:	69 f4       	brne	.+26     	; 0x3e3c <malloc+0x54>
    3e22:	10 97       	sbiw	r26, 0x00	; 0
    3e24:	31 f0       	breq	.+12     	; 0x3e32 <malloc+0x4a>
    3e26:	12 96       	adiw	r26, 0x02	; 2
    3e28:	0c 93       	st	X, r16
    3e2a:	12 97       	sbiw	r26, 0x02	; 2
    3e2c:	13 96       	adiw	r26, 0x03	; 3
    3e2e:	1c 93       	st	X, r17
    3e30:	27 c0       	rjmp	.+78     	; 0x3e80 <malloc+0x98>
    3e32:	00 93 6d 16 	sts	0x166D, r16	; 0x80166d <__flp>
    3e36:	10 93 6e 16 	sts	0x166E, r17	; 0x80166e <__flp+0x1>
    3e3a:	22 c0       	rjmp	.+68     	; 0x3e80 <malloc+0x98>
    3e3c:	21 15       	cp	r18, r1
    3e3e:	31 05       	cpc	r19, r1
    3e40:	19 f0       	breq	.+6      	; 0x3e48 <malloc+0x60>
    3e42:	42 17       	cp	r20, r18
    3e44:	53 07       	cpc	r21, r19
    3e46:	18 f4       	brcc	.+6      	; 0x3e4e <malloc+0x66>
    3e48:	9a 01       	movw	r18, r20
    3e4a:	bd 01       	movw	r22, r26
    3e4c:	ef 01       	movw	r28, r30
    3e4e:	df 01       	movw	r26, r30
    3e50:	f8 01       	movw	r30, r16
    3e52:	db cf       	rjmp	.-74     	; 0x3e0a <malloc+0x22>
    3e54:	21 15       	cp	r18, r1
    3e56:	31 05       	cpc	r19, r1
    3e58:	f9 f0       	breq	.+62     	; 0x3e98 <malloc+0xb0>
    3e5a:	28 1b       	sub	r18, r24
    3e5c:	39 0b       	sbc	r19, r25
    3e5e:	24 30       	cpi	r18, 0x04	; 4
    3e60:	31 05       	cpc	r19, r1
    3e62:	80 f4       	brcc	.+32     	; 0x3e84 <malloc+0x9c>
    3e64:	8a 81       	ldd	r24, Y+2	; 0x02
    3e66:	9b 81       	ldd	r25, Y+3	; 0x03
    3e68:	61 15       	cp	r22, r1
    3e6a:	71 05       	cpc	r23, r1
    3e6c:	21 f0       	breq	.+8      	; 0x3e76 <malloc+0x8e>
    3e6e:	fb 01       	movw	r30, r22
    3e70:	93 83       	std	Z+3, r25	; 0x03
    3e72:	82 83       	std	Z+2, r24	; 0x02
    3e74:	04 c0       	rjmp	.+8      	; 0x3e7e <malloc+0x96>
    3e76:	90 93 6e 16 	sts	0x166E, r25	; 0x80166e <__flp+0x1>
    3e7a:	80 93 6d 16 	sts	0x166D, r24	; 0x80166d <__flp>
    3e7e:	fe 01       	movw	r30, r28
    3e80:	32 96       	adiw	r30, 0x02	; 2
    3e82:	44 c0       	rjmp	.+136    	; 0x3f0c <malloc+0x124>
    3e84:	fe 01       	movw	r30, r28
    3e86:	e2 0f       	add	r30, r18
    3e88:	f3 1f       	adc	r31, r19
    3e8a:	81 93       	st	Z+, r24
    3e8c:	91 93       	st	Z+, r25
    3e8e:	22 50       	subi	r18, 0x02	; 2
    3e90:	31 09       	sbc	r19, r1
    3e92:	39 83       	std	Y+1, r19	; 0x01
    3e94:	28 83       	st	Y, r18
    3e96:	3a c0       	rjmp	.+116    	; 0x3f0c <malloc+0x124>
    3e98:	20 91 6b 16 	lds	r18, 0x166B	; 0x80166b <__brkval>
    3e9c:	30 91 6c 16 	lds	r19, 0x166C	; 0x80166c <__brkval+0x1>
    3ea0:	23 2b       	or	r18, r19
    3ea2:	41 f4       	brne	.+16     	; 0x3eb4 <malloc+0xcc>
    3ea4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3ea8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3eac:	30 93 6c 16 	sts	0x166C, r19	; 0x80166c <__brkval+0x1>
    3eb0:	20 93 6b 16 	sts	0x166B, r18	; 0x80166b <__brkval>
    3eb4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    3eb8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    3ebc:	21 15       	cp	r18, r1
    3ebe:	31 05       	cpc	r19, r1
    3ec0:	41 f4       	brne	.+16     	; 0x3ed2 <malloc+0xea>
    3ec2:	2d b7       	in	r18, 0x3d	; 61
    3ec4:	3e b7       	in	r19, 0x3e	; 62
    3ec6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3eca:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3ece:	24 1b       	sub	r18, r20
    3ed0:	35 0b       	sbc	r19, r21
    3ed2:	e0 91 6b 16 	lds	r30, 0x166B	; 0x80166b <__brkval>
    3ed6:	f0 91 6c 16 	lds	r31, 0x166C	; 0x80166c <__brkval+0x1>
    3eda:	e2 17       	cp	r30, r18
    3edc:	f3 07       	cpc	r31, r19
    3ede:	a0 f4       	brcc	.+40     	; 0x3f08 <malloc+0x120>
    3ee0:	2e 1b       	sub	r18, r30
    3ee2:	3f 0b       	sbc	r19, r31
    3ee4:	28 17       	cp	r18, r24
    3ee6:	39 07       	cpc	r19, r25
    3ee8:	78 f0       	brcs	.+30     	; 0x3f08 <malloc+0x120>
    3eea:	ac 01       	movw	r20, r24
    3eec:	4e 5f       	subi	r20, 0xFE	; 254
    3eee:	5f 4f       	sbci	r21, 0xFF	; 255
    3ef0:	24 17       	cp	r18, r20
    3ef2:	35 07       	cpc	r19, r21
    3ef4:	48 f0       	brcs	.+18     	; 0x3f08 <malloc+0x120>
    3ef6:	4e 0f       	add	r20, r30
    3ef8:	5f 1f       	adc	r21, r31
    3efa:	50 93 6c 16 	sts	0x166C, r21	; 0x80166c <__brkval+0x1>
    3efe:	40 93 6b 16 	sts	0x166B, r20	; 0x80166b <__brkval>
    3f02:	81 93       	st	Z+, r24
    3f04:	91 93       	st	Z+, r25
    3f06:	02 c0       	rjmp	.+4      	; 0x3f0c <malloc+0x124>
    3f08:	e0 e0       	ldi	r30, 0x00	; 0
    3f0a:	f0 e0       	ldi	r31, 0x00	; 0
    3f0c:	cf 01       	movw	r24, r30
    3f0e:	df 91       	pop	r29
    3f10:	cf 91       	pop	r28
    3f12:	1f 91       	pop	r17
    3f14:	0f 91       	pop	r16
    3f16:	08 95       	ret

00003f18 <free>:
    3f18:	cf 93       	push	r28
    3f1a:	df 93       	push	r29
    3f1c:	00 97       	sbiw	r24, 0x00	; 0
    3f1e:	09 f4       	brne	.+2      	; 0x3f22 <free+0xa>
    3f20:	81 c0       	rjmp	.+258    	; 0x4024 <free+0x10c>
    3f22:	fc 01       	movw	r30, r24
    3f24:	32 97       	sbiw	r30, 0x02	; 2
    3f26:	13 82       	std	Z+3, r1	; 0x03
    3f28:	12 82       	std	Z+2, r1	; 0x02
    3f2a:	a0 91 6d 16 	lds	r26, 0x166D	; 0x80166d <__flp>
    3f2e:	b0 91 6e 16 	lds	r27, 0x166E	; 0x80166e <__flp+0x1>
    3f32:	10 97       	sbiw	r26, 0x00	; 0
    3f34:	81 f4       	brne	.+32     	; 0x3f56 <free+0x3e>
    3f36:	20 81       	ld	r18, Z
    3f38:	31 81       	ldd	r19, Z+1	; 0x01
    3f3a:	82 0f       	add	r24, r18
    3f3c:	93 1f       	adc	r25, r19
    3f3e:	20 91 6b 16 	lds	r18, 0x166B	; 0x80166b <__brkval>
    3f42:	30 91 6c 16 	lds	r19, 0x166C	; 0x80166c <__brkval+0x1>
    3f46:	28 17       	cp	r18, r24
    3f48:	39 07       	cpc	r19, r25
    3f4a:	51 f5       	brne	.+84     	; 0x3fa0 <free+0x88>
    3f4c:	f0 93 6c 16 	sts	0x166C, r31	; 0x80166c <__brkval+0x1>
    3f50:	e0 93 6b 16 	sts	0x166B, r30	; 0x80166b <__brkval>
    3f54:	67 c0       	rjmp	.+206    	; 0x4024 <free+0x10c>
    3f56:	ed 01       	movw	r28, r26
    3f58:	20 e0       	ldi	r18, 0x00	; 0
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	ce 17       	cp	r28, r30
    3f5e:	df 07       	cpc	r29, r31
    3f60:	40 f4       	brcc	.+16     	; 0x3f72 <free+0x5a>
    3f62:	4a 81       	ldd	r20, Y+2	; 0x02
    3f64:	5b 81       	ldd	r21, Y+3	; 0x03
    3f66:	9e 01       	movw	r18, r28
    3f68:	41 15       	cp	r20, r1
    3f6a:	51 05       	cpc	r21, r1
    3f6c:	f1 f0       	breq	.+60     	; 0x3faa <free+0x92>
    3f6e:	ea 01       	movw	r28, r20
    3f70:	f5 cf       	rjmp	.-22     	; 0x3f5c <free+0x44>
    3f72:	d3 83       	std	Z+3, r29	; 0x03
    3f74:	c2 83       	std	Z+2, r28	; 0x02
    3f76:	40 81       	ld	r20, Z
    3f78:	51 81       	ldd	r21, Z+1	; 0x01
    3f7a:	84 0f       	add	r24, r20
    3f7c:	95 1f       	adc	r25, r21
    3f7e:	c8 17       	cp	r28, r24
    3f80:	d9 07       	cpc	r29, r25
    3f82:	59 f4       	brne	.+22     	; 0x3f9a <free+0x82>
    3f84:	88 81       	ld	r24, Y
    3f86:	99 81       	ldd	r25, Y+1	; 0x01
    3f88:	84 0f       	add	r24, r20
    3f8a:	95 1f       	adc	r25, r21
    3f8c:	02 96       	adiw	r24, 0x02	; 2
    3f8e:	91 83       	std	Z+1, r25	; 0x01
    3f90:	80 83       	st	Z, r24
    3f92:	8a 81       	ldd	r24, Y+2	; 0x02
    3f94:	9b 81       	ldd	r25, Y+3	; 0x03
    3f96:	93 83       	std	Z+3, r25	; 0x03
    3f98:	82 83       	std	Z+2, r24	; 0x02
    3f9a:	21 15       	cp	r18, r1
    3f9c:	31 05       	cpc	r19, r1
    3f9e:	29 f4       	brne	.+10     	; 0x3faa <free+0x92>
    3fa0:	f0 93 6e 16 	sts	0x166E, r31	; 0x80166e <__flp+0x1>
    3fa4:	e0 93 6d 16 	sts	0x166D, r30	; 0x80166d <__flp>
    3fa8:	3d c0       	rjmp	.+122    	; 0x4024 <free+0x10c>
    3faa:	e9 01       	movw	r28, r18
    3fac:	fb 83       	std	Y+3, r31	; 0x03
    3fae:	ea 83       	std	Y+2, r30	; 0x02
    3fb0:	49 91       	ld	r20, Y+
    3fb2:	59 91       	ld	r21, Y+
    3fb4:	c4 0f       	add	r28, r20
    3fb6:	d5 1f       	adc	r29, r21
    3fb8:	ec 17       	cp	r30, r28
    3fba:	fd 07       	cpc	r31, r29
    3fbc:	61 f4       	brne	.+24     	; 0x3fd6 <free+0xbe>
    3fbe:	80 81       	ld	r24, Z
    3fc0:	91 81       	ldd	r25, Z+1	; 0x01
    3fc2:	84 0f       	add	r24, r20
    3fc4:	95 1f       	adc	r25, r21
    3fc6:	02 96       	adiw	r24, 0x02	; 2
    3fc8:	e9 01       	movw	r28, r18
    3fca:	99 83       	std	Y+1, r25	; 0x01
    3fcc:	88 83       	st	Y, r24
    3fce:	82 81       	ldd	r24, Z+2	; 0x02
    3fd0:	93 81       	ldd	r25, Z+3	; 0x03
    3fd2:	9b 83       	std	Y+3, r25	; 0x03
    3fd4:	8a 83       	std	Y+2, r24	; 0x02
    3fd6:	e0 e0       	ldi	r30, 0x00	; 0
    3fd8:	f0 e0       	ldi	r31, 0x00	; 0
    3fda:	12 96       	adiw	r26, 0x02	; 2
    3fdc:	8d 91       	ld	r24, X+
    3fde:	9c 91       	ld	r25, X
    3fe0:	13 97       	sbiw	r26, 0x03	; 3
    3fe2:	00 97       	sbiw	r24, 0x00	; 0
    3fe4:	19 f0       	breq	.+6      	; 0x3fec <free+0xd4>
    3fe6:	fd 01       	movw	r30, r26
    3fe8:	dc 01       	movw	r26, r24
    3fea:	f7 cf       	rjmp	.-18     	; 0x3fda <free+0xc2>
    3fec:	8d 91       	ld	r24, X+
    3fee:	9c 91       	ld	r25, X
    3ff0:	11 97       	sbiw	r26, 0x01	; 1
    3ff2:	9d 01       	movw	r18, r26
    3ff4:	2e 5f       	subi	r18, 0xFE	; 254
    3ff6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ff8:	82 0f       	add	r24, r18
    3ffa:	93 1f       	adc	r25, r19
    3ffc:	20 91 6b 16 	lds	r18, 0x166B	; 0x80166b <__brkval>
    4000:	30 91 6c 16 	lds	r19, 0x166C	; 0x80166c <__brkval+0x1>
    4004:	28 17       	cp	r18, r24
    4006:	39 07       	cpc	r19, r25
    4008:	69 f4       	brne	.+26     	; 0x4024 <free+0x10c>
    400a:	30 97       	sbiw	r30, 0x00	; 0
    400c:	29 f4       	brne	.+10     	; 0x4018 <free+0x100>
    400e:	10 92 6e 16 	sts	0x166E, r1	; 0x80166e <__flp+0x1>
    4012:	10 92 6d 16 	sts	0x166D, r1	; 0x80166d <__flp>
    4016:	02 c0       	rjmp	.+4      	; 0x401c <free+0x104>
    4018:	13 82       	std	Z+3, r1	; 0x03
    401a:	12 82       	std	Z+2, r1	; 0x02
    401c:	b0 93 6c 16 	sts	0x166C, r27	; 0x80166c <__brkval+0x1>
    4020:	a0 93 6b 16 	sts	0x166B, r26	; 0x80166b <__brkval>
    4024:	df 91       	pop	r29
    4026:	cf 91       	pop	r28
    4028:	08 95       	ret

0000402a <atoi>:
    402a:	fc 01       	movw	r30, r24
    402c:	88 27       	eor	r24, r24
    402e:	99 27       	eor	r25, r25
    4030:	e8 94       	clt
    4032:	21 91       	ld	r18, Z+
    4034:	20 32       	cpi	r18, 0x20	; 32
    4036:	e9 f3       	breq	.-6      	; 0x4032 <atoi+0x8>
    4038:	29 30       	cpi	r18, 0x09	; 9
    403a:	10 f0       	brcs	.+4      	; 0x4040 <atoi+0x16>
    403c:	2e 30       	cpi	r18, 0x0E	; 14
    403e:	c8 f3       	brcs	.-14     	; 0x4032 <atoi+0x8>
    4040:	2b 32       	cpi	r18, 0x2B	; 43
    4042:	39 f0       	breq	.+14     	; 0x4052 <atoi+0x28>
    4044:	2d 32       	cpi	r18, 0x2D	; 45
    4046:	31 f4       	brne	.+12     	; 0x4054 <atoi+0x2a>
    4048:	68 94       	set
    404a:	03 c0       	rjmp	.+6      	; 0x4052 <atoi+0x28>
    404c:	11 d1       	rcall	.+546    	; 0x4270 <__mulhi_const_10>
    404e:	82 0f       	add	r24, r18
    4050:	91 1d       	adc	r25, r1
    4052:	21 91       	ld	r18, Z+
    4054:	20 53       	subi	r18, 0x30	; 48
    4056:	2a 30       	cpi	r18, 0x0A	; 10
    4058:	c8 f3       	brcs	.-14     	; 0x404c <atoi+0x22>
    405a:	1e f4       	brtc	.+6      	; 0x4062 <atoi+0x38>
    405c:	90 95       	com	r25
    405e:	81 95       	neg	r24
    4060:	9f 4f       	sbci	r25, 0xFF	; 255
    4062:	08 95       	ret

00004064 <__ftoa_engine>:
    4064:	28 30       	cpi	r18, 0x08	; 8
    4066:	08 f0       	brcs	.+2      	; 0x406a <__ftoa_engine+0x6>
    4068:	27 e0       	ldi	r18, 0x07	; 7
    406a:	33 27       	eor	r19, r19
    406c:	da 01       	movw	r26, r20
    406e:	99 0f       	add	r25, r25
    4070:	31 1d       	adc	r19, r1
    4072:	87 fd       	sbrc	r24, 7
    4074:	91 60       	ori	r25, 0x01	; 1
    4076:	00 96       	adiw	r24, 0x00	; 0
    4078:	61 05       	cpc	r22, r1
    407a:	71 05       	cpc	r23, r1
    407c:	39 f4       	brne	.+14     	; 0x408c <__ftoa_engine+0x28>
    407e:	32 60       	ori	r19, 0x02	; 2
    4080:	2e 5f       	subi	r18, 0xFE	; 254
    4082:	3d 93       	st	X+, r19
    4084:	30 e3       	ldi	r19, 0x30	; 48
    4086:	2a 95       	dec	r18
    4088:	e1 f7       	brne	.-8      	; 0x4082 <__ftoa_engine+0x1e>
    408a:	08 95       	ret
    408c:	9f 3f       	cpi	r25, 0xFF	; 255
    408e:	30 f0       	brcs	.+12     	; 0x409c <__ftoa_engine+0x38>
    4090:	80 38       	cpi	r24, 0x80	; 128
    4092:	71 05       	cpc	r23, r1
    4094:	61 05       	cpc	r22, r1
    4096:	09 f0       	breq	.+2      	; 0x409a <__ftoa_engine+0x36>
    4098:	3c 5f       	subi	r19, 0xFC	; 252
    409a:	3c 5f       	subi	r19, 0xFC	; 252
    409c:	3d 93       	st	X+, r19
    409e:	91 30       	cpi	r25, 0x01	; 1
    40a0:	08 f0       	brcs	.+2      	; 0x40a4 <__ftoa_engine+0x40>
    40a2:	80 68       	ori	r24, 0x80	; 128
    40a4:	91 1d       	adc	r25, r1
    40a6:	df 93       	push	r29
    40a8:	cf 93       	push	r28
    40aa:	1f 93       	push	r17
    40ac:	0f 93       	push	r16
    40ae:	ff 92       	push	r15
    40b0:	ef 92       	push	r14
    40b2:	19 2f       	mov	r17, r25
    40b4:	98 7f       	andi	r25, 0xF8	; 248
    40b6:	96 95       	lsr	r25
    40b8:	e9 2f       	mov	r30, r25
    40ba:	96 95       	lsr	r25
    40bc:	96 95       	lsr	r25
    40be:	e9 0f       	add	r30, r25
    40c0:	ff 27       	eor	r31, r31
    40c2:	ea 59       	subi	r30, 0x9A	; 154
    40c4:	fe 4f       	sbci	r31, 0xFE	; 254
    40c6:	99 27       	eor	r25, r25
    40c8:	33 27       	eor	r19, r19
    40ca:	ee 24       	eor	r14, r14
    40cc:	ff 24       	eor	r15, r15
    40ce:	a7 01       	movw	r20, r14
    40d0:	e7 01       	movw	r28, r14
    40d2:	05 90       	lpm	r0, Z+
    40d4:	08 94       	sec
    40d6:	07 94       	ror	r0
    40d8:	28 f4       	brcc	.+10     	; 0x40e4 <__ftoa_engine+0x80>
    40da:	36 0f       	add	r19, r22
    40dc:	e7 1e       	adc	r14, r23
    40de:	f8 1e       	adc	r15, r24
    40e0:	49 1f       	adc	r20, r25
    40e2:	51 1d       	adc	r21, r1
    40e4:	66 0f       	add	r22, r22
    40e6:	77 1f       	adc	r23, r23
    40e8:	88 1f       	adc	r24, r24
    40ea:	99 1f       	adc	r25, r25
    40ec:	06 94       	lsr	r0
    40ee:	a1 f7       	brne	.-24     	; 0x40d8 <__ftoa_engine+0x74>
    40f0:	05 90       	lpm	r0, Z+
    40f2:	07 94       	ror	r0
    40f4:	28 f4       	brcc	.+10     	; 0x4100 <__ftoa_engine+0x9c>
    40f6:	e7 0e       	add	r14, r23
    40f8:	f8 1e       	adc	r15, r24
    40fa:	49 1f       	adc	r20, r25
    40fc:	56 1f       	adc	r21, r22
    40fe:	c1 1d       	adc	r28, r1
    4100:	77 0f       	add	r23, r23
    4102:	88 1f       	adc	r24, r24
    4104:	99 1f       	adc	r25, r25
    4106:	66 1f       	adc	r22, r22
    4108:	06 94       	lsr	r0
    410a:	a1 f7       	brne	.-24     	; 0x40f4 <__ftoa_engine+0x90>
    410c:	05 90       	lpm	r0, Z+
    410e:	07 94       	ror	r0
    4110:	28 f4       	brcc	.+10     	; 0x411c <__ftoa_engine+0xb8>
    4112:	f8 0e       	add	r15, r24
    4114:	49 1f       	adc	r20, r25
    4116:	56 1f       	adc	r21, r22
    4118:	c7 1f       	adc	r28, r23
    411a:	d1 1d       	adc	r29, r1
    411c:	88 0f       	add	r24, r24
    411e:	99 1f       	adc	r25, r25
    4120:	66 1f       	adc	r22, r22
    4122:	77 1f       	adc	r23, r23
    4124:	06 94       	lsr	r0
    4126:	a1 f7       	brne	.-24     	; 0x4110 <__ftoa_engine+0xac>
    4128:	05 90       	lpm	r0, Z+
    412a:	07 94       	ror	r0
    412c:	20 f4       	brcc	.+8      	; 0x4136 <__ftoa_engine+0xd2>
    412e:	49 0f       	add	r20, r25
    4130:	56 1f       	adc	r21, r22
    4132:	c7 1f       	adc	r28, r23
    4134:	d8 1f       	adc	r29, r24
    4136:	99 0f       	add	r25, r25
    4138:	66 1f       	adc	r22, r22
    413a:	77 1f       	adc	r23, r23
    413c:	88 1f       	adc	r24, r24
    413e:	06 94       	lsr	r0
    4140:	a9 f7       	brne	.-22     	; 0x412c <__ftoa_engine+0xc8>
    4142:	84 91       	lpm	r24, Z
    4144:	10 95       	com	r17
    4146:	17 70       	andi	r17, 0x07	; 7
    4148:	41 f0       	breq	.+16     	; 0x415a <__ftoa_engine+0xf6>
    414a:	d6 95       	lsr	r29
    414c:	c7 95       	ror	r28
    414e:	57 95       	ror	r21
    4150:	47 95       	ror	r20
    4152:	f7 94       	ror	r15
    4154:	e7 94       	ror	r14
    4156:	1a 95       	dec	r17
    4158:	c1 f7       	brne	.-16     	; 0x414a <__ftoa_engine+0xe6>
    415a:	ec e0       	ldi	r30, 0x0C	; 12
    415c:	f1 e0       	ldi	r31, 0x01	; 1
    415e:	68 94       	set
    4160:	15 90       	lpm	r1, Z+
    4162:	15 91       	lpm	r17, Z+
    4164:	35 91       	lpm	r19, Z+
    4166:	65 91       	lpm	r22, Z+
    4168:	95 91       	lpm	r25, Z+
    416a:	05 90       	lpm	r0, Z+
    416c:	7f e2       	ldi	r23, 0x2F	; 47
    416e:	73 95       	inc	r23
    4170:	e1 18       	sub	r14, r1
    4172:	f1 0a       	sbc	r15, r17
    4174:	43 0b       	sbc	r20, r19
    4176:	56 0b       	sbc	r21, r22
    4178:	c9 0b       	sbc	r28, r25
    417a:	d0 09       	sbc	r29, r0
    417c:	c0 f7       	brcc	.-16     	; 0x416e <__ftoa_engine+0x10a>
    417e:	e1 0c       	add	r14, r1
    4180:	f1 1e       	adc	r15, r17
    4182:	43 1f       	adc	r20, r19
    4184:	56 1f       	adc	r21, r22
    4186:	c9 1f       	adc	r28, r25
    4188:	d0 1d       	adc	r29, r0
    418a:	7e f4       	brtc	.+30     	; 0x41aa <__ftoa_engine+0x146>
    418c:	70 33       	cpi	r23, 0x30	; 48
    418e:	11 f4       	brne	.+4      	; 0x4194 <__ftoa_engine+0x130>
    4190:	8a 95       	dec	r24
    4192:	e6 cf       	rjmp	.-52     	; 0x4160 <__ftoa_engine+0xfc>
    4194:	e8 94       	clt
    4196:	01 50       	subi	r16, 0x01	; 1
    4198:	30 f0       	brcs	.+12     	; 0x41a6 <__ftoa_engine+0x142>
    419a:	08 0f       	add	r16, r24
    419c:	0a f4       	brpl	.+2      	; 0x41a0 <__ftoa_engine+0x13c>
    419e:	00 27       	eor	r16, r16
    41a0:	02 17       	cp	r16, r18
    41a2:	08 f4       	brcc	.+2      	; 0x41a6 <__ftoa_engine+0x142>
    41a4:	20 2f       	mov	r18, r16
    41a6:	23 95       	inc	r18
    41a8:	02 2f       	mov	r16, r18
    41aa:	7a 33       	cpi	r23, 0x3A	; 58
    41ac:	28 f0       	brcs	.+10     	; 0x41b8 <__ftoa_engine+0x154>
    41ae:	79 e3       	ldi	r23, 0x39	; 57
    41b0:	7d 93       	st	X+, r23
    41b2:	2a 95       	dec	r18
    41b4:	e9 f7       	brne	.-6      	; 0x41b0 <__ftoa_engine+0x14c>
    41b6:	10 c0       	rjmp	.+32     	; 0x41d8 <__ftoa_engine+0x174>
    41b8:	7d 93       	st	X+, r23
    41ba:	2a 95       	dec	r18
    41bc:	89 f6       	brne	.-94     	; 0x4160 <__ftoa_engine+0xfc>
    41be:	06 94       	lsr	r0
    41c0:	97 95       	ror	r25
    41c2:	67 95       	ror	r22
    41c4:	37 95       	ror	r19
    41c6:	17 95       	ror	r17
    41c8:	17 94       	ror	r1
    41ca:	e1 18       	sub	r14, r1
    41cc:	f1 0a       	sbc	r15, r17
    41ce:	43 0b       	sbc	r20, r19
    41d0:	56 0b       	sbc	r21, r22
    41d2:	c9 0b       	sbc	r28, r25
    41d4:	d0 09       	sbc	r29, r0
    41d6:	98 f0       	brcs	.+38     	; 0x41fe <__ftoa_engine+0x19a>
    41d8:	23 95       	inc	r18
    41da:	7e 91       	ld	r23, -X
    41dc:	73 95       	inc	r23
    41de:	7a 33       	cpi	r23, 0x3A	; 58
    41e0:	08 f0       	brcs	.+2      	; 0x41e4 <__ftoa_engine+0x180>
    41e2:	70 e3       	ldi	r23, 0x30	; 48
    41e4:	7c 93       	st	X, r23
    41e6:	20 13       	cpse	r18, r16
    41e8:	b8 f7       	brcc	.-18     	; 0x41d8 <__ftoa_engine+0x174>
    41ea:	7e 91       	ld	r23, -X
    41ec:	70 61       	ori	r23, 0x10	; 16
    41ee:	7d 93       	st	X+, r23
    41f0:	30 f0       	brcs	.+12     	; 0x41fe <__ftoa_engine+0x19a>
    41f2:	83 95       	inc	r24
    41f4:	71 e3       	ldi	r23, 0x31	; 49
    41f6:	7d 93       	st	X+, r23
    41f8:	70 e3       	ldi	r23, 0x30	; 48
    41fa:	2a 95       	dec	r18
    41fc:	e1 f7       	brne	.-8      	; 0x41f6 <__ftoa_engine+0x192>
    41fe:	11 24       	eor	r1, r1
    4200:	ef 90       	pop	r14
    4202:	ff 90       	pop	r15
    4204:	0f 91       	pop	r16
    4206:	1f 91       	pop	r17
    4208:	cf 91       	pop	r28
    420a:	df 91       	pop	r29
    420c:	99 27       	eor	r25, r25
    420e:	87 fd       	sbrc	r24, 7
    4210:	90 95       	com	r25
    4212:	08 95       	ret

00004214 <strnlen_P>:
    4214:	fc 01       	movw	r30, r24
    4216:	05 90       	lpm	r0, Z+
    4218:	61 50       	subi	r22, 0x01	; 1
    421a:	70 40       	sbci	r23, 0x00	; 0
    421c:	01 10       	cpse	r0, r1
    421e:	d8 f7       	brcc	.-10     	; 0x4216 <strnlen_P+0x2>
    4220:	80 95       	com	r24
    4222:	90 95       	com	r25
    4224:	8e 0f       	add	r24, r30
    4226:	9f 1f       	adc	r25, r31
    4228:	08 95       	ret

0000422a <strcmp>:
    422a:	fb 01       	movw	r30, r22
    422c:	dc 01       	movw	r26, r24
    422e:	8d 91       	ld	r24, X+
    4230:	01 90       	ld	r0, Z+
    4232:	80 19       	sub	r24, r0
    4234:	01 10       	cpse	r0, r1
    4236:	d9 f3       	breq	.-10     	; 0x422e <strcmp+0x4>
    4238:	99 0b       	sbc	r25, r25
    423a:	08 95       	ret

0000423c <strncpy>:
    423c:	fb 01       	movw	r30, r22
    423e:	dc 01       	movw	r26, r24
    4240:	41 50       	subi	r20, 0x01	; 1
    4242:	50 40       	sbci	r21, 0x00	; 0
    4244:	48 f0       	brcs	.+18     	; 0x4258 <strncpy+0x1c>
    4246:	01 90       	ld	r0, Z+
    4248:	0d 92       	st	X+, r0
    424a:	00 20       	and	r0, r0
    424c:	c9 f7       	brne	.-14     	; 0x4240 <strncpy+0x4>
    424e:	01 c0       	rjmp	.+2      	; 0x4252 <strncpy+0x16>
    4250:	1d 92       	st	X+, r1
    4252:	41 50       	subi	r20, 0x01	; 1
    4254:	50 40       	sbci	r21, 0x00	; 0
    4256:	e0 f7       	brcc	.-8      	; 0x4250 <strncpy+0x14>
    4258:	08 95       	ret

0000425a <strnlen>:
    425a:	fc 01       	movw	r30, r24
    425c:	61 50       	subi	r22, 0x01	; 1
    425e:	70 40       	sbci	r23, 0x00	; 0
    4260:	01 90       	ld	r0, Z+
    4262:	01 10       	cpse	r0, r1
    4264:	d8 f7       	brcc	.-10     	; 0x425c <strnlen+0x2>
    4266:	80 95       	com	r24
    4268:	90 95       	com	r25
    426a:	8e 0f       	add	r24, r30
    426c:	9f 1f       	adc	r25, r31
    426e:	08 95       	ret

00004270 <__mulhi_const_10>:
    4270:	7a e0       	ldi	r23, 0x0A	; 10
    4272:	97 9f       	mul	r25, r23
    4274:	90 2d       	mov	r25, r0
    4276:	87 9f       	mul	r24, r23
    4278:	80 2d       	mov	r24, r0
    427a:	91 0d       	add	r25, r1
    427c:	11 24       	eor	r1, r1
    427e:	08 95       	ret

00004280 <fputc>:
    4280:	0f 93       	push	r16
    4282:	1f 93       	push	r17
    4284:	cf 93       	push	r28
    4286:	df 93       	push	r29
    4288:	fb 01       	movw	r30, r22
    428a:	23 81       	ldd	r18, Z+3	; 0x03
    428c:	21 fd       	sbrc	r18, 1
    428e:	03 c0       	rjmp	.+6      	; 0x4296 <fputc+0x16>
    4290:	8f ef       	ldi	r24, 0xFF	; 255
    4292:	9f ef       	ldi	r25, 0xFF	; 255
    4294:	2c c0       	rjmp	.+88     	; 0x42ee <fputc+0x6e>
    4296:	22 ff       	sbrs	r18, 2
    4298:	16 c0       	rjmp	.+44     	; 0x42c6 <fputc+0x46>
    429a:	46 81       	ldd	r20, Z+6	; 0x06
    429c:	57 81       	ldd	r21, Z+7	; 0x07
    429e:	24 81       	ldd	r18, Z+4	; 0x04
    42a0:	35 81       	ldd	r19, Z+5	; 0x05
    42a2:	42 17       	cp	r20, r18
    42a4:	53 07       	cpc	r21, r19
    42a6:	44 f4       	brge	.+16     	; 0x42b8 <fputc+0x38>
    42a8:	a0 81       	ld	r26, Z
    42aa:	b1 81       	ldd	r27, Z+1	; 0x01
    42ac:	9d 01       	movw	r18, r26
    42ae:	2f 5f       	subi	r18, 0xFF	; 255
    42b0:	3f 4f       	sbci	r19, 0xFF	; 255
    42b2:	31 83       	std	Z+1, r19	; 0x01
    42b4:	20 83       	st	Z, r18
    42b6:	8c 93       	st	X, r24
    42b8:	26 81       	ldd	r18, Z+6	; 0x06
    42ba:	37 81       	ldd	r19, Z+7	; 0x07
    42bc:	2f 5f       	subi	r18, 0xFF	; 255
    42be:	3f 4f       	sbci	r19, 0xFF	; 255
    42c0:	37 83       	std	Z+7, r19	; 0x07
    42c2:	26 83       	std	Z+6, r18	; 0x06
    42c4:	14 c0       	rjmp	.+40     	; 0x42ee <fputc+0x6e>
    42c6:	8b 01       	movw	r16, r22
    42c8:	ec 01       	movw	r28, r24
    42ca:	fb 01       	movw	r30, r22
    42cc:	00 84       	ldd	r0, Z+8	; 0x08
    42ce:	f1 85       	ldd	r31, Z+9	; 0x09
    42d0:	e0 2d       	mov	r30, r0
    42d2:	19 95       	eicall
    42d4:	89 2b       	or	r24, r25
    42d6:	e1 f6       	brne	.-72     	; 0x4290 <fputc+0x10>
    42d8:	d8 01       	movw	r26, r16
    42da:	16 96       	adiw	r26, 0x06	; 6
    42dc:	8d 91       	ld	r24, X+
    42de:	9c 91       	ld	r25, X
    42e0:	17 97       	sbiw	r26, 0x07	; 7
    42e2:	01 96       	adiw	r24, 0x01	; 1
    42e4:	17 96       	adiw	r26, 0x07	; 7
    42e6:	9c 93       	st	X, r25
    42e8:	8e 93       	st	-X, r24
    42ea:	16 97       	sbiw	r26, 0x06	; 6
    42ec:	ce 01       	movw	r24, r28
    42ee:	df 91       	pop	r29
    42f0:	cf 91       	pop	r28
    42f2:	1f 91       	pop	r17
    42f4:	0f 91       	pop	r16
    42f6:	08 95       	ret

000042f8 <printf>:
    42f8:	cf 93       	push	r28
    42fa:	df 93       	push	r29
    42fc:	cd b7       	in	r28, 0x3d	; 61
    42fe:	de b7       	in	r29, 0x3e	; 62
    4300:	ae 01       	movw	r20, r28
    4302:	4a 5f       	subi	r20, 0xFA	; 250
    4304:	5f 4f       	sbci	r21, 0xFF	; 255
    4306:	fa 01       	movw	r30, r20
    4308:	61 91       	ld	r22, Z+
    430a:	71 91       	ld	r23, Z+
    430c:	af 01       	movw	r20, r30
    430e:	80 91 71 16 	lds	r24, 0x1671	; 0x801671 <__iob+0x2>
    4312:	90 91 72 16 	lds	r25, 0x1672	; 0x801672 <__iob+0x3>
    4316:	60 d9       	rcall	.-3392   	; 0x35d8 <vfprintf>
    4318:	df 91       	pop	r29
    431a:	cf 91       	pop	r28
    431c:	08 95       	ret

0000431e <puts>:
    431e:	0f 93       	push	r16
    4320:	1f 93       	push	r17
    4322:	cf 93       	push	r28
    4324:	df 93       	push	r29
    4326:	e0 91 71 16 	lds	r30, 0x1671	; 0x801671 <__iob+0x2>
    432a:	f0 91 72 16 	lds	r31, 0x1672	; 0x801672 <__iob+0x3>
    432e:	23 81       	ldd	r18, Z+3	; 0x03
    4330:	21 ff       	sbrs	r18, 1
    4332:	1b c0       	rjmp	.+54     	; 0x436a <puts+0x4c>
    4334:	8c 01       	movw	r16, r24
    4336:	d0 e0       	ldi	r29, 0x00	; 0
    4338:	c0 e0       	ldi	r28, 0x00	; 0
    433a:	f8 01       	movw	r30, r16
    433c:	81 91       	ld	r24, Z+
    433e:	8f 01       	movw	r16, r30
    4340:	60 91 71 16 	lds	r22, 0x1671	; 0x801671 <__iob+0x2>
    4344:	70 91 72 16 	lds	r23, 0x1672	; 0x801672 <__iob+0x3>
    4348:	db 01       	movw	r26, r22
    434a:	18 96       	adiw	r26, 0x08	; 8
    434c:	ed 91       	ld	r30, X+
    434e:	fc 91       	ld	r31, X
    4350:	19 97       	sbiw	r26, 0x09	; 9
    4352:	88 23       	and	r24, r24
    4354:	31 f0       	breq	.+12     	; 0x4362 <puts+0x44>
    4356:	19 95       	eicall
    4358:	89 2b       	or	r24, r25
    435a:	79 f3       	breq	.-34     	; 0x433a <puts+0x1c>
    435c:	df ef       	ldi	r29, 0xFF	; 255
    435e:	cf ef       	ldi	r28, 0xFF	; 255
    4360:	ec cf       	rjmp	.-40     	; 0x433a <puts+0x1c>
    4362:	8a e0       	ldi	r24, 0x0A	; 10
    4364:	19 95       	eicall
    4366:	89 2b       	or	r24, r25
    4368:	19 f0       	breq	.+6      	; 0x4370 <puts+0x52>
    436a:	8f ef       	ldi	r24, 0xFF	; 255
    436c:	9f ef       	ldi	r25, 0xFF	; 255
    436e:	02 c0       	rjmp	.+4      	; 0x4374 <puts+0x56>
    4370:	8d 2f       	mov	r24, r29
    4372:	9c 2f       	mov	r25, r28
    4374:	df 91       	pop	r29
    4376:	cf 91       	pop	r28
    4378:	1f 91       	pop	r17
    437a:	0f 91       	pop	r16
    437c:	08 95       	ret

0000437e <puts_P>:
    437e:	0f 93       	push	r16
    4380:	1f 93       	push	r17
    4382:	cf 93       	push	r28
    4384:	df 93       	push	r29
    4386:	8c 01       	movw	r16, r24
    4388:	e0 91 71 16 	lds	r30, 0x1671	; 0x801671 <__iob+0x2>
    438c:	f0 91 72 16 	lds	r31, 0x1672	; 0x801672 <__iob+0x3>
    4390:	83 81       	ldd	r24, Z+3	; 0x03
    4392:	81 ff       	sbrs	r24, 1
    4394:	1b c0       	rjmp	.+54     	; 0x43cc <puts_P+0x4e>
    4396:	d0 e0       	ldi	r29, 0x00	; 0
    4398:	c0 e0       	ldi	r28, 0x00	; 0
    439a:	f8 01       	movw	r30, r16
    439c:	84 91       	lpm	r24, Z
    439e:	60 91 71 16 	lds	r22, 0x1671	; 0x801671 <__iob+0x2>
    43a2:	70 91 72 16 	lds	r23, 0x1672	; 0x801672 <__iob+0x3>
    43a6:	db 01       	movw	r26, r22
    43a8:	18 96       	adiw	r26, 0x08	; 8
    43aa:	ed 91       	ld	r30, X+
    43ac:	fc 91       	ld	r31, X
    43ae:	19 97       	sbiw	r26, 0x09	; 9
    43b0:	88 23       	and	r24, r24
    43b2:	41 f0       	breq	.+16     	; 0x43c4 <puts_P+0x46>
    43b4:	19 95       	eicall
    43b6:	89 2b       	or	r24, r25
    43b8:	11 f0       	breq	.+4      	; 0x43be <puts_P+0x40>
    43ba:	df ef       	ldi	r29, 0xFF	; 255
    43bc:	cf ef       	ldi	r28, 0xFF	; 255
    43be:	0f 5f       	subi	r16, 0xFF	; 255
    43c0:	1f 4f       	sbci	r17, 0xFF	; 255
    43c2:	eb cf       	rjmp	.-42     	; 0x439a <puts_P+0x1c>
    43c4:	8a e0       	ldi	r24, 0x0A	; 10
    43c6:	19 95       	eicall
    43c8:	89 2b       	or	r24, r25
    43ca:	19 f0       	breq	.+6      	; 0x43d2 <puts_P+0x54>
    43cc:	8f ef       	ldi	r24, 0xFF	; 255
    43ce:	9f ef       	ldi	r25, 0xFF	; 255
    43d0:	02 c0       	rjmp	.+4      	; 0x43d6 <puts_P+0x58>
    43d2:	8d 2f       	mov	r24, r29
    43d4:	9c 2f       	mov	r25, r28
    43d6:	df 91       	pop	r29
    43d8:	cf 91       	pop	r28
    43da:	1f 91       	pop	r17
    43dc:	0f 91       	pop	r16
    43de:	08 95       	ret

000043e0 <snprintf>:
    43e0:	0f 93       	push	r16
    43e2:	1f 93       	push	r17
    43e4:	cf 93       	push	r28
    43e6:	df 93       	push	r29
    43e8:	cd b7       	in	r28, 0x3d	; 61
    43ea:	de b7       	in	r29, 0x3e	; 62
    43ec:	2e 97       	sbiw	r28, 0x0e	; 14
    43ee:	0f b6       	in	r0, 0x3f	; 63
    43f0:	f8 94       	cli
    43f2:	de bf       	out	0x3e, r29	; 62
    43f4:	0f be       	out	0x3f, r0	; 63
    43f6:	cd bf       	out	0x3d, r28	; 61
    43f8:	0e 89       	ldd	r16, Y+22	; 0x16
    43fa:	1f 89       	ldd	r17, Y+23	; 0x17
    43fc:	88 8d       	ldd	r24, Y+24	; 0x18
    43fe:	99 8d       	ldd	r25, Y+25	; 0x19
    4400:	26 e0       	ldi	r18, 0x06	; 6
    4402:	2c 83       	std	Y+4, r18	; 0x04
    4404:	1a 83       	std	Y+2, r17	; 0x02
    4406:	09 83       	std	Y+1, r16	; 0x01
    4408:	97 ff       	sbrs	r25, 7
    440a:	02 c0       	rjmp	.+4      	; 0x4410 <snprintf+0x30>
    440c:	80 e0       	ldi	r24, 0x00	; 0
    440e:	90 e8       	ldi	r25, 0x80	; 128
    4410:	01 97       	sbiw	r24, 0x01	; 1
    4412:	9e 83       	std	Y+6, r25	; 0x06
    4414:	8d 83       	std	Y+5, r24	; 0x05
    4416:	ae 01       	movw	r20, r28
    4418:	44 5e       	subi	r20, 0xE4	; 228
    441a:	5f 4f       	sbci	r21, 0xFF	; 255
    441c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    441e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4420:	ce 01       	movw	r24, r28
    4422:	01 96       	adiw	r24, 0x01	; 1
    4424:	d9 d8       	rcall	.-3662   	; 0x35d8 <vfprintf>
    4426:	4d 81       	ldd	r20, Y+5	; 0x05
    4428:	5e 81       	ldd	r21, Y+6	; 0x06
    442a:	57 fd       	sbrc	r21, 7
    442c:	0a c0       	rjmp	.+20     	; 0x4442 <snprintf+0x62>
    442e:	2f 81       	ldd	r18, Y+7	; 0x07
    4430:	38 85       	ldd	r19, Y+8	; 0x08
    4432:	42 17       	cp	r20, r18
    4434:	53 07       	cpc	r21, r19
    4436:	0c f4       	brge	.+2      	; 0x443a <snprintf+0x5a>
    4438:	9a 01       	movw	r18, r20
    443a:	f8 01       	movw	r30, r16
    443c:	e2 0f       	add	r30, r18
    443e:	f3 1f       	adc	r31, r19
    4440:	10 82       	st	Z, r1
    4442:	2e 96       	adiw	r28, 0x0e	; 14
    4444:	0f b6       	in	r0, 0x3f	; 63
    4446:	f8 94       	cli
    4448:	de bf       	out	0x3e, r29	; 62
    444a:	0f be       	out	0x3f, r0	; 63
    444c:	cd bf       	out	0x3d, r28	; 61
    444e:	df 91       	pop	r29
    4450:	cf 91       	pop	r28
    4452:	1f 91       	pop	r17
    4454:	0f 91       	pop	r16
    4456:	08 95       	ret

00004458 <sprintf>:
    4458:	0f 93       	push	r16
    445a:	1f 93       	push	r17
    445c:	cf 93       	push	r28
    445e:	df 93       	push	r29
    4460:	cd b7       	in	r28, 0x3d	; 61
    4462:	de b7       	in	r29, 0x3e	; 62
    4464:	2e 97       	sbiw	r28, 0x0e	; 14
    4466:	0f b6       	in	r0, 0x3f	; 63
    4468:	f8 94       	cli
    446a:	de bf       	out	0x3e, r29	; 62
    446c:	0f be       	out	0x3f, r0	; 63
    446e:	cd bf       	out	0x3d, r28	; 61
    4470:	0e 89       	ldd	r16, Y+22	; 0x16
    4472:	1f 89       	ldd	r17, Y+23	; 0x17
    4474:	86 e0       	ldi	r24, 0x06	; 6
    4476:	8c 83       	std	Y+4, r24	; 0x04
    4478:	1a 83       	std	Y+2, r17	; 0x02
    447a:	09 83       	std	Y+1, r16	; 0x01
    447c:	8f ef       	ldi	r24, 0xFF	; 255
    447e:	9f e7       	ldi	r25, 0x7F	; 127
    4480:	9e 83       	std	Y+6, r25	; 0x06
    4482:	8d 83       	std	Y+5, r24	; 0x05
    4484:	ae 01       	movw	r20, r28
    4486:	46 5e       	subi	r20, 0xE6	; 230
    4488:	5f 4f       	sbci	r21, 0xFF	; 255
    448a:	68 8d       	ldd	r22, Y+24	; 0x18
    448c:	79 8d       	ldd	r23, Y+25	; 0x19
    448e:	ce 01       	movw	r24, r28
    4490:	01 96       	adiw	r24, 0x01	; 1
    4492:	a2 d8       	rcall	.-3772   	; 0x35d8 <vfprintf>
    4494:	ef 81       	ldd	r30, Y+7	; 0x07
    4496:	f8 85       	ldd	r31, Y+8	; 0x08
    4498:	e0 0f       	add	r30, r16
    449a:	f1 1f       	adc	r31, r17
    449c:	10 82       	st	Z, r1
    449e:	2e 96       	adiw	r28, 0x0e	; 14
    44a0:	0f b6       	in	r0, 0x3f	; 63
    44a2:	f8 94       	cli
    44a4:	de bf       	out	0x3e, r29	; 62
    44a6:	0f be       	out	0x3f, r0	; 63
    44a8:	cd bf       	out	0x3d, r28	; 61
    44aa:	df 91       	pop	r29
    44ac:	cf 91       	pop	r28
    44ae:	1f 91       	pop	r17
    44b0:	0f 91       	pop	r16
    44b2:	08 95       	ret

000044b4 <__ultoa_invert>:
    44b4:	fa 01       	movw	r30, r20
    44b6:	aa 27       	eor	r26, r26
    44b8:	28 30       	cpi	r18, 0x08	; 8
    44ba:	51 f1       	breq	.+84     	; 0x4510 <__ultoa_invert+0x5c>
    44bc:	20 31       	cpi	r18, 0x10	; 16
    44be:	81 f1       	breq	.+96     	; 0x4520 <__ultoa_invert+0x6c>
    44c0:	e8 94       	clt
    44c2:	6f 93       	push	r22
    44c4:	6e 7f       	andi	r22, 0xFE	; 254
    44c6:	6e 5f       	subi	r22, 0xFE	; 254
    44c8:	7f 4f       	sbci	r23, 0xFF	; 255
    44ca:	8f 4f       	sbci	r24, 0xFF	; 255
    44cc:	9f 4f       	sbci	r25, 0xFF	; 255
    44ce:	af 4f       	sbci	r26, 0xFF	; 255
    44d0:	b1 e0       	ldi	r27, 0x01	; 1
    44d2:	3e d0       	rcall	.+124    	; 0x4550 <__ultoa_invert+0x9c>
    44d4:	b4 e0       	ldi	r27, 0x04	; 4
    44d6:	3c d0       	rcall	.+120    	; 0x4550 <__ultoa_invert+0x9c>
    44d8:	67 0f       	add	r22, r23
    44da:	78 1f       	adc	r23, r24
    44dc:	89 1f       	adc	r24, r25
    44de:	9a 1f       	adc	r25, r26
    44e0:	a1 1d       	adc	r26, r1
    44e2:	68 0f       	add	r22, r24
    44e4:	79 1f       	adc	r23, r25
    44e6:	8a 1f       	adc	r24, r26
    44e8:	91 1d       	adc	r25, r1
    44ea:	a1 1d       	adc	r26, r1
    44ec:	6a 0f       	add	r22, r26
    44ee:	71 1d       	adc	r23, r1
    44f0:	81 1d       	adc	r24, r1
    44f2:	91 1d       	adc	r25, r1
    44f4:	a1 1d       	adc	r26, r1
    44f6:	20 d0       	rcall	.+64     	; 0x4538 <__ultoa_invert+0x84>
    44f8:	09 f4       	brne	.+2      	; 0x44fc <__ultoa_invert+0x48>
    44fa:	68 94       	set
    44fc:	3f 91       	pop	r19
    44fe:	2a e0       	ldi	r18, 0x0A	; 10
    4500:	26 9f       	mul	r18, r22
    4502:	11 24       	eor	r1, r1
    4504:	30 19       	sub	r19, r0
    4506:	30 5d       	subi	r19, 0xD0	; 208
    4508:	31 93       	st	Z+, r19
    450a:	de f6       	brtc	.-74     	; 0x44c2 <__ultoa_invert+0xe>
    450c:	cf 01       	movw	r24, r30
    450e:	08 95       	ret
    4510:	46 2f       	mov	r20, r22
    4512:	47 70       	andi	r20, 0x07	; 7
    4514:	40 5d       	subi	r20, 0xD0	; 208
    4516:	41 93       	st	Z+, r20
    4518:	b3 e0       	ldi	r27, 0x03	; 3
    451a:	0f d0       	rcall	.+30     	; 0x453a <__ultoa_invert+0x86>
    451c:	c9 f7       	brne	.-14     	; 0x4510 <__ultoa_invert+0x5c>
    451e:	f6 cf       	rjmp	.-20     	; 0x450c <__ultoa_invert+0x58>
    4520:	46 2f       	mov	r20, r22
    4522:	4f 70       	andi	r20, 0x0F	; 15
    4524:	40 5d       	subi	r20, 0xD0	; 208
    4526:	4a 33       	cpi	r20, 0x3A	; 58
    4528:	18 f0       	brcs	.+6      	; 0x4530 <__ultoa_invert+0x7c>
    452a:	49 5d       	subi	r20, 0xD9	; 217
    452c:	31 fd       	sbrc	r19, 1
    452e:	40 52       	subi	r20, 0x20	; 32
    4530:	41 93       	st	Z+, r20
    4532:	02 d0       	rcall	.+4      	; 0x4538 <__ultoa_invert+0x84>
    4534:	a9 f7       	brne	.-22     	; 0x4520 <__ultoa_invert+0x6c>
    4536:	ea cf       	rjmp	.-44     	; 0x450c <__ultoa_invert+0x58>
    4538:	b4 e0       	ldi	r27, 0x04	; 4
    453a:	a6 95       	lsr	r26
    453c:	97 95       	ror	r25
    453e:	87 95       	ror	r24
    4540:	77 95       	ror	r23
    4542:	67 95       	ror	r22
    4544:	ba 95       	dec	r27
    4546:	c9 f7       	brne	.-14     	; 0x453a <__ultoa_invert+0x86>
    4548:	00 97       	sbiw	r24, 0x00	; 0
    454a:	61 05       	cpc	r22, r1
    454c:	71 05       	cpc	r23, r1
    454e:	08 95       	ret
    4550:	9b 01       	movw	r18, r22
    4552:	ac 01       	movw	r20, r24
    4554:	0a 2e       	mov	r0, r26
    4556:	06 94       	lsr	r0
    4558:	57 95       	ror	r21
    455a:	47 95       	ror	r20
    455c:	37 95       	ror	r19
    455e:	27 95       	ror	r18
    4560:	ba 95       	dec	r27
    4562:	c9 f7       	brne	.-14     	; 0x4556 <__ultoa_invert+0xa2>
    4564:	62 0f       	add	r22, r18
    4566:	73 1f       	adc	r23, r19
    4568:	84 1f       	adc	r24, r20
    456a:	95 1f       	adc	r25, r21
    456c:	a0 1d       	adc	r26, r0
    456e:	08 95       	ret

00004570 <dtoa_prf>:
    4570:	8f 92       	push	r8
    4572:	9f 92       	push	r9
    4574:	af 92       	push	r10
    4576:	bf 92       	push	r11
    4578:	cf 92       	push	r12
    457a:	df 92       	push	r13
    457c:	ef 92       	push	r14
    457e:	ff 92       	push	r15
    4580:	0f 93       	push	r16
    4582:	1f 93       	push	r17
    4584:	cf 93       	push	r28
    4586:	df 93       	push	r29
    4588:	cd b7       	in	r28, 0x3d	; 61
    458a:	de b7       	in	r29, 0x3e	; 62
    458c:	29 97       	sbiw	r28, 0x09	; 9
    458e:	0f b6       	in	r0, 0x3f	; 63
    4590:	f8 94       	cli
    4592:	de bf       	out	0x3e, r29	; 62
    4594:	0f be       	out	0x3f, r0	; 63
    4596:	cd bf       	out	0x3d, r28	; 61
    4598:	6a 01       	movw	r12, r20
    459a:	12 2f       	mov	r17, r18
    459c:	b0 2e       	mov	r11, r16
    459e:	2b e3       	ldi	r18, 0x3B	; 59
    45a0:	20 17       	cp	r18, r16
    45a2:	20 f0       	brcs	.+8      	; 0x45ac <dtoa_prf+0x3c>
    45a4:	ff 24       	eor	r15, r15
    45a6:	f3 94       	inc	r15
    45a8:	f0 0e       	add	r15, r16
    45aa:	02 c0       	rjmp	.+4      	; 0x45b0 <dtoa_prf+0x40>
    45ac:	2c e3       	ldi	r18, 0x3C	; 60
    45ae:	f2 2e       	mov	r15, r18
    45b0:	0f 2d       	mov	r16, r15
    45b2:	27 e0       	ldi	r18, 0x07	; 7
    45b4:	ae 01       	movw	r20, r28
    45b6:	4f 5f       	subi	r20, 0xFF	; 255
    45b8:	5f 4f       	sbci	r21, 0xFF	; 255
    45ba:	54 dd       	rcall	.-1368   	; 0x4064 <__ftoa_engine>
    45bc:	bc 01       	movw	r22, r24
    45be:	49 81       	ldd	r20, Y+1	; 0x01
    45c0:	84 2f       	mov	r24, r20
    45c2:	89 70       	andi	r24, 0x09	; 9
    45c4:	81 30       	cpi	r24, 0x01	; 1
    45c6:	31 f0       	breq	.+12     	; 0x45d4 <dtoa_prf+0x64>
    45c8:	e1 fc       	sbrc	r14, 1
    45ca:	06 c0       	rjmp	.+12     	; 0x45d8 <dtoa_prf+0x68>
    45cc:	e0 fe       	sbrs	r14, 0
    45ce:	06 c0       	rjmp	.+12     	; 0x45dc <dtoa_prf+0x6c>
    45d0:	90 e2       	ldi	r25, 0x20	; 32
    45d2:	05 c0       	rjmp	.+10     	; 0x45de <dtoa_prf+0x6e>
    45d4:	9d e2       	ldi	r25, 0x2D	; 45
    45d6:	03 c0       	rjmp	.+6      	; 0x45de <dtoa_prf+0x6e>
    45d8:	9b e2       	ldi	r25, 0x2B	; 43
    45da:	01 c0       	rjmp	.+2      	; 0x45de <dtoa_prf+0x6e>
    45dc:	90 e0       	ldi	r25, 0x00	; 0
    45de:	5e 2d       	mov	r21, r14
    45e0:	50 71       	andi	r21, 0x10	; 16
    45e2:	43 ff       	sbrs	r20, 3
    45e4:	3c c0       	rjmp	.+120    	; 0x465e <dtoa_prf+0xee>
    45e6:	91 11       	cpse	r25, r1
    45e8:	02 c0       	rjmp	.+4      	; 0x45ee <dtoa_prf+0x7e>
    45ea:	83 e0       	ldi	r24, 0x03	; 3
    45ec:	01 c0       	rjmp	.+2      	; 0x45f0 <dtoa_prf+0x80>
    45ee:	84 e0       	ldi	r24, 0x04	; 4
    45f0:	81 17       	cp	r24, r17
    45f2:	18 f4       	brcc	.+6      	; 0x45fa <dtoa_prf+0x8a>
    45f4:	21 2f       	mov	r18, r17
    45f6:	28 1b       	sub	r18, r24
    45f8:	01 c0       	rjmp	.+2      	; 0x45fc <dtoa_prf+0x8c>
    45fa:	20 e0       	ldi	r18, 0x00	; 0
    45fc:	51 11       	cpse	r21, r1
    45fe:	0b c0       	rjmp	.+22     	; 0x4616 <dtoa_prf+0xa6>
    4600:	f6 01       	movw	r30, r12
    4602:	82 2f       	mov	r24, r18
    4604:	30 e2       	ldi	r19, 0x20	; 32
    4606:	88 23       	and	r24, r24
    4608:	19 f0       	breq	.+6      	; 0x4610 <dtoa_prf+0xa0>
    460a:	31 93       	st	Z+, r19
    460c:	81 50       	subi	r24, 0x01	; 1
    460e:	fb cf       	rjmp	.-10     	; 0x4606 <dtoa_prf+0x96>
    4610:	c2 0e       	add	r12, r18
    4612:	d1 1c       	adc	r13, r1
    4614:	20 e0       	ldi	r18, 0x00	; 0
    4616:	99 23       	and	r25, r25
    4618:	29 f0       	breq	.+10     	; 0x4624 <dtoa_prf+0xb4>
    461a:	d6 01       	movw	r26, r12
    461c:	9c 93       	st	X, r25
    461e:	f6 01       	movw	r30, r12
    4620:	31 96       	adiw	r30, 0x01	; 1
    4622:	6f 01       	movw	r12, r30
    4624:	c6 01       	movw	r24, r12
    4626:	03 96       	adiw	r24, 0x03	; 3
    4628:	e2 fe       	sbrs	r14, 2
    462a:	0a c0       	rjmp	.+20     	; 0x4640 <dtoa_prf+0xd0>
    462c:	3e e4       	ldi	r19, 0x4E	; 78
    462e:	d6 01       	movw	r26, r12
    4630:	3c 93       	st	X, r19
    4632:	41 e4       	ldi	r20, 0x41	; 65
    4634:	11 96       	adiw	r26, 0x01	; 1
    4636:	4c 93       	st	X, r20
    4638:	11 97       	sbiw	r26, 0x01	; 1
    463a:	12 96       	adiw	r26, 0x02	; 2
    463c:	3c 93       	st	X, r19
    463e:	06 c0       	rjmp	.+12     	; 0x464c <dtoa_prf+0xdc>
    4640:	3e e6       	ldi	r19, 0x6E	; 110
    4642:	f6 01       	movw	r30, r12
    4644:	30 83       	st	Z, r19
    4646:	41 e6       	ldi	r20, 0x61	; 97
    4648:	41 83       	std	Z+1, r20	; 0x01
    464a:	32 83       	std	Z+2, r19	; 0x02
    464c:	fc 01       	movw	r30, r24
    464e:	32 2f       	mov	r19, r18
    4650:	40 e2       	ldi	r20, 0x20	; 32
    4652:	33 23       	and	r19, r19
    4654:	09 f4       	brne	.+2      	; 0x4658 <dtoa_prf+0xe8>
    4656:	42 c0       	rjmp	.+132    	; 0x46dc <dtoa_prf+0x16c>
    4658:	41 93       	st	Z+, r20
    465a:	31 50       	subi	r19, 0x01	; 1
    465c:	fa cf       	rjmp	.-12     	; 0x4652 <dtoa_prf+0xe2>
    465e:	42 ff       	sbrs	r20, 2
    4660:	44 c0       	rjmp	.+136    	; 0x46ea <dtoa_prf+0x17a>
    4662:	91 11       	cpse	r25, r1
    4664:	02 c0       	rjmp	.+4      	; 0x466a <dtoa_prf+0xfa>
    4666:	83 e0       	ldi	r24, 0x03	; 3
    4668:	01 c0       	rjmp	.+2      	; 0x466c <dtoa_prf+0xfc>
    466a:	84 e0       	ldi	r24, 0x04	; 4
    466c:	81 17       	cp	r24, r17
    466e:	18 f4       	brcc	.+6      	; 0x4676 <dtoa_prf+0x106>
    4670:	21 2f       	mov	r18, r17
    4672:	28 1b       	sub	r18, r24
    4674:	01 c0       	rjmp	.+2      	; 0x4678 <dtoa_prf+0x108>
    4676:	20 e0       	ldi	r18, 0x00	; 0
    4678:	51 11       	cpse	r21, r1
    467a:	0b c0       	rjmp	.+22     	; 0x4692 <dtoa_prf+0x122>
    467c:	f6 01       	movw	r30, r12
    467e:	82 2f       	mov	r24, r18
    4680:	30 e2       	ldi	r19, 0x20	; 32
    4682:	88 23       	and	r24, r24
    4684:	19 f0       	breq	.+6      	; 0x468c <dtoa_prf+0x11c>
    4686:	31 93       	st	Z+, r19
    4688:	81 50       	subi	r24, 0x01	; 1
    468a:	fb cf       	rjmp	.-10     	; 0x4682 <dtoa_prf+0x112>
    468c:	c2 0e       	add	r12, r18
    468e:	d1 1c       	adc	r13, r1
    4690:	20 e0       	ldi	r18, 0x00	; 0
    4692:	99 23       	and	r25, r25
    4694:	29 f0       	breq	.+10     	; 0x46a0 <dtoa_prf+0x130>
    4696:	d6 01       	movw	r26, r12
    4698:	9c 93       	st	X, r25
    469a:	f6 01       	movw	r30, r12
    469c:	31 96       	adiw	r30, 0x01	; 1
    469e:	6f 01       	movw	r12, r30
    46a0:	c6 01       	movw	r24, r12
    46a2:	03 96       	adiw	r24, 0x03	; 3
    46a4:	e2 fe       	sbrs	r14, 2
    46a6:	0b c0       	rjmp	.+22     	; 0x46be <dtoa_prf+0x14e>
    46a8:	39 e4       	ldi	r19, 0x49	; 73
    46aa:	d6 01       	movw	r26, r12
    46ac:	3c 93       	st	X, r19
    46ae:	3e e4       	ldi	r19, 0x4E	; 78
    46b0:	11 96       	adiw	r26, 0x01	; 1
    46b2:	3c 93       	st	X, r19
    46b4:	11 97       	sbiw	r26, 0x01	; 1
    46b6:	36 e4       	ldi	r19, 0x46	; 70
    46b8:	12 96       	adiw	r26, 0x02	; 2
    46ba:	3c 93       	st	X, r19
    46bc:	07 c0       	rjmp	.+14     	; 0x46cc <dtoa_prf+0x15c>
    46be:	39 e6       	ldi	r19, 0x69	; 105
    46c0:	f6 01       	movw	r30, r12
    46c2:	30 83       	st	Z, r19
    46c4:	3e e6       	ldi	r19, 0x6E	; 110
    46c6:	31 83       	std	Z+1, r19	; 0x01
    46c8:	36 e6       	ldi	r19, 0x66	; 102
    46ca:	32 83       	std	Z+2, r19	; 0x02
    46cc:	fc 01       	movw	r30, r24
    46ce:	32 2f       	mov	r19, r18
    46d0:	40 e2       	ldi	r20, 0x20	; 32
    46d2:	33 23       	and	r19, r19
    46d4:	19 f0       	breq	.+6      	; 0x46dc <dtoa_prf+0x16c>
    46d6:	41 93       	st	Z+, r20
    46d8:	31 50       	subi	r19, 0x01	; 1
    46da:	fb cf       	rjmp	.-10     	; 0x46d2 <dtoa_prf+0x162>
    46dc:	fc 01       	movw	r30, r24
    46de:	e2 0f       	add	r30, r18
    46e0:	f1 1d       	adc	r31, r1
    46e2:	10 82       	st	Z, r1
    46e4:	8e ef       	ldi	r24, 0xFE	; 254
    46e6:	9f ef       	ldi	r25, 0xFF	; 255
    46e8:	a6 c0       	rjmp	.+332    	; 0x4836 <dtoa_prf+0x2c6>
    46ea:	21 e0       	ldi	r18, 0x01	; 1
    46ec:	30 e0       	ldi	r19, 0x00	; 0
    46ee:	91 11       	cpse	r25, r1
    46f0:	02 c0       	rjmp	.+4      	; 0x46f6 <dtoa_prf+0x186>
    46f2:	20 e0       	ldi	r18, 0x00	; 0
    46f4:	30 e0       	ldi	r19, 0x00	; 0
    46f6:	16 16       	cp	r1, r22
    46f8:	17 06       	cpc	r1, r23
    46fa:	1c f4       	brge	.+6      	; 0x4702 <dtoa_prf+0x192>
    46fc:	fb 01       	movw	r30, r22
    46fe:	31 96       	adiw	r30, 0x01	; 1
    4700:	02 c0       	rjmp	.+4      	; 0x4706 <dtoa_prf+0x196>
    4702:	e1 e0       	ldi	r30, 0x01	; 1
    4704:	f0 e0       	ldi	r31, 0x00	; 0
    4706:	2e 0f       	add	r18, r30
    4708:	3f 1f       	adc	r19, r31
    470a:	bb 20       	and	r11, r11
    470c:	21 f0       	breq	.+8      	; 0x4716 <dtoa_prf+0x1a6>
    470e:	eb 2d       	mov	r30, r11
    4710:	f0 e0       	ldi	r31, 0x00	; 0
    4712:	31 96       	adiw	r30, 0x01	; 1
    4714:	02 c0       	rjmp	.+4      	; 0x471a <dtoa_prf+0x1aa>
    4716:	e0 e0       	ldi	r30, 0x00	; 0
    4718:	f0 e0       	ldi	r31, 0x00	; 0
    471a:	2e 0f       	add	r18, r30
    471c:	3f 1f       	adc	r19, r31
    471e:	e1 2f       	mov	r30, r17
    4720:	f0 e0       	ldi	r31, 0x00	; 0
    4722:	2e 17       	cp	r18, r30
    4724:	3f 07       	cpc	r19, r31
    4726:	1c f4       	brge	.+6      	; 0x472e <dtoa_prf+0x1be>
    4728:	12 1b       	sub	r17, r18
    472a:	21 2f       	mov	r18, r17
    472c:	01 c0       	rjmp	.+2      	; 0x4730 <dtoa_prf+0x1c0>
    472e:	20 e0       	ldi	r18, 0x00	; 0
    4730:	8e 2d       	mov	r24, r14
    4732:	88 71       	andi	r24, 0x18	; 24
    4734:	59 f4       	brne	.+22     	; 0x474c <dtoa_prf+0x1dc>
    4736:	f6 01       	movw	r30, r12
    4738:	82 2f       	mov	r24, r18
    473a:	30 e2       	ldi	r19, 0x20	; 32
    473c:	88 23       	and	r24, r24
    473e:	19 f0       	breq	.+6      	; 0x4746 <dtoa_prf+0x1d6>
    4740:	31 93       	st	Z+, r19
    4742:	81 50       	subi	r24, 0x01	; 1
    4744:	fb cf       	rjmp	.-10     	; 0x473c <dtoa_prf+0x1cc>
    4746:	c2 0e       	add	r12, r18
    4748:	d1 1c       	adc	r13, r1
    474a:	20 e0       	ldi	r18, 0x00	; 0
    474c:	99 23       	and	r25, r25
    474e:	29 f0       	breq	.+10     	; 0x475a <dtoa_prf+0x1ea>
    4750:	d6 01       	movw	r26, r12
    4752:	9c 93       	st	X, r25
    4754:	f6 01       	movw	r30, r12
    4756:	31 96       	adiw	r30, 0x01	; 1
    4758:	6f 01       	movw	r12, r30
    475a:	51 11       	cpse	r21, r1
    475c:	0b c0       	rjmp	.+22     	; 0x4774 <dtoa_prf+0x204>
    475e:	f6 01       	movw	r30, r12
    4760:	82 2f       	mov	r24, r18
    4762:	90 e3       	ldi	r25, 0x30	; 48
    4764:	88 23       	and	r24, r24
    4766:	19 f0       	breq	.+6      	; 0x476e <dtoa_prf+0x1fe>
    4768:	91 93       	st	Z+, r25
    476a:	81 50       	subi	r24, 0x01	; 1
    476c:	fb cf       	rjmp	.-10     	; 0x4764 <dtoa_prf+0x1f4>
    476e:	c2 0e       	add	r12, r18
    4770:	d1 1c       	adc	r13, r1
    4772:	20 e0       	ldi	r18, 0x00	; 0
    4774:	0f 2d       	mov	r16, r15
    4776:	06 0f       	add	r16, r22
    4778:	9a 81       	ldd	r25, Y+2	; 0x02
    477a:	34 2f       	mov	r19, r20
    477c:	30 71       	andi	r19, 0x10	; 16
    477e:	44 ff       	sbrs	r20, 4
    4780:	03 c0       	rjmp	.+6      	; 0x4788 <dtoa_prf+0x218>
    4782:	91 33       	cpi	r25, 0x31	; 49
    4784:	09 f4       	brne	.+2      	; 0x4788 <dtoa_prf+0x218>
    4786:	01 50       	subi	r16, 0x01	; 1
    4788:	10 16       	cp	r1, r16
    478a:	24 f4       	brge	.+8      	; 0x4794 <dtoa_prf+0x224>
    478c:	09 30       	cpi	r16, 0x09	; 9
    478e:	18 f0       	brcs	.+6      	; 0x4796 <dtoa_prf+0x226>
    4790:	08 e0       	ldi	r16, 0x08	; 8
    4792:	01 c0       	rjmp	.+2      	; 0x4796 <dtoa_prf+0x226>
    4794:	01 e0       	ldi	r16, 0x01	; 1
    4796:	ab 01       	movw	r20, r22
    4798:	77 ff       	sbrs	r23, 7
    479a:	02 c0       	rjmp	.+4      	; 0x47a0 <dtoa_prf+0x230>
    479c:	40 e0       	ldi	r20, 0x00	; 0
    479e:	50 e0       	ldi	r21, 0x00	; 0
    47a0:	fb 01       	movw	r30, r22
    47a2:	e4 1b       	sub	r30, r20
    47a4:	f5 0b       	sbc	r31, r21
    47a6:	a1 e0       	ldi	r26, 0x01	; 1
    47a8:	b0 e0       	ldi	r27, 0x00	; 0
    47aa:	ac 0f       	add	r26, r28
    47ac:	bd 1f       	adc	r27, r29
    47ae:	ea 0f       	add	r30, r26
    47b0:	fb 1f       	adc	r31, r27
    47b2:	8e e2       	ldi	r24, 0x2E	; 46
    47b4:	a8 2e       	mov	r10, r24
    47b6:	4b 01       	movw	r8, r22
    47b8:	80 1a       	sub	r8, r16
    47ba:	91 08       	sbc	r9, r1
    47bc:	0b 2d       	mov	r16, r11
    47be:	10 e0       	ldi	r17, 0x00	; 0
    47c0:	11 95       	neg	r17
    47c2:	01 95       	neg	r16
    47c4:	11 09       	sbc	r17, r1
    47c6:	4f 3f       	cpi	r20, 0xFF	; 255
    47c8:	bf ef       	ldi	r27, 0xFF	; 255
    47ca:	5b 07       	cpc	r21, r27
    47cc:	21 f4       	brne	.+8      	; 0x47d6 <dtoa_prf+0x266>
    47ce:	d6 01       	movw	r26, r12
    47d0:	ac 92       	st	X, r10
    47d2:	11 96       	adiw	r26, 0x01	; 1
    47d4:	6d 01       	movw	r12, r26
    47d6:	64 17       	cp	r22, r20
    47d8:	75 07       	cpc	r23, r21
    47da:	2c f0       	brlt	.+10     	; 0x47e6 <dtoa_prf+0x276>
    47dc:	84 16       	cp	r8, r20
    47de:	95 06       	cpc	r9, r21
    47e0:	14 f4       	brge	.+4      	; 0x47e6 <dtoa_prf+0x276>
    47e2:	81 81       	ldd	r24, Z+1	; 0x01
    47e4:	01 c0       	rjmp	.+2      	; 0x47e8 <dtoa_prf+0x278>
    47e6:	80 e3       	ldi	r24, 0x30	; 48
    47e8:	41 50       	subi	r20, 0x01	; 1
    47ea:	51 09       	sbc	r21, r1
    47ec:	31 96       	adiw	r30, 0x01	; 1
    47ee:	d6 01       	movw	r26, r12
    47f0:	11 96       	adiw	r26, 0x01	; 1
    47f2:	7d 01       	movw	r14, r26
    47f4:	40 17       	cp	r20, r16
    47f6:	51 07       	cpc	r21, r17
    47f8:	24 f0       	brlt	.+8      	; 0x4802 <dtoa_prf+0x292>
    47fa:	d6 01       	movw	r26, r12
    47fc:	8c 93       	st	X, r24
    47fe:	67 01       	movw	r12, r14
    4800:	e2 cf       	rjmp	.-60     	; 0x47c6 <dtoa_prf+0x256>
    4802:	64 17       	cp	r22, r20
    4804:	75 07       	cpc	r23, r21
    4806:	39 f4       	brne	.+14     	; 0x4816 <dtoa_prf+0x2a6>
    4808:	96 33       	cpi	r25, 0x36	; 54
    480a:	20 f4       	brcc	.+8      	; 0x4814 <dtoa_prf+0x2a4>
    480c:	95 33       	cpi	r25, 0x35	; 53
    480e:	19 f4       	brne	.+6      	; 0x4816 <dtoa_prf+0x2a6>
    4810:	31 11       	cpse	r19, r1
    4812:	01 c0       	rjmp	.+2      	; 0x4816 <dtoa_prf+0x2a6>
    4814:	81 e3       	ldi	r24, 0x31	; 49
    4816:	f6 01       	movw	r30, r12
    4818:	80 83       	st	Z, r24
    481a:	f7 01       	movw	r30, r14
    481c:	82 2f       	mov	r24, r18
    481e:	90 e2       	ldi	r25, 0x20	; 32
    4820:	88 23       	and	r24, r24
    4822:	19 f0       	breq	.+6      	; 0x482a <dtoa_prf+0x2ba>
    4824:	91 93       	st	Z+, r25
    4826:	81 50       	subi	r24, 0x01	; 1
    4828:	fb cf       	rjmp	.-10     	; 0x4820 <dtoa_prf+0x2b0>
    482a:	f7 01       	movw	r30, r14
    482c:	e2 0f       	add	r30, r18
    482e:	f1 1d       	adc	r31, r1
    4830:	10 82       	st	Z, r1
    4832:	80 e0       	ldi	r24, 0x00	; 0
    4834:	90 e0       	ldi	r25, 0x00	; 0
    4836:	29 96       	adiw	r28, 0x09	; 9
    4838:	0f b6       	in	r0, 0x3f	; 63
    483a:	f8 94       	cli
    483c:	de bf       	out	0x3e, r29	; 62
    483e:	0f be       	out	0x3f, r0	; 63
    4840:	cd bf       	out	0x3d, r28	; 61
    4842:	df 91       	pop	r29
    4844:	cf 91       	pop	r28
    4846:	1f 91       	pop	r17
    4848:	0f 91       	pop	r16
    484a:	ff 90       	pop	r15
    484c:	ef 90       	pop	r14
    484e:	df 90       	pop	r13
    4850:	cf 90       	pop	r12
    4852:	bf 90       	pop	r11
    4854:	af 90       	pop	r10
    4856:	9f 90       	pop	r9
    4858:	8f 90       	pop	r8
    485a:	08 95       	ret

0000485c <eeprom_read_word>:
    485c:	a8 e1       	ldi	r26, 0x18	; 24
    485e:	b0 e0       	ldi	r27, 0x00	; 0
    4860:	42 e0       	ldi	r20, 0x02	; 2
    4862:	50 e0       	ldi	r21, 0x00	; 0
    4864:	06 c0       	rjmp	.+12     	; 0x4872 <eeprom_read_blraw>

00004866 <eeprom_update_word>:
    4866:	01 96       	adiw	r24, 0x01	; 1
    4868:	27 2f       	mov	r18, r23
    486a:	12 d0       	rcall	.+36     	; 0x4890 <eeprom_update_r18>
    486c:	10 c0       	rjmp	.+32     	; 0x488e <eeprom_update_byte>

0000486e <eeprom_read_block>:
    486e:	dc 01       	movw	r26, r24
    4870:	cb 01       	movw	r24, r22

00004872 <eeprom_read_blraw>:
    4872:	fc 01       	movw	r30, r24
    4874:	f9 99       	sbic	0x1f, 1	; 31
    4876:	fe cf       	rjmp	.-4      	; 0x4874 <eeprom_read_blraw+0x2>
    4878:	06 c0       	rjmp	.+12     	; 0x4886 <eeprom_read_blraw+0x14>
    487a:	f2 bd       	out	0x22, r31	; 34
    487c:	e1 bd       	out	0x21, r30	; 33
    487e:	f8 9a       	sbi	0x1f, 0	; 31
    4880:	31 96       	adiw	r30, 0x01	; 1
    4882:	00 b4       	in	r0, 0x20	; 32
    4884:	0d 92       	st	X+, r0
    4886:	41 50       	subi	r20, 0x01	; 1
    4888:	50 40       	sbci	r21, 0x00	; 0
    488a:	b8 f7       	brcc	.-18     	; 0x487a <eeprom_read_blraw+0x8>
    488c:	08 95       	ret

0000488e <eeprom_update_byte>:
    488e:	26 2f       	mov	r18, r22

00004890 <eeprom_update_r18>:
    4890:	f9 99       	sbic	0x1f, 1	; 31
    4892:	fe cf       	rjmp	.-4      	; 0x4890 <eeprom_update_r18>
    4894:	92 bd       	out	0x22, r25	; 34
    4896:	81 bd       	out	0x21, r24	; 33
    4898:	f8 9a       	sbi	0x1f, 0	; 31
    489a:	01 97       	sbiw	r24, 0x01	; 1
    489c:	00 b4       	in	r0, 0x20	; 32
    489e:	02 16       	cp	r0, r18
    48a0:	39 f0       	breq	.+14     	; 0x48b0 <eeprom_update_r18+0x20>
    48a2:	1f ba       	out	0x1f, r1	; 31
    48a4:	20 bd       	out	0x20, r18	; 32
    48a6:	0f b6       	in	r0, 0x3f	; 63
    48a8:	f8 94       	cli
    48aa:	fa 9a       	sbi	0x1f, 2	; 31
    48ac:	f9 9a       	sbi	0x1f, 1	; 31
    48ae:	0f be       	out	0x3f, r0	; 63
    48b0:	08 95       	ret

000048b2 <_exit>:
    48b2:	f8 94       	cli

000048b4 <__stop_program>:
    48b4:	ff cf       	rjmp	.-2      	; 0x48b4 <__stop_program>
